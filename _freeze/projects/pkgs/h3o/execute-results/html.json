{
  "hash": "e9df425349bc1a751002dfb7345babac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"h3o for H3 indexing\"\ncategories: [spatial, package]\ndate: 2023-03-16\n---\n\n\n[{h3o}](https://h3o.josiahparry.com/ \"Link to h3o R package\") is an R package that offers high-performance geospatial indexing using the [H3 grid system](https://h3geo.org/ \"H3 Uber\"). The package is built using [{extendr}](https://extendr.github.io/) and provides bindings to the Rust library of the same name.\n\nThe Rust community built [`h3o`](https://github.com/HydroniumLabs/h3o) which is a *pure* rust implementation of Uber's H3 hierarchical hexagon grid system. Since h3o is a pure rust library it is typically safer to use, just as fast, and dependency free.\n\n## Benefits of h3o\n\nSince h3o is built *purely* in Rust and R it is **system dependency free** and can be compiled for multiple platforms including Linux, MacOS, and Windows, making it easy to use across different OS.\n\nh3o benefits greatly from the type safety of Rust and provides robust error handling often returning 0 length vectors or NA values when appropriate where errors would typically occur using another H3 library.\n\nAnd moreover, it is very fast!\n\n## Features\n\nh3o supports all of the functionality that is provided by the C library and the Rust library h3o.\n\n::: aside\nIf there are any features missing, please make an issue on GitHub and I'll be sure to address it!\n:::\n\nh3o was built with sf objects and the tidyverse in mind. h3o objects can be created from sf objects and vice versa. Compatibility with the tidyverse is accomplished via the vctrs package.\n\n-   `sf::st_as_sfc()` methods for `H3` and `H3Edge` vectors\n-   automatic nesting by creating lists of `H3` and `H3Edge` vectors\n    -   vectorized output will never return more objects than inputs\n\n### Example\n\nCreate some points in the bounding box of Wyoming.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(h3o)\n\n# create a bounding box\nbbox_raw <- setNames(\n  c(-111.056888, 40.994746, -104.05216, 45.005904),\n  c(\"xmin\", \"ymin\", \"xmax\", \"ymax\")\n)\n\n# create some points\npnts <- st_bbox(bbox_raw) |> \n  st_as_sfc() |> \n  st_set_crs(4326) |> \n  st_sample(25)\n\n# convert to H3 index\nhexs <- h3_from_points(pnts, 4) \nhexs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<H3[25]>\n [1] 8428967ffffffff 8426b39ffffffff 8426a63ffffffff 8426b07ffffffff\n [5] 8426a39ffffffff 8426b63ffffffff 8426b0bffffffff 8426b41ffffffff\n [9] 842799bffffffff 8426b37ffffffff 8426b69ffffffff 842686bffffffff\n[13] 8426a23ffffffff 8426b27ffffffff 8426a33ffffffff 8426b37ffffffff\n[17] 8427995ffffffff 8426ae1ffffffff 8426b41ffffffff 8426b19ffffffff\n[21] 8427987ffffffff 8426a3dffffffff 8426869ffffffff 8426a4bffffffff\n[25] 84278b5ffffffff\n```\n\n\n:::\n:::\n\n\nThe `H3` vectors can be easily visualized by converting to sf objects. The `st_as_sfc()` method is defined for `H3` vectors. While you may be familair with `st_as_sf()` the `_sfc` variant is used for creating *columns* and should be used on a vector not a dataframe. This way you can use it in a dplyr pipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolys <- st_as_sfc(hexs)\npolys\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 25 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -111.3223 ymin: 40.98183 xmax: -104.0128 ymax: 45.25314\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((-110.4193 44.57636, -110.1531 44.7197...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((-109.2683 41.89614, -109.0075 42.0412...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((-106.3176 43.2172, -106.0491 43.35331...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((-109.6219 42.21408, -109.3608 42.3595...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((-105.2868 42.23801, -105.0199 42.3733...\n```\n\n\n:::\n:::\n\n\nThis can be plotted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(polys)\n```\n\n::: {.cell-output-display}\n![](h3o_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nTo illustrate tidyverse compatibility lets create an sf object and create a column of `H3` indexes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\n\nhexs <- tibble(geometry = pnts) |> \n  st_as_sf() |> \n  mutate(h3 = h3_from_points(geometry, 4))\n\nhexs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 25 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -111.0541 ymin: 41.15866 xmax: -104.2527 ymax: 44.95915\nGeodetic CRS:  WGS 84\n# A tibble: 25 × 2\n               geometry              h3\n *          <POINT [°]>            <H3>\n 1 (-110.5547 44.90545) 8428967ffffffff\n 2 (-109.1383 42.13601) 8426b39ffffffff\n 3 (-106.4981 43.56823) 8426a63ffffffff\n 4 (-109.6964 42.39072) 8426b07ffffffff\n 5   (-105.276 42.5727) 8426a39ffffffff\n 6 (-110.1881 43.04803) 8426b63ffffffff\n 7 (-108.7864 42.90369) 8426b0bffffffff\n 8 (-109.6165 43.81228) 8426b41ffffffff\n 9 (-105.9806 44.87154) 842799bffffffff\n10  (-109.811 41.48857) 8426b37ffffffff\n# ℹ 15 more rows\n```\n\n\n:::\n:::\n\n\nAfterwards, lets create a K = 3 disk around each grid cell, create a compact disk by compacting the cells, then unnest into a longer data frame, and update our geometries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompact_hexs <- hexs |> \n  mutate(\n    disks = grid_disk(h3, 3),\n    compact_disks = purrr::map(disks, compact_cells)\n  ) |> \n  tidyr::unnest_longer(compact_disks) |> \n  mutate(geometry = st_as_sfc(compact_disks)) |> \n  st_as_sf() \n```\n:::\n\n\nUse ggplot2 to make a simple visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(compact_hexs) +\n  geom_sf(fill = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](h3o_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "h3o_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}