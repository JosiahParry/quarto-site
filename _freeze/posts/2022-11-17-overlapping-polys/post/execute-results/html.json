{
  "hash": "63b6f6631af46adcb3a9ddd21960766a",
  "result": {
    "markdown": "---\ntitle: Fishnets and overlapping polygons\ncategories: [r, spatial, tutorial]\n---\n\n\nToday a question was asked in the geocompr discord. I wanted to share part of the solution as I think it covers 2 helpful things:\n\n- making a fishnet grid\n- calculating the area of overlap between two polygons\n\nFor this example I'm using data from the [Atlanta GIS Open Data Portal](http://gis.atlantaga.gov/?page=OPEN-DATA-HUB). Specifically using the [future land use polygons](https://dpcd-coaplangis.opendata.arcgis.com/maps/future-land-use-).\n\nI've downloaded a local copy of the data as a geojson. But you can read it using the ArcGIS Feature Server it is hosted on.\n\n\n### Objective\n\nCreate a map of Atlanta, visualized as a hexagon grid, that displays the amount of planned mixed use zoning. This will be done in the following sequence:\n\n1. Creating a fishnet (hexagon) grid over the city\n2. Creating intersected polygons \n3. Calculate the area of intersected polygons\n4. Join back to the original fishnet grid\n5. visualized. \n\n### Mixed-use zoning \n\n\nStart by loading sf, dplyr, and ggplot2. sf for our spatial work, dplyr for making our lives easier, and ggplot2 for a bad map later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n\nWe read in our data (mine is local). You can use the commented out code to read directly from the ArcGIS feature server. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read from the ArcGIS feature server\n# st_read(\"https://services5.arcgis.com/5RxyIIJ9boPdptdo/arcgis/rest/services/Land_Use_Future/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\")\n\nfuture_land_use <- read_sf(\"Future_Land_Use_.geojson\") |> \n  mutate(geometry = st_make_valid(geometry))\n```\n:::\n\n\nLet's look at the different land use descriptions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture_land_use |> \n  st_drop_geometry() |> \n  count(LANDUSEDESC, sort = TRUE) |> \n  reactable::reactable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-84f77e23cda23c568874\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-84f77e23cda23c568874\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"LANDUSEDESC\":[\"Open Space\",\"Low-Density Commercial\",\"Medium-Density Residential\",\"Low-Density Residential\",\"Mixed-Use\",\"Single-Family Residential\",\"High-Density Residential\",\"Community Facilities\",\"Industrial\",\"Office/Institutional\",\"Mixed-Use Medium-Density\",\"Mixed-Use Low-Density\",\"Mixed-Use High-Density\",\"High-Density Commercial\",\"Very High-Density Residential\",\"Mixed Use-High Density\",\"Transportation/Communications/Utilities\",\"Mixed Use-Low Density\",\"Office/Institutional/Residential\",\"Private Open Space\",\"High-Density Mixed-Use\",\"Mixed Use-Medium Density\",\"Business Park\",\"Industrial-Mixed Use\",null],\"n\":[385,275,266,179,137,115,112,89,81,50,34,33,23,22,22,8,7,6,4,4,3,2,1,1,1]},\"columns\":[{\"accessor\":\"LANDUSEDESC\",\"name\":\"LANDUSEDESC\",\"type\":\"character\"},{\"accessor\":\"n\",\"name\":\"n\",\"type\":\"numeric\"}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"dataKey\":\"4a1d8d25069ae7bd8fdfc3bff4613cb0\",\"key\":\"4a1d8d25069ae7bd8fdfc3bff4613cb0\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nTo see a disgusting map with a bad legend run the following. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture_land_use |> \n  ggplot(aes(fill = LANDUSEDESC)) +\n  geom_sf(lwd = 0.15, color = \"black\")\n```\n:::\n\n\nWe can see that there are a bunch of different descriptions for different types of mixed use zoning. Let's filter down to descriptions that have `\"Mixed-Use\"` or `\"Mixed Use\"` and visualize them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how much area of mixed use land use?\nmixed_use <- future_land_use |> \n  filter(grepl(\"Mixed-Use|Mixed Use\" , LANDUSEDESC)) \n\nggplot() +\n  geom_sf(data = mixed_use, fill = \"blue\", color = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Making a fishnet grid\n\nHaving made a fishnet grid quite a few times, I've got this handy function. In essence we create a grid over our target geometry and we keep only those locations from the grid that intersect eachother. If we dont', we have a square shaped grid. \n\nIt is important that you create an ID for the grid, otherwise when we intersect later you'll not know what is being intersected.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_fishnet <- function(geometry, n = 10, hex = TRUE) {\n  g <- st_make_grid(geometry, square = !hex, n = n)\n  g[lengths(st_intersects(g, geometry)) != 0] \n}\n\n\ngrd <- make_fishnet(future_land_use, n = 40) |> \n  st_as_sf() |> \n  mutate(hex_id = row_number())\n\nplot(grd)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nMan, I love maps of sequential IDs.\n\nNext, we split our mixed use polygons based on the hexagons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how much area in each hexagon\nlu_intersects <- st_intersection(mixed_use, grd)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n```\n:::\n:::\n\n\nThen we calculate the area of each resultant shape.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlap_area <- lu_intersects |> \n  mutate(area = st_area(geometry)) \n\nplot(overlap_area[, \"area\"])\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nThe next step here is to take the split polygons, and join the data back to the hexagons. I use a right join because they don't get enough love. And also because if you try to do a join with two sf objects they'll scream!!.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join it back to the grid\nhex_area_overlap <- st_drop_geometry(overlap_area) |> \n  select(hex_id, area) |> \n  right_join(grd, by = \"hex_id\") |> \n  st_as_sf() \n\nhex_area_overlap\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1381 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -84.55738 ymin: 33.64417 xmax: -84.28635 ymax: 33.88926\nGeodetic CRS:  WGS 84\n# A tibble: 1,381 × 3\n   hex_id    area                                                              x\n    <int>   [m^2]                                                  <POLYGON [°]>\n 1     72 160485. ((-84.5182 33.65548, -84.52146 33.65737, -84.52146 33.66114, …\n 2     84  44538. ((-84.51493 33.64983, -84.5182 33.65171, -84.5182 33.65548, -…\n 3     85 176134. ((-84.51493 33.66114, -84.5182 33.66302, -84.5182 33.66679, -…\n 4     87   5049. ((-84.51493 33.68376, -84.5182 33.68565, -84.5182 33.68942, -…\n 5     97 380145. ((-84.51167 33.65548, -84.51493 33.65737, -84.51493 33.66114,…\n 6    100 110821. ((-84.51167 33.68942, -84.51493 33.6913, -84.51493 33.69507, …\n 7    106   8232. ((-84.51167 33.75729, -84.51493 33.75917, -84.51493 33.76294,…\n 8    110 109249. ((-84.5084 33.64983, -84.51167 33.65171, -84.51167 33.65548, …\n 9    111 150687. ((-84.5084 33.66114, -84.51167 33.66302, -84.51167 33.66679, …\n10    113 141654. ((-84.5084 33.68376, -84.51167 33.68565, -84.51167 33.68942, …\n# … with 1,371 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nNow plot it! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hex_area_overlap, aes(fill = as.numeric(area))) +\n  geom_sf(color = \"black\", lwd = 0.15) +\n  theme_void() +\n  scale_fill_viridis_c(\n    option = \"plasma\", \n    na.value = NA,\n    labels = scales::comma\n    ) +\n  labs(fill = \"Area of mixed-use zoning (m)\")\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/reactable-binding-0.2.3/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}