{
  "hash": "fbe5147cef01999216d3b8923ebef6dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Evaluate strings as code \ndate: \"2024-06-13\"\ncategories: [r]\n---\n\n\nPrompted by a post on Mastodon, I wanted to explore how to evaluate an R string as code.\n\n<iframe src=\"https://mastodon.cloud/@nxskok/112610810465402574/embed\" width=\"400\" allowfullscreen=\"allowfullscreen\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms\"></iframe>\n\nThis is generally a pretty common pattern that I have myself encountered in the past and had to work through a solution for—many times. \n\n## The Problem\n\nHow can I programatically create and execute valid R code? \n\n## A solution\n\nIn this case, the problem space is quite simple: \n\n1. given a package name and \n2. a dataset name\n3. extract the dataset as an object\n\nYou can typically extract datasets from a package's namespace. This looks like `{pkgname}::{dataset}`. \n\nWe can create this string simply like so: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npkg <- \"dplyr\"\ndataset <- \"starwars\"\ndataset_str <- paste0(pkg, \"::\", dataset)\n```\n:::\n\n\n### Evaluating R code \n\nThen, we need to be able to evaluate this code. I find [`{rlang}`](https://rlang.r-lib.org/reference/) to be very handy. \n\nTo convert a string into an expression, use `rlang::parse_expr()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rlang)\nto_eval <- parse_expr(dataset_str)\nto_eval\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndplyr::starwars\n```\n\n\n:::\n:::\n\n\nThis creates a `language` type object. \n\nWe can now pass this into `rlang::eval_bare()` to evaluate the string and run the R code and store the result into an R object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- rlang::eval_bare(to_eval)\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\n## Alternative solution\n\nHere is an alternative solution which uses the `data()` function. Then, assuming the name of the dataset is created in the environment, fetches it using `get()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglue(\"data({dataset}, package = '{pkg}')\") |>\n  parse_expr() |>\n  eval_bare()\n\nres <- get(dataset)\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nThere are issues with this in that you can also end up overwriting things. We can create a new environment if we'd like as well. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a custom environment to store stuff\nmy_env <- rlang::env()\n\nenglue(\"data({dataset}, package = '{pkg}')\") |>\n  parse_expr() |>\n  eval_bare(my_env)\n\n# get it from the environment\nres <- get(dataset, envir = my_env)\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}