{
  "hash": "db43303cc9addfebbf1d90dc16e2a40f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spatial ML: Predicting on out-of-sample data\"\nsubtitle: \"3 approaches to using spatially derived features\"\ndate: \"2024-05-23\"\ncode-fold: true\ncategories: [spatial, ml]\nfreeze: true\n---\n\n\nThe incorporation of spatially dependent variables in a machine learning model can greatly improve the model's performance. These features can include, but not limited to: \n\n- the spatial lag (neighborhood average) of a variable\n- counts of neighboring features \n- most common category nearby\n- spatial embedding via principle coordinate analysis\n\n## Deriving spatial features \n\nThese kinds of spatial variables are dependent upon the features nearby them. To calculate these variable one needs to have a concept of a neighborhood. \n\n> N.B. These neighborhoods are typically found using spatial indices such as R* trees for polygons and lines and KD-trees for point features. These spatial indices make it fast to look up nearby features.\n\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(spdep)\nlibrary(sfdep)\nlibrary(spatialreg)\nlibrary(ggplot2)\nnb <- st_contiguity(guerry)\ngeoms <- guerry$geometry\npnts <- st_centroid(geoms)\nedges <- st_as_edges(guerry$geometry, nb, st_weights(nb))\n\nplot(geoms[c(1, nb[[1]])], main = \"A polygon's neighborhood\")\nplot(edges[edges$from == 1, \"geometry\"], add = TRUE, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](2024-05-23-spatial-ml-prediction_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nwt <- st_kernel_weights(nb, pnts, \"gaussian\")\nlistw <- nb2listw(nb, wt, \"B\")\n\n# function to do PCOA\npcoa <- function(listw, n_comps) {\n  m <- scale(as(listw, \"CsparseMatrix\"), TRUE, FALSE)\n  irlba::prcomp_irlba(m, n_comps, center = TRUE, scale = TRUE)\n}\n\nplot_comp <- function(comp) {\n  ggplot() +\n    geom_sf(aes(fill = comp), geoms, color = \"black\", lwd = 0.15) +\n    theme_void() +\n    scale_fill_viridis_c(option = \"B\") +\n    theme(legend.position = \"none\")\n}\n\ncomps <- pcoa(listw, 5)\n\nplot_comp(comps$rotation[, 1]) + labs(title = \"A Spatial Component\")\n```\n\n::: {.cell-output-display}\n![](2024-05-23-spatial-ml-prediction_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\nGiven an arrangement of features we derive input features from them. For example we use the neighborhood based on contiguity to calculate spatial lags. Or, we use the neighborhoods to create a spatial weights matrix to use as input into a principle coordinate analysis (PCoA) to derive embeddings of spatial relationships. \n\n\n## The Problem\n\nAn issue arises when we want to use these models outside of the data that we used to train the model. \n\n**How do we incorporate space with out-of-sample data?**\n\nThere are three approaches we can take, I believe. \n\n1. Use the original spatial features to derive the spatial varaibles on the out of sample data.\n3. Grow the spatial index trees\n2. Calculate the spatial variables on the context of the new out-of-sample data. \n\nThere are issues with each of these approaches. \n\n## Using Original Spatial Features for test samples\n\nLet us take the example of the spatial lag. To calculate the spatial lag of a feature outside of our sample, we would need to _retain the existing R* and KD trees_. This could be memory intensive. The process would be somewhat like this: \n\n1. Identify the neighborhood of the new feature\n2. Calculate the spatial lag of the neighborhood in the context of the training dataset\n3. Use those variables for prediction \n\n### Use case: \n\nOne would use this approach when they believe that their training data has covered the complete spatial extent of what they intend to model. \n\n### Cons: \n\nThis would require storing the spatial indices that were used to create the variables along with the variables that are used. In the case of PCoA, you would need to maintain the loadings so that incoming data can be projected onto it. \n\n## Growing the Spatial Feature Space\n\nAnother example would be that for the _entire out-of-sample dataset_ we insert it into our spatial index then calculate the neighborhood for each feature. This means that each out-of-sample location can have a neighborhood that consists of features in the _original training dataset or the test set_. \n\n1. Insert out-of-sample features into spatial index\n2. Identify neighborhood of out-of-sample features\n3. Calculate spatial lag in the context of both training and testing dataset\n4. Use those newly calculated spatial variables in the prediction set. \n\n**Important**:\n\nFrom this, you can either, keep the newly inserted features in the spatial index so that they are available for later predictions or discard them after having identified your neigborhoods. If you choose the former, it makes the model mutable meaning that the spatial features generated from it would learn from each test set. \n\n## Use case: \n\nYou would use this approach when the original training data does not cover the complete spatial extent of what is intended to be modeled.\n\n## Cons\n\nThis would require storing the original spatial indicies and variables that were used to create the spatial variables. Additionally, this would require a _mutable spatial index_. In the case that the out-of-sample are not retained, the spatial index must be cloned which can be memory intensive depending on the size of it. \n\n## Deriving Spatial Variables from the test set\n\nThis last approach is the most straight forward. If there are spatial features that are needed for prediction, you generate them entirely from the test dataset. In the case of the spatial lag you would: \n\n1. Create a new spatial index for the test set\n2. Identify the neighborhood of each test feature in the test-set\n3. Calculate the spatial lag with these features\n4. Use those newly calculated spatial variables in the prediction set. \n\n## Use case: \n\nYou would use this approach when the model is intended to predict a specific phenomenon and is ambivalent to the spatial extent. The model is also intended to be predicted upon an entire target spatial extent. For example, the model is trained to detect housing prices in urban areas. The model might be trained on data in California but is intended to be used in urban areas in Ohio, Michigan, Massachusettes, etc. \n\n\n## Cons\n\nCalculating a spatial index can be time-consuming. It would require a test set that covers the entire spatial extent that is intended to be predicted upon. This would not be good for small batch or individual record prediction.\n\n\n",
    "supporting": [
      "2024-05-23-spatial-ml-prediction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}