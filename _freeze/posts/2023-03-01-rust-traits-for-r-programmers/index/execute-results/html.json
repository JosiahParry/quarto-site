{
  "hash": "5c3d1a4042af2c86963c5157874c1ce1",
  "result": {
    "markdown": "---\ntitle: \"Rust traits for R users\"\nsubtitle: \"and how they'll make your package better\"\ncategories: [rust, r, package-development, tutorial]\ndate: 2023-03-02\nimage: \"feRris.svg\"\n---\n\n\n\nIn the few months that I've been programming in Rust nothing has so fundamentally shifted the way that I think about programming—and specifically R packages—as Rust traits. I want to talk briefly about Rust traits and why I think they can make R packages better. \n\n\n:::{.aside}\n![](feRris.svg){height=150px}\n:::\n\nA trait defines a set of behaviors that can be used by objects of different kinds. Each trait is a collection of methods (functions) whose behavior is defined abstractly. The traits can then be `impl`emented _for_ different object types. Any object that implements the trait can then use that method. It's kind of confusing, isn't it? Let's work through [the example in The Book™](https://doc.rust-lang.org/book/ch10-02-traits.html) and how we can implement it in R. \n\n\n## Defining a Trait\n\nWe start by defining a trait called `Summary` which as a single method that returns a `String`. Note how the definition is rather abstract. We know what the function is and what it returns. What happens on the inside doesn't matter to use. \n\n```rust\ntrait Summary {\n    fn summarize(&self) -> String;\n}\n```\n\nAnalogous in R is the definition of an [S3 function generic](https://adv-r.hadley.nz/s3.html). \n\n:::{.aside} \nIt's only analogous if the trait implements only one method\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSummary <- function(x) UseMethod(\"Summary\")\n```\n:::\n\n\nThe S3 function generic is essentially saying that there is a new function called `Summary` and it will behave differently based on the class of object passed to it.\n\n:::{.aside}\nNote that we can't specify the output type so we may want to create a validator function later\n:::\n\nNow we want to define a struct called `NewsArticle` that contains 4 fields related to the news paper itself. \n\n```rust\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n```\n\nThis is similar to creating a new record in [`vctrs`](https://vctrs.r-lib.org/) which is rather similar to using base R.\n\n::: {.panel-tabset}\n\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstructure(\n  list(\n    headline = character(),\n    location = character(),\n    author = character(),\n    content = character()\n    ), \n  class = \"NewsArticle\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$headline\ncharacter(0)\n\n$location\ncharacter(0)\n\n$author\ncharacter(0)\n\n$content\ncharacter(0)\n\nattr(,\"class\")\n[1] \"NewsArticle\"\n```\n:::\n:::\n\n\n## `vctrs`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvctrs::new_rcrd(\n  list(\n    headline = character(),\n    location = character(),\n    author = character(),\n    content = character()\n    ), \n  class = \"NewsArticle\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<NewsArticle[0]>\n```\n:::\n:::\n\n:::\n\n\n## `impl`ementing a trait\n\nIt's important that we are able to summarise our newspaper article for the socials ofc—so we need to `impl`ement the `Summary` trait for the `NewsArticle` struct. \n\n```rust\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n```\n\n:::{.aside}\nNotice that the trait is called `Summary` whereas the method it provides is called `summarize()`. For the sake of example I'm going to call the R function `Summary()` throughout the rest of the example. It's not possible to have a perfect 1:1 relationship between Rust and R ;) \n:::\n\nThis block defines how the `summarize()` method will work for a `NewsArticle` struct. It will create a string in the format of `\"{title}, by {author} ({location})\"`. In R, we have to define the `NewsArticle` method for the `Summary` function which is done by creating a function object with the name signature `{Generic}.{class} <- function(...) { . . . }`.\n\n\n::: {.panel-tabset}\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSummary.NewsArticle <- function(x) {\n  sprintf(\n    \"%s, by %s (%s)\",\n    x[[\"headline\"]],\n    x[[\"author\"]],\n    x[[\"location\"]]\n  )\n}\n```\n:::\n\n\n## `vctrs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSummary.NewsArticle <- function(x) {\n  sprintf(\n    \"%s, by %s (%s)\",\n    vctrs::field(x, \"headline\"),\n    vctrs::field(x, \"author\"),\n    vctrs::field(x, \"location\")\n  )\n}\n```\n:::\n\n\n:::\n\n\nSince Musk's takeover of twitter, tweets are getting out of hand becoming ridiculously long so we need to be able to summarize them too! So if we define a `Tweet` struct and a corresponding implementation of `Summary` we'll be able to easily summarize them exactly the same way as news articles. \n\n\n```rust\n// define the struct\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\n// implement the trait\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\n\nCorrespondingly in R, we're going to be working with both Tweets and News Articles. So we need to define a tweet class to contain our tweets and a `Summary()` method for the new class. \n\n\n:::{.panel-tabset}\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstructure(\n  list(\n    username = character(),\n    content = character(),\n    reply = logical(),\n    retweet = logical()\n  ),\n  class = \"Tweet\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$username\ncharacter(0)\n\n$content\ncharacter(0)\n\n$reply\nlogical(0)\n\n$retweet\nlogical(0)\n\nattr(,\"class\")\n[1] \"Tweet\"\n```\n:::\n\n```{.r .cell-code}\nSummary.Tweet <- function(x) {\n  sprintf(\"%s: %s\", x[[\"username\"]], x[[\"content\"]])\n}\n```\n:::\n\n\n## vctrs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvctrs::new_rcrd(\n    list(\n    username = character(),\n    content = character(),\n    reply = character(),\n    retweet = logical()\n  ),\n  class = \"Tweet\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Tweet[0]>\n```\n:::\n\n```{.r .cell-code}\nSummary.Tweet <- function(x) {\n  sprintf(\n    \"%s: %s\", \n    vctrs::field(x, \"username\"), \n    vctrs::field(x, \"content\")\n    )\n}\n```\n:::\n\n\n:::\n\nWe can now define a function that utilizes this trait that will produce consistent `String` output in the same format for both tweets and new articles. \n\n```rust\npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis is huge from the R perspective because we can create a `notify()` function that calls `Summary()` and as long as a method if defined for the input class it will work! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnotify <- function(item) {\n  sprintf(\"Breaking news! %s\", Summary(item))\n}\n```\n:::\n\n\nTo test this out lets create a `Tweet` and a `NewsArticle`. First we'll create constructor functions for each. \n\n:::{.panel-tabset} \n\n## Base R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_article <- function(headline, location, author, content) {\n  structure(\n    list(\n      headline = headline,\n      location = location,\n      author = author,\n      content = content\n      ), \n    class = \"NewsArticle\"\n  )\n}\n\nnew_tweet <- function(username, content, reply, retweet) {\n  structure(\n    list(\n      username = username,\n      content = content,\n      reply = reply,\n      retweet = retweet\n    ),\n    class = \"Tweet\"\n  )\n}\n```\n:::\n\n\n\n\n## `vctrs`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_article <- function(headline, location, author, content) {\n  vctrs::new_rcrd(\n    list(\n      headline = headline,\n      location = location,\n      author = author,\n      content = content\n      ), \n    class = \"NewsArticle\"\n  )\n}\n\nnew_tweet <- function(username, content, reply, retweet) {\n  vctrs::new_rcrd(\n    list(\n      username = username,\n      content = content,\n      reply = reply,\n      retweet = retweet\n    ),\n    class = \"Tweet\"\n  )\n}\n```\n:::\n\n\n:::\n\n\nUsing the constructors we can create a tweet and a news article. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://www.theonion.com/new-absolut-ad-features-swaying-mom-with-one-eye-closed-1850138855\narticle <- new_article(\n  \"New Absolut Ad Features Swaying Mom With One Eye Closed Telling Camera She Used To Dance\",\n  \"Stockholm\",\n  \"The Onion\", \n  \"The ad concludes abruptly with the mother beginning to cry when, for no particular reason, she suddenly remembers the death of Princess Diana.\"\n)\n\n# https://twitter.com/TheOnion/status/1631104570041552896\ntweet <- new_tweet(\n  \"@TheOnion\",\n  \"Cat Internally Debates Whether Or Not To Rip Head Off Smaller Creature It Just Met https://bit.ly/3J1kNzV\",\n  FALSE,\n  FALSE\n)\n```\n:::\n\n\n\nWe can see how notify works for both of these. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnotify(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Breaking news! @TheOnion: Cat Internally Debates Whether Or Not To Rip Head Off Smaller Creature It Just Met https://bit.ly/3J1kNzV\"\n```\n:::\n\n```{.r .cell-code}\nnotify(article)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Breaking news! New Absolut Ad Features Swaying Mom With One Eye Closed Telling Camera She Used To Dance, by The Onion (Stockholm)\"\n```\n:::\n:::\n\n\n### what this means\n\nThis is awesome. This means that any object that we create in the future, as long as it implements the `Summary()` function for its class we can utilize the `notify()` function. This comes with a caveat, though—as all good things do. \n\nThe Rust compiler ensures that any object that implements the `Summary` trait returns a single string. R is far more laissez faire than Rust with classes and types. One could create a `Summary` method for an object that returns a vector of strings. That would break notify. Either `notify()` should have type checking or you should make sure that your method always produces the correct type. \n\n## Implications for R packages\n\nThis very simple concept can be transformative for the way that we build R packages. R packages are, for the most part, bespoke. Each one serves their own purpose and works only within its own types or types it's aware of. But what if an R package could work with _any_ object type? Using this idea we can get from Rust traits, we can do that. \n\nPackages that want to be extensible can make it easy to do so by doing two fairly simple things. Low-level and critical functions should be exported as generic functions. High level functions that perform some useful functionality should be built upon those generics. \n\nAn example is the [`sdf`](https://github.com/JosiahParry/sdf) package I've prototyped based on this idea. In this case, I have a spatial data frame class that can be implemented on any object that implements methods for the following functions: \n\n- `is_geometry()`\n- `bounding_box()`\n- `combine_geometry()`\n\n\n### An example\n\nThe `sdf` class is a `tibble` with a geometry column and a bounding box attribute. The function `as_sdf()` creates an `sdf` object that tells us what type of geometry is used and the bounding box of it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(sdf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'sdf'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:sf':\n\n    is_geometry\n```\n:::\n\n```{.r .cell-code}\n# get some sample data \ng <- sfdep::guerry[, \"region\"]\n\nas_sdf(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry Type: sfc_MULTIPOLYGON\nBounding box: xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\n# A tibble: 85 × 2\n   region                                                               geometry\n   <fct>                                                          <MULTIPOLYGON>\n 1 E      (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795, 80…\n 2 N      (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520, 72…\n 3 C      (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132, 71…\n 4 E      (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332, 87…\n 5 E      (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266, 88…\n 6 S      (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236, 74…\n 7 N      (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945, 81…\n 8 S      (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627, 50…\n 9 E      (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780, 77…\n10 S      (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424, 62…\n# … with 75 more rows\n```\n:::\n:::\n\n\nThis is super cool because we can group by and summarize the data just because we have those above functions defined for `sfc` objects (the geometry column).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nas_sdf(g) |> \n  group_by(region) |> \n  summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry Type: sfc_MULTIPOLYGON\nBounding box: xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\n# A tibble: 5 × 3\n  region     n                                                          geometry\n  <fct>  <int>                                                    <MULTIPOLYGON>\n1 C         17 (((710830 2137350, 711746 2136617, 712430 2135212, 712070 213413…\n2 E         17 (((801150 2092615, 800669 2093190, 800688 2095430, 800780 209579…\n3 N         17 (((729326 2521619, 729320 2521230, 729280 2518544, 728751 251752…\n4 S         17 (((747008 1925789, 746630 1925762, 745723 1925138, 744216 192523…\n5 W         17 (((456425 2120055, 456229 2120382, 455943 2121064, 456070 212219…\n```\n:::\n:::\n\n\nSay we want to create a custom `Point` class that we want to be usable by an `sdf` object. We can do this rather simply by creating the proper generics. A `Point` will be a list of length 2 numeric vectors where the first element is the x coordinate and the second element is the y coordinate. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create some points\npnt_data <- lapply(1:5, \\(x) runif(2, 0, 90))\n\n# create new vector class\npnts <- vctrs::new_vctr(pnt_data, class = \"Point\")\n\npnts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Point[5]>\n[1] 53.59747, 75.12560  25.34989, 51.07764  8.542277, 19.890635\n[4] 52.60644, 68.45127  16.40016, 75.16829 \n```\n:::\n:::\n\n\nNow we can start defining our methods. `is_geometry()` should always return TRUE for our type. We can do this like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_geometry.Point <- function(x) inherits(x, \"Point\")\n```\n:::\n\n\n:::{.aside}\nThis method will only be dispatched on `Point`s so it will always inherit the `Point` class. One could just as well always return `TRUE`\n:::\n\nNext we need to define a method for the bounding box. This is the the maximum and minimum x and y coordinates. Our method should iterate over each point and extract the x and y into their own vector and return the minimum and maxes. These need to be structured in a particular order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbounding_box.Point <- function(.x) {\n  x <- vapply(.x, `[`, numeric(1), 1)\n  y <- vapply(.x, `[`, numeric(1), 2)\n  \n  c(xmin = min(x), ymin = min(y), xmax = max(x), ymax = max(y))\n}\n```\n:::\n\n\nLastly, we need a way to combine the points together. In this case, we can just \"combine\" the points by finding the average point. This is not geometrically sound but for the sake of example it suffices. Note that the type it returns always has to be the same! There is not a compiler forcing us, so we must force ourselves! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine_geometry.Point <- function(.x) {\n  x <- vapply(.x, `[`, numeric(1), 1)\n  y <- vapply(.x, `[`, numeric(1), 2)\n  \n  vctrs::new_vctr(\n    list(c(mean(x), mean(y))), \n    class = \"Point\"\n    )\n}\n```\n:::\n\n\n\nWith only those 3 functions we've defined enough to create an `sdf` object where the geometry column is a `Point` vector. To illustrate this we can use the ggplot2 diamonds data set for example since it has nice x and y coordinates. \n\nFirst we create a data frame with a `Point` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(diamonds, package = \"ggplot2\")\n\ndiamond_pnts <- diamonds |> \n  mutate(\n    pnts = vctrs::new_vctr(\n      purrr::map2(x, y, `c`),\n      class = \"Point\"\n    )\n  ) |> \n  select(cut, pnts)\n\nhead(diamond_pnts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  cut             pnts\n  <ord>        <Point>\n1 Ideal     3.95, 3.98\n2 Premium   3.89, 3.84\n3 Good      4.05, 4.07\n4 Premium   4.20, 4.23\n5 Good      4.34, 4.35\n6 Very Good 3.94, 3.96\n```\n:::\n:::\n\n\nNext we cast it to an `sdf` object by using `as_sdf()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamond_sdf <- as_sdf(diamond_pnts) \ndiamond_sdf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry Type: Point\nBounding box: xmin: 0 ymin: 0 xmax: 10.74 ymax: 58.9\n# A tibble: 53,940 × 2\n   cut             pnts\n   <ord>        <Point>\n 1 Ideal     3.95, 3.98\n 2 Premium   3.89, 3.84\n 3 Good      4.05, 4.07\n 4 Premium   4.20, 4.23\n 5 Good      4.34, 4.35\n 6 Very Good 3.94, 3.96\n 7 Very Good 3.95, 3.98\n 8 Very Good 4.07, 4.11\n 9 Fair      3.87, 3.78\n10 Very Good 4.00, 4.05\n# … with 53,930 more rows\n```\n:::\n:::\n\n\nNotice that the printing method shows `Geometry Type: Point` and also has a `Bounding box:`. That means we have effectively extended the `sdf` class by implementing our own methods for the exported generic functions from `sdf`. From that alone the `sdf` methods for dplyr can be used. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamond_sdf |> \n  group_by(cut) |> \n  summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry Type: Point\nBounding box: xmin: 5.507 ymin: 5.52 xmax: 6.247 ymax: 6.183\n# A tibble: 5 × 3\n  cut           n               pnts\n  <ord>     <int>            <Point>\n1 Fair       1610 6.246894, 6.182652\n2 Good       4906 5.838785, 5.850744\n3 Very Good 12082 5.740696, 5.770026\n4 Premium   13791 5.973887, 5.944879\n5 Ideal     21551 5.507451, 5.520080\n```\n:::\n:::\n\n### Why this works\n\nThe dplyr `sdf` methods work like a charm because they use generic functions. Take the `summarise()` method for example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdf:::summarise.sdf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(.data, ...) {\n  geom_col_name <- attr(.data, \"geom_column\")\n  geom_col <- .data[[geom_col_name]]\n  gd <- group_data(.data)\n\n  summarized_geoms <- lapply(gd$.rows, function(ids) combine_geometry(geom_col[ids]))\n\n  res <- NextMethod()\n\n  res[[geom_col_name]] <- rlang::inject(c(!!!summarized_geoms))\n  as_sdf(res)\n\n}\n<bytecode: 0x1066d0b00>\n<environment: namespace:sdf>\n```\n:::\n:::\n\n\nThis method uses the `combine_geometry()` generic function. `combine_geometry()` takes a vector of geometries (as determined by `is_geometry()`) and returns a single element. The summarise method does not care which method is used. It only cares that the output is consistent—in this case that a scalar value is outputted and that multiple of those scalars can be combined using `c()`.\n\n\n### Another example \n\n[For a more detailed example check out the section in the README that implements an sdf class for geos geometry](https://github.com/JosiahParry/sdf#implementing-geos-generics). If you're interested in the details I recommend looking at the source code it is very simple. \n\nFirst look at the [generic method definitions](https://github.com/JosiahParry/sdf/blob/main/R/generics.R). Then look at the [`sf` compatibility methods](https://github.com/JosiahParry/sdf/blob/main/R/sf-compat.R).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}