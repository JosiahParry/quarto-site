{
  "hash": "2060de87f4d6a3866cf9b2f7de570476",
  "result": {
    "markdown": "---\ntitle: \"spacetime representations aren't good—yet\"\ndate: '2022-11-07'\ncategories: [sfdep, rstats, spacetime]\ntags: []\n---\n\n\n\nMy beliefs can be summarized somewhat succinctly. \n\nWe should not limit space-time data to dates or timestamps. \n\nThe R ecosystem should always utilize a normalized approach as described above. Further, a representation should use friendly R objects. The friendliest object is a data frame. A new representation should allow context switching between geometries and temporal data. That new representation should always use time-long formats and the geometries should _never_ be repeated. \n\nA spacetime representation should give users complete and total freedom to manipulate their data as they see fit (e.g. dplyr or data.table operations).\n\nThe only time to be strict in the format of spacetime data is when statstics are going to be derived from the data.\n\n## Background\n\nWhile implementing emerging hotspot analysis in `sfdep` I encountered the need for a formalized spacetime class in R. As my focus in sfdep has been tidyverse-centric functionality, I desired a \"tidy\" data frame that could be used as a spacetime representation. Moreover, space (in the spacetime representation) should be represented as an sf or sfc object. In sfdep I introduced the new S3 class `spacetime` based on Edzer Pebesma's 2012 article [\"spacetime: Spatio-Temporal Data in R\"](https://www.jstatsoft.org/article/view/v051i07) and Thomas Lin Pederson's [tidygraph package](https://ggraph.data-imaginist.com/articles/tidygraph.html).\n\n## Representations of Spatial Data\n\nBefore describing my preferences in a spacetime representation in R, I want to review possible representations of spacetime data. \n\nPebesma (2012) outlines three tabular representations of spatio-temporal data. \n\n- \"**Time-wide**: Where different columns reflect different moments in time.\n- **Space-wide**: Where different columns reflect different measurement locations or areas.\n- **Long formats**: Where each record reflects a single time and space combination.\n\nThe \"long format\" is what we may consider \"tidy\" per [Wickham (2014)](https://www.jstatsoft.org/article/view/v059i10). In this case, both time and space are variables with unique combinations as rows. \n\nPebesma further qualifies spatial data representation into a \"sparse grid\" and a \"full grid.\" Say we have a variable X. In a spatio temporal full grid we will store all combinations of time (t) and locations (i) . If Xi is missing at any of those location and time combinations (Xit is missing), the value of X is recorded as a missing value. Whereas in a sparse grid, if there is any missing data, the observation is omitted. Necessarily, in a full grid there will be i x t number of rows. In a sparse grid there will be fewer than i x t rows. \n\nVery recently in an r-spatial [blog post, \"Vector Data Cubes\"](https://r-spatial.org/r/2022/09/12/vdc.html#multiple-long-table-forms-database-normalization), Edzer describes another approach to representing spacetime using a database normalization approach. Database normalization is a process that reduces redundancy by creating a number of smaller tables containing IDs and values. These tables can then be joined only when needed. When we consider spacetime data, we have repeating geometries across time. It is inefficient to to keep multiple copies of the geometry. Instead, we can keep track of the unique ID of a geometry and store the geometry in another table. \n\n## sfdep spacetime representation\n\nThe spacetime class in [sfdep](https://sfdep.josiahparry.com) is in essence a database normalization approach (see above blog post). It is implemented with the database normalization approach and the ergonomics of [tidygraph](https://tidygraph.data-imaginist.com/) in mind. \n\nThe objective of the spacetime class in sfdep is to \n\n- allow complete freedom of data manipulation via data.frame objects,\n- prevent duplication of geometries,\n- and provide leeway in what \"time\" can be defined as.\n\nSimilar to tidygraph, `spacetime` provides access to two contexts: data and geometry. The data context is a data frame and the geometry context. These are linked based on a unqie identifie that is present in both contexts.\n\n<details>\n  <summary> _R code_ </summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ntimes <- seq(\n  Sys.time(), \n  Sys.time() + lubridate::hours(5),\n  length.out = 5\n)\n\nlocations <- c(\"001\", \"002\")\n\ndata_context <- tidyr::crossing(\n  location = locations,\n  time = times\n) |> \n  mutate(value = rnorm(n())) |> \n  arrange(location)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.1, GDAL 3.2.3, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\ngeometry_context <- st_sfc(\n  list(st_point(c(0, 1)), st_point(c(1, 1)))\n  ) |> \n  st_as_sf() |> \n  mutate(location = c(\"001\", \"002\"))\n```\n:::\n\n\nUse the spacetime constructor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sfdep)\nspt <- spacetime(\n  .data = data_context,\n  .geometry = geometry_context, \n  .loc_col = \"location\", \n  .time_col = \"time\"\n)\n```\n:::\n\n\n\nSwap contexts with activate\n\n\n\n```{.r .cell-code}\nactivate(spt, \"geometry\")\n```\n\n```\nspacetime ────\n```\n\n```\nContext:`geometry`\n```\n\n```\n2 locations `location`\n```\n\n```\n5 time periods `time`\n```\n\n```\n── geometry context ────────────────────────────────────────────────────────────\n```\n\nSimple feature collection with 2 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 0 ymin: 1 xmax: 1 ymax: 1\nCRS:           NA\n            x location\n1 POINT (0 1)      001\n2 POINT (1 1)      002\n\n\n</details> \n\n\nOne of my very strong beliefs is that temporal data does not, and should not, always be represented as a date or a timestamp. This paradigm is too limiting. What about panel data where you're measuring cohorts along periods 1 - 10? Should these be represented as dates? No, definitely not. Because of this, sfdep allows you to utilize any numeric column that can be sorted. \n\n> _Perhaps I've just spent too much time listening to ecometricians..._\n\n<details> \n  <summary> _example of using integers_ </summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspacetime(\n  mutate(data_context, period = row_number()),\n  geometry_context, \n  .loc_col = \"location\",\n  .time_col = \"period\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nspacetime ────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nContext:`data`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n2 locations `location`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n10 time periods `period`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── data context ────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n   location time                 value period\n * <chr>    <dttm>               <dbl>  <int>\n 1 001      2022-11-15 08:23:08 -0.206      1\n 2 001      2022-11-15 09:38:08 -0.289      2\n 3 001      2022-11-15 10:53:08 -0.275      3\n 4 001      2022-11-15 12:08:08  0.136      4\n 5 001      2022-11-15 13:23:08 -1.48       5\n 6 002      2022-11-15 08:23:08  1.01       6\n 7 002      2022-11-15 09:38:08  2.11       7\n 8 002      2022-11-15 10:53:08 -1.68       8\n 9 002      2022-11-15 12:08:08  0.880      9\n10 002      2022-11-15 13:23:08  0.698     10\n```\n:::\n:::\n\n</details>\n\n\n\n## Qualifiers \n\nI don't think my spacetime class is the panacea. I don't have the technical chops to make a great data format. I also don't want to have that burden. Additionally, the class is desgned with lattice data in mind. I don't think it is sufficient for trajectories or point pattern without repeating locations.\n\nThere's a new R package called `cubble` for spatio-temporal data. I've not explored it. It may be better suited to your tidy-centric spatio-temporal data. \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}