{
  "hash": "cd46f715dcecf42d34afca5202d4135a",
  "result": {
    "markdown": "---\ntitle: \"Raw strings in R\"\ndate: 2023-01-19\ncategories: [r]\n---\n\n\nThe one thing about Python I actually really like is the ability to use raw strings. Raw strings are super helpful for me because at work I use a windows machine. And windows machines use a silly file path convention. The `\\` back slack character is used as the file separator as opposed to the linux / unix `/` forward slash. \n\nUsing the backslash is so annoying because it's also an escape character. In python I can write the following to hard code a file path.\n\n```python\nfile_path = r\"nav\\to\\file\\path.ext\"\n```\n\nWhereas in R typically you would have to write:\n\n```r\nfile_path <- \"nav\\\\to\\\\file\\\\path.ext\"\n```\n\nSince `\\` is an escape character you have to escape it first using itself. So, its annoying. And `file.path(\"nav\", \"to\", \"file\", \"path.ext\", fsep = \"\\\\\")` is a wee bit cumbersome sometimes.\n\n# WELL APPARENTLY WE HAVE ALL BEEN SLEEPING ON RAW STRINGS IN R SINCE VERSION 4.0. \n\n# IT's VERSION 4.2.2\n\n\n![Damnit.](https://media.giphy.com/media/3o7TKA3ypeMbOXSrp6/giphy.gif)\n\n## Aight.\n\nSo like, you can use raw strings today.\n\n[How can I get the R-devel news? I'm on the mailing list and get it once a week and it's like \"Re: memory leak in png() ` not this stuff. Tips?]{.aside}\n\n\nIt was announced in the [news for version 4.0.0 ](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html).\n\nThey write: \n\n> There is a new syntax for specifying raw character constants similar to the one used in C++: r\"(...)\" with ... any character sequence not containing the sequence ‘⁠)\"⁠’. This makes it easier to write strings that contain backslashes or both single and double quotes. For more details see ?Quotes.\n\n\nYou can write raw strings using the following formats:\n\n- `r\"( ... )\"`\n- `r\"{ ... }\"`\n- `r\"[ ... ]\"`\n- `R\"( ... )\"`\n- `R\"{ ... }\"`\n- `R\"[ ... ]\"`\n\nYou can even trickier by adding dashes between the quote and the delimter. The dashes need to be symmetrical though. So the following is also valid.\n\n\n- `r\"-{ ... }\"-`\n- `r\"--{ ... }--\"`\n- `r\"--{ * _ * }--\"`\n\n[It kinda looks like a crab]{.aside}\n\n\nAlright so back to the example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n r\"{nav\\to\\file\\path.ext}\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"nav\\\\to\\\\file\\\\path.ext\"\n```\n:::\n:::\n\nHot damn. Thats nice. \n\nI freaked out at first though because R prints two backslashes. But if you cat the result they go away. So do not worry. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n r\"{nav\\to\\file\\path.ext}\" |> \n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnav\\to\\file\\path.ext\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}