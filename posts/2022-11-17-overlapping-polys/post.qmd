---
title: Fishnets and overlapping polygons
categories: [r, spatial, tutorial]
---

Today a question was asked in the geocompr discord. I wanted to share part of the solution as I think it covers 2 helpful things:

- making a fishnet grid
- calculating the area of overlap between two polygons

For this example I'm using data from the [Atlanta GIS Open Data Portal](http://gis.atlantaga.gov/?page=OPEN-DATA-HUB). Specifically using the [future land use polygons](https://dpcd-coaplangis.opendata.arcgis.com/maps/future-land-use-).

I've downloaded a local copy of the data as a geojson. But you can read it using the ArcGIS Feature Server it is hosted on.


### Objective

Create a map of Atlanta, visualized as a hexagon grid, that displays the amount of planned mixed use zoning. This will be done in the following sequence:

1. Creating a fishnet (hexagon) grid over the city
2. Creating intersected polygons 
3. Calculate the area of intersected polygons
4. Join back to the original fishnet grid
5. visualized. 

### Mixed-use zoning 


Start by loading sf, dplyr, and ggplot2. sf for our spatial work, dplyr for making our lives easier, and ggplot2 for a bad map later.

```{r, message = FALSE}
library(sf)
library(dplyr)
library(ggplot2)
```


We read in our data (mine is local). You can use the commented out code to read directly from the ArcGIS feature server. 

```{r}

# read from the ArcGIS feature server
# st_read("https://services5.arcgis.com/5RxyIIJ9boPdptdo/arcgis/rest/services/Land_Use_Future/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")

future_land_use <- read_sf("Future_Land_Use_.geojson") |> 
  mutate(geometry = st_make_valid(geometry))
```

Let's look at the different land use descriptions.

```{r}
future_land_use |> 
  st_drop_geometry() |> 
  count(LANDUSEDESC, sort = TRUE) |> 
  reactable::reactable()
```

To see a disgusting map with a bad legend run the following. 

```{r, eval = FALSE}
future_land_use |> 
  ggplot(aes(fill = LANDUSEDESC)) +
  geom_sf(lwd = 0.15, color = "black")
```

We can see that there are a bunch of different descriptions for different types of mixed use zoning. Let's filter down to descriptions that have `"Mixed-Use"` or `"Mixed Use"` and visualize them.

```{r}
# how much area of mixed use land use?
mixed_use <- future_land_use |> 
  filter(grepl("Mixed-Use|Mixed Use" , LANDUSEDESC)) 

ggplot() +
  geom_sf(data = mixed_use, fill = "blue", color = NA) +
  theme_void()
```


### Making a fishnet grid

Having made a fishnet grid quite a few times, I've got this handy function. In essence we create a grid over our target geometry and we keep only those locations from the grid that intersect eachother. If we dont', we have a square shaped grid. 

It is important that you create an ID for the grid, otherwise when we intersect later you'll not know what is being intersected.  

```{r}
make_fishnet <- function(geometry, n = 10, hex = TRUE) {
  g <- st_make_grid(geometry, square = !hex, n = n)
  g[lengths(st_intersects(g, geometry)) != 0] 
}


grd <- make_fishnet(future_land_use, n = 40) |> 
  st_as_sf() |> 
  mutate(hex_id = row_number())

plot(grd)
```
Man, I love maps of sequential IDs.

Next, we split our mixed use polygons based on the hexagons.

```{r}
# how much area in each hexagon
lu_intersects <- st_intersection(mixed_use, grd)
```

Then we calculate the area of each resultant shape.

```{r}
overlap_area <- lu_intersects |> 
  mutate(area = st_area(geometry)) 

plot(overlap_area[, "area"])
```

The next step here is to take the split polygons, and join the data back to the hexagons. I use a right join because they don't get enough love. And also because if you try to do a join with two sf objects they'll scream!!.


```{r}
# join it back to the grid
hex_area_overlap <- st_drop_geometry(overlap_area) |> 
  select(hex_id, area) |> 
  right_join(grd, by = "hex_id") |> 
  st_as_sf() 

hex_area_overlap
```

Now plot it! 


```{r}
ggplot(hex_area_overlap, aes(fill = as.numeric(area))) +
  geom_sf(color = "black", lwd = 0.15) +
  theme_void() +
  scale_fill_viridis_c(
    option = "plasma", 
    na.value = NA,
    labels = scales::comma
    ) +
  labs(fill = "Area of mixed-use zoning (m)")

```


