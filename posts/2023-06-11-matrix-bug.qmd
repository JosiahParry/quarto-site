---
title: "What's so special about `array`s?"
date: 2023-06-11
categories: [r]
---

I'm working on a new video about S3 objects in R and class inheritance / hierarchy. One of my favorite functions for exploring objecs and their structure is `unclass()`.

The documentation states  

> `unclass` returns (a copy of) its argument with its class attribute removed. (It is not allowed for objects which cannot be copied, namely environments and external pointers.)

::: {.aside}
see `?unclass` and review `Details`
:::

So, `unclass()` _should_ remove the class of any and all objects. For the sake clarity of this post I'm going to make a helper function.

```{r}
class_unclass <- function(x) class(unclass(x))
```


This works for `factor`s which are just integer vectors which have the attribute `levels`

```{r}
class_unclass(factor())
```

and `data.frame`s are lists (also technically a vector just not atomic but instead recursive) with attributes `row.names`, and `names`.

```{r}
class_unclass(data.frame())
```

But when we get down to `matrix` another poser type (just like data.frame and factor pretending to be something they're not actually), we get something different. 

```{r}
class_unclass(matrix())
```

Well, why the heck is that? What about it makes it so special? Let's explore this a bit more. 

The two things that make a matrix are the classes `c("matrix", "array")` and the `dim` attribute which specifies the dimensions. Matrixes are two dimensional arrays, by the way! 

```{r}
attributes(matrix())
```

What is weird is that you can make a matrix just by adding the `dim` attribute to a vector.

```{r}
m <- structure(integer(1), dim = c(1, 1))
class_unclass(m)
```

We didn't even specify the class. Why does this happen?

And when we remove the dim attribute....

```{r}
attr(m, "dim") <- NULL
class_unclass(m)
```

we get an integer vector. This differs from the behavior of other similar types. Recall that factors are `integer` vectors with an attribute of `levels` that is a character vector. 

So let's try something here. Let's create a factor from scratch. 

```{r}
structure(integer(), levels = character(), class = "factor")
```

Now, if the behavior is similar to `matrix` or `array` we would expect that by omitting the `class` attribute R should reconstruct it.

```{r}
structure(integer(), levels = character())
```

Nope! Would you look at that! 

[**@yjunechoe**](https://github.com/yjunechoe) pointed me to some excerpts from [Deep R Programming](https://deepr.gagolewski.com/), a book I wish I had read yesterday. It refers to these attributes as "_special attributes_". The author, [Marek Gagolewski](https://www.gagolewski.com/) (author of [`stringi`](https://stringi.gagolewski.com/), by the way), makes note of this special behavior of matrix but leaves it at that. 

To me, this is a fundamental inconsistency in the language. Either all poser types (data.frame, matrix, factor, etc) should be automatically created if their special attributes are set on the appropriate type or not at all. What justification is there for _only_ `matrix` having a special behavior in `unclass()`? 

To me, this warrants a bug report for `unclass()`. Based on the documentation, `unclass()` should _always_ remove the class attribute from an object but it fails to do so for `arrays` and `matrix`es. 



