<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Josiah Parry</title>
<link>https://josiahparry.com/index.html#category=r</link>
<atom:link href="https://josiahparry.com/index-r.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Sat, 28 Oct 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Export Python functions in R packages</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-10-28-python-fns/index.html</link>
  <description><![CDATA[ <p>I was asked a really interesting question by <a href="https://github.com/benyamindsmith"><span class="citation" data-cites="benyamindsmith">@benyamindsmith</span></a> yesterday. The question was essentially:</p>
<blockquote class="blockquote">
<p><em>How can one export a python üêç function in an R package üì¶?</em></p>
</blockquote>
<p>I proposed my solution as a very minimal R package called <a href="https://github.com/JosiahParry/pyfns"><code>{pyfns}</code></a>.</p>
<p>It is an R package with one function: <code>hello_world()</code>.</p>
<section id="how-it-works" class="level2"><h2 class="anchored" data-anchor-id="how-it-works">How it works</h2>
<p>The process is <em>fairly</em> simple.</p>
<ul>
<li>We create an environment inside of our package</li>
<li>On package start-up we source python scripts using <code><a href="https://rstudio.github.io/reticulate/reference/source_python.html">reticulate::source_python()</a></code> into the new environment</li>
<li>We create R wrapper functions that call the reticulated function.</li>
</ul>
<p>Example usage:</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">pyfns</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;">hello_world</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Helloooo world"</code></pre>
</div>
</div>
</section><section id="storing-python-scripts" class="level2"><h2 class="anchored" data-anchor-id="storing-python-scripts">Storing Python Scripts</h2>
<p>Store python scripts inside of <code>inst/</code>. These files can be read using <code><a href="https://rdrr.io/r/base/system.file.html">system.file()</a></code>. In this example <code>inst/helloworld.py</code> contains</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> hello_world():</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Helloooo world"</span></span></code></pre></div>
</section><section id="creating-an-environment" class="level2"><h2 class="anchored" data-anchor-id="creating-an-environment">Creating an environment</h2>
<p>Before we can source python scripts, we must create an environment to soure them into. This is done in <code>R/env.R</code> like so</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">pyfn_env</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rlang</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rlang.r-lib.org/reference/env.html">env</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</section><section id="sourcing-scripts" class="level2"><h2 class="anchored" data-anchor-id="sourcing-scripts">Sourcing scripts</h2>
<p>Scripts are sourced in <code>R/zzz.R</code> in which there is an <code>.onLoad()</code> function call. This gets called only once when the package is loaded.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">.onLoad</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">libname</span>, <span class="va" style="color: #111111;">pkgname</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;">reticulate</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rstudio.github.io/reticulate/reference/source_python.html">source_python</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/system.file.html">system.file</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"helloworld.py"</span>, package <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"pyfns"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    envir <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">pyfn_env</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>In this chunk we use <code><a href="https://rstudio.github.io/reticulate/reference/source_python.html">reticulate::source_python()</a></code> to bring the python function into scope. The function needs a path to the python script that we want to source. This is where <code><a href="https://rdrr.io/r/base/system.file.html">system.file()</a></code> comes into play. It can access files stored in <code>inst</code>. <em>Note that it does not include <code>inst</code></em>. And most importantly we set <code>envir = pyfn_env</code> which is the environment we created in <code>R/env.R</code></p>
</section><section id="wrapper-functions" class="level2"><h2 class="anchored" data-anchor-id="wrapper-functions">Wrapper functions</h2>
<p>Since the functions are being sourced into <code>pyfn_env</code> they can be called from the environment directly. In <code>R/env.R</code>, the R function <code>hello_world()</code> is just calling the <code>hello_world()</code> python function from the <code>pyfn_env</code>. If there were arguments we can pass them in using <code>...</code> in the outer function or recreating the same function arguments.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;">#'@export</span></span>
<span><span class="va" style="color: #111111;">hello_world</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">pyfn_env</span><span class="op" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">hello_world</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>


</section> ]]></description>
  <category>r</category>
  <category>python</category>
  <category>package-dev</category>
  <guid>https://josiahparry.com/posts/2023-10-28-python-fns/index.html</guid>
  <pubDate>Sat, 28 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Where am I in the sky?</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-10-28/index.html</link>
  <description><![CDATA[ <p>When I was flying back from the Spatial Data Science Across Langauge event from Frankfurt to Atlanta the plane I was bored beyond measure. The plane had no wifi to connect to. I had already watched a movie and couldn‚Äôt be bothered by a podcast. I wanted to know where I was.</p>
<p>When looking at the onboard ‚ÄúAbout this flight‚Äù information, they didn‚Äôt show a map even. The gave us our coordinates in degrees and minutes. Helpful right?</p>
<p>Well, in an attempt to figure out where the hell I was I wrote some code. Here it is.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://r-spatial.github.io/sf/">sf</a></span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://r-quantities.github.io/units/">units</a></span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>udunits database from /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/units/share/udunits/udunits2.xml</code></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;">#' Given degrees and minutes calculate the coordinate</span></span>
<span><span class="co" style="color: #5E5E5E;">#' in degrees</span></span>
<span><span class="va" style="color: #111111;">as_degree</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">degrees</span>, <span class="va" style="color: #111111;">minutes</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">d</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-quantities.github.io/units/reference/units.html">set_units</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">degrees</span>, <span class="st" style="color: #20794D;">"arc_degrees"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="va" style="color: #111111;">m</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-quantities.github.io/units/reference/units.html">set_units</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">minutes</span>, <span class="st" style="color: #20794D;">"arc_minutes"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://r-quantities.github.io/units/reference/units.html">set_units</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"arc_degrees"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="va" style="color: #111111;">d</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">m</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># get the country shapes</span></span>
<span><span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnaturalearthdata</span><span class="fu" style="color: #4758AB;">::</span><span class="va" style="color: #111111;"><a href="https://rdrr.io/pkg/rnaturalearthdata/man/countries.html">countries50</a></span> <span class="op" style="color: #5E5E5E;">|&gt;</span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sf.html">st_as_sf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># filter to North America</span></span>
<span><span class="va" style="color: #111111;">usa</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;">dplyr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">continent</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"North America"</span>, </span>
<span>                <span class="va" style="color: #111111;">subregion</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Northern America"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_geometry.html">st_geometry</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># Create a bounding box to crop myself to </span></span>
<span><span class="va" style="color: #111111;">crp</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_bbox.html">st_bbox</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span>xmin <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">128</span>, xmax <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0</span>, ymin <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">18</span>, ymax <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">61</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># plot N. America</span></span>
<span><span class="va" style="color: #111111;">usa</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_cast.html">st_cast</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"POLYGON"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sf.html">st_as_sf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_join.html">st_filter</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sfc.html">st_as_sfc</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">crp</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>      <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sf.html">st_as_sf</a></span><span class="op" style="color: #5E5E5E;">(</span>crs <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_crs.html">st_crs</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">usa</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># add planes location.</span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st.html">st_point</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">as_degree</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">61</span>, <span class="fl" style="color: #AD0000;">19</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fu" style="color: #4758AB;">as_degree</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">57</span>, <span class="fl" style="color: #AD0000;">46</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  add <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span>  col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"red"</span>,</span>
<span>  pch <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">16</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2023-10-28/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>



 ]]></description>
  <category>r</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2023-10-28/index.html</guid>
  <pubDate>Sat, 28 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Spatial Data Science Across Languages</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-09-20-sdsl/index.html</link>
  <description><![CDATA[ 



<p>I feel very fortunate to have been invited to the first Spatial Data Science Across Languages (SDSL) workshop at the University of M√ºnster. I am even more fortunate that I have an employer who sees the value in an event such as this and be my patron for it.</p>
<p>The event brought together package maintainers from Julia, Python, and R languages to just <em>discuss</em>. The event was loosely framed around a few broad discussion topics that were varied and drifted.</p>
<p>In general, the theme of the workshop was ‚Äústandards.‚Äù We need standards be able to ensure cohesion not only <em>within</em> languages, but across them. Users should be able to move between languages and be able to expect similar behavior, have similar terminology, and expect the same analysis results.</p>
<section id="arrow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrow">Arrow</h2>
<p>We started everything off by discussing Arrow which set the theme of ‚Äústandards.‚Äù Arrow gets conflated at many thing all at once‚ÄîI do that. At the core Arrow is a memory format specification. It describes how data should be held in memory.</p>
<p>R holds objects in memory one way, Python another, and Julia another as well. Arrow describes just one way that specific types of object can be held in memory. GeoArrow is an extension of Arrow that specifies the memory layout for geometry arrays.</p>
<section id="geoarrow" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="geoarrow">GeoArrow</h3>
<p>Specifications like well-known text (WKT) and well-known binary (WKB) are encodings of a <em>single</em> geometry. GeoArrow recognizes that we almost never work with scalar objects alone. GeoArrow is a memory layout for an array of geometries.</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image.png" class="img-fluid"></p>
<p>If each language can hold Arrow arrays in memory, they can be passed from one tool to another with 0 cost. Python can create an arrow array and R can pick it up if it knows where it exists.</p>
<p>The current approach looks something like this. Each tool serializes its data in one way. In order for another tool to use it, the data needs to be copied (memory inefficient) and converted (computationally expensive) into the appropriate format.</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-2.png" class="img-fluid"></p>
<p>The Arrow specification would allow data handoff between tools to be much more seamless and look like so:</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-1.png" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Maybe we ought to start framing adoption of Arrow as an effort to be more ‚Äúgreen.‚Äù If we spend less time computing we use less energy which is overall a net positive for the world.</p>
</div></div><p>This is a massive productivity improvement. There‚Äôs no computation cost in converting between one format to another saving time, energy, and money.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>There‚Äôs a good chance that in order to adopt Arrow in <code>{sf}</code> there will be breaking changes. I am an advocate for breaking changes when they are for a good reason. Being on the leading edge is how to make a language succeed.</p>
<p>I also think if we can move towards a ‚Äútrait-driven‚Äù approach to spatial data frames, we can support both GeoArrow geometries as well as current <code>sfc</code> objects.</p>
<p><a href="https://github.com/JosiahParry/sdf">Read my spatial data frame manifesto.</a></p>
</div></div><p>The key thing though, is that in order for Arrow to be useful, <strong>it has to be adopted widely</strong>. If GeoPandas uses Arrow and <code>{sf}</code> does not, we have to go through the copy and convert process anyways.</p>
</section>
<section id="why-geoarrow-excites-me" class="level3">
<h3 class="anchored" data-anchor-id="why-geoarrow-excites-me">Why GeoArrow excites me</h3>
<p>The promise of Arrow and GeoArrow is that memory can be handed off between tools without any additional cost. This (in theory) lowers the bar for what is needed to hand off between tools and languages. Hopefully <a href="https://wesmckinney.com/blog/the-problem-with-the-data-science-language-wars/">ending the language wars</a></p>
<p><a href="https://github.com/kylebarron">Kyle Barron</a> demonstrated really cool example use-case where he created GeoArrow arrays using <a href="https://github.com/geopolars/geopolars">GeoPolars</a>. That array was then written to a buffer and picked up by javascript. Since there was no serialization or deserialization it was unbelievably fast!</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-3.png" class="img-fluid"></p>
<p>Additionally, we are seeing <a href="https://webassembly.org/">WebAssembly</a> proliferate in the data science community. <a href="https://webr.r-wasm.org/">WebR</a> provides R users with the ability to execute R in the browser. This is also possible in Python, Rust, Go, and I‚Äôm sure many others. Each language can be compiled to be used in the browser and hand off components between them.</p>
<p>Client side computation will reduce the need for server side operations. If we can reduce the amount of hours that servers are constantly running by offloading lighter operations into the browser, we may be able to save money, energy, be more green, and create tools that do not necessarily require an active internet connection.</p>
</section>
</section>
<section id="spatial-support" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="spatial-support">Spatial Support</h2>
<p>We also discussed the more esoteric topic of <strong>spatial support</strong>. This was completely new to me. Support defines the relationship between an attribute to the geometry. There are two kinds:</p>
<ul>
<li><strong>point support</strong> - a constant values associated with every location in a geometry
<ul>
<li><em>example</em>: temperature measurement at a weather station</li>
</ul></li>
<li><strong>block support</strong> - a value derived from aggregating measures over space
<ul>
<li><em>example</em>: population count in a census tract</li>
</ul></li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Read <a href="https://r-spatial.org/book/01-hello.html#sec-support">chapter 1.6 of Spatial Data Science</a> (SDS) for more on this topic.</p>
</div>
</div>
<p>When geometries are manipulated and the associated attributes come along for the ride, support assumptions are often violated resulting in inaccurate calculations or maps.</p>
<section id="attribute-geometry-relationships" class="level3">
<h3 class="anchored" data-anchor-id="attribute-geometry-relationships">Attribute-Geometry Relationships</h3>
<p>SDS formalizes the relationship between attributes and geometry a bit further in something they call the <strong>Attribute-Geometry Relationship (AGR)</strong>. Attributes of spatial features can have one of 3 types of AGR:</p>
<ul>
<li>constant value (i.e.&nbsp;point support)</li>
<li>aggregate value (i.e.&nbsp;block support)</li>
<li>identity (i.e.&nbsp;attribute unique to a geometry)</li>
</ul>
<p>Knowing the relationships between geometries can be useful in tracking the assumptions of analyses. For example, taking the mean of an <em>aggregate</em> attribute such as median age, creates as assumptions of homogeneity in the aggregated areas and can contribute to the <a href="https://en.wikipedia.org/wiki/Modifiable_areal_unit_problem">modifiable areal unit problem (MAUP)</a>.</p>
</section>
<section id="intensive-vs-extensive" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="intensive-vs-extensive">Intensive vs Extensive</h3>
<p>Spatial intensive vs extensive variables were also discussed in the context of spatial interpolation. I‚Äôm still quite unclear on how to conceptualize intensive and extensive variables. <a href="https://github.com/MobiTobi">Tobias G</a> pointed out that these terms come from physics and provided a useful non-geometry motivating example.</p>
<blockquote class="blockquote">
<p>‚ÄúThe price of an ingot of gold is an extensive property and its temperature would be intensive.‚Äù</p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p>The common example is that population is extensive and population density is intensive. This requires the assumption that population is <em>constant</em> across space. So the examples are more confusing than helpful. I have yet to come up with an example of a spatially intensive variable that makes sense.</p>
<p>If you can think of one, please comment on below!</p>
</div></div><p><strong>Extensive</strong> variables are one that are associated with the physical geometry itself. <strong>Intensive</strong> ones <em>do not</em> change when a geometry is modified.</p>
<p>If an ingot of gold is split into half the price changes, each piece is now worth less than the whole. But, assuming the room temperature didn‚Äôt change, the temperature of each piece remained the same.</p>
</section>
<section id="domains" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="domains">Domains</h3>
<p>These properties of attributes are quite important but are forgotten about. One of the ideas raised in discussions was adding attribute-geometry relationship and a flag like <code>is_intensive</code> to a field domain.</p>
<p>A <a href="https://desktop.arcgis.com/en/arcmap/latest/manage-data/geodatabases/an-overview-of-attribute-domains.htm">Domain</a> is a concept that <em>I think</em> originated at Esri. It allows you to specify the field type, range of valid values, as well as policies that determine how fields behave when they are split or merged. <a href="https://github.com/OSGeo/gdal/releases/tag/v3.3.0">Field domains were added to GDAL in version 3.3</a>.</p>
<p>Is there utility in adding <code>AGR</code> and (ex/in)tensive flags to a field domain?</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Arrow allows for embedded metadata at an array and table level. Perhaps there should be a GeoArrow table (data frame) format spec too? I‚Äôd like that. It would fit with my generic spatial data frame manifesto as well.</p>
</div></div></section>
</section>
<section id="geodesic-first" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="geodesic-first">Geodesic first</h2>
<p>A good amount of attention was paid to geodesic coordinate operations. The conversation was kicked off by this ‚Äúmotivating example.‚Äù</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/geopandas-geodesic.png" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Really, I think this was just an excuse for Edzer to poke fun at the GeoPandas devs! üòµ‚Äçüí´ü§£</p>
</div></div><p>The example shows an area calculation on a dataset that uses a geographic coordinate system (GCS). Area, though, is typically calculated under the assumption that coordinates are on a plane (rectangle). With GCS, the data is on a circle. So if we calculate the area of angles the result is <em>definitely wrong</em>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I think about it like calculating the area but cutting through the Earth like so: <img src="https://josiahparry.com/posts/2023-09-20-sdsl/circle.png" class="img-fluid"></p>
</div></div><p>The open source ecosystem is behind on support of geodetic calculations. Data more often than not is captured using GCS and users often fail to project their data. It would be nice if tools did this.</p>
<p>R supports spherical geometries by using <a href="https://r-spatial.github.io/s2/">Google‚Äôs S2 library</a>. Python is presently building out support for S2. Some operations like buffering still aren‚Äôt made available by S2.</p>
<section id="the-full-polygon" class="level3">
<h3 class="anchored" data-anchor-id="the-full-polygon">The ‚Äúfull polygon‚Äù</h3>
<p>One interesting point that was brought up is that in a GCS there is a concept of a <strong>full polygon</strong>. This is the polygon that covers the entire ellipsoid. There is no way to capture this using typical coordinates.</p>
</section>
</section>
<section id="spatial-weights-matrix-serialization" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="spatial-weights-matrix-serialization">Spatial Weights Matrix Serialization</h2>
<p>Probably the second most interesting topic to me was around how to store spatial weights matrixes. We didn‚Äôt really discuss the ‚Äúhow‚Äù of holding it memory. Though I think they can be held in memory as a ragged Arrow array of indices or IDs. What was quite interesting was the concept of <em>serializing</em> the spatial weights matrix.</p>
<p><a href="https://martinfleischmann.net/">Martin</a> mentioned that in Pysal they had moved to serializing spatial weights as a parquet file which greatly improved their speed. In essence, spatial weights are stored in a 3 column table.</p>

<div class="no-row-height column-margin column-container"><div class="">
<table class="table">
<caption>Spatial Weights Matrix</caption>
<thead>
<tr class="header">
<th>i</th>
<th>j</th>
<th>wij</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3</td>
<td>0.5</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td>1</td>
<td>9</td>
<td>0.3</td>
</tr>
<tr class="even">
<td>2</td>
<td>7</td>
<td>0.2</td>
</tr>
</tbody>
</table>
</div></div><p>It was noted that additional metadata can be associated at the table level or column level. This can be very handy to keep track of things like the method for identifying neighbors, the weighting mechanism used, storing flags to know if the focal feature is included and maybe even remove weights if there is a constant value.</p>
<p>Additionally, since this is parquet, it can be handled and stored by a number of databases.</p>
<p>One benefit of using arrow here, is that we can conceivably have a future where spatial weights matrices are interchangeable between spdep, pysal, geoda, and ArcGIS.</p>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>I‚Äôm about to hop on a flight back to the US now‚Äî10 hours without internet is going to be a test of monk-like fortitude. I have left my strongest feels for another time. Chatting with devs from other languages makes is clear how great CRAN is as a package storage and testing mechanism but yet how utterly abysmal it is as a developer. I will write another post soon on the topics of retirement and how I think we can make CRAN a better place for developers.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Additional links</h2>
<p>I‚Äôll add more here as I can (hopefully).</p>
<ul>
<li><a href="https://martinfleischmann.net/a-note-on-spatial-data-science-across-languages-vol.1/">Martin‚Äôs SDSL blog post</a></li>
</ul>


</section>

 ]]></description>
  <category>r</category>
  <category>r-spatial</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2023-09-20-sdsl/index.html</guid>
  <pubDate>Fri, 22 Sep 2023 04:00:00 GMT</pubDate>
  <media:content url="https://josiahparry.com/posts/2023-09-20-sdsl/image.png" medium="image" type="image/png" height="23" width="144"/>
</item>
<item>
  <title>Valve: putting R in production</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-08-22-valve-for-production/2023-08-22-valve-for-production.html</link>
  <description><![CDATA[ <p>This blog post is based on my most recent YouTube video. Please give it a watch!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/11FM-dxxi3M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<div class="cell">

</div>
<p>I‚Äôve been grinding on a new tool for a few months now. And I‚Äôm hyped to formally introduce you to it. It‚Äôs called <a href="https://valve.josiahparry.com">Valve</a> And Valve is going to make R in production kick a$$.üî•</p>
<p>We‚Äôve all seen those click bait articles saying ‚ÄúDon‚Äôt Put R in production‚Äù or telling you that R can‚Äôt make machine learning models for production. Those ‚Äúhot takes‚Äù are uninformed and can be applied to other languages such as Python. That‚Äôs a bunch of malarkey.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><a href="https://towardsdatascience.com/dont-use-r-in-production-e2f4c9dd4a7b"><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-1.png" class="img-fluid figure-img" style="width:50.0%"></a></p>
</figure>
</div>
<p>Let‚Äôs get right down to it. Let‚Äôs talk ‚Äúproduction.‚Äù And let me be clear: R belongs in production. But we as the R community need to learn how to do that and be better advocates.</p>
<p>When I say ‚Äúproduction‚Äù I‚Äôm talking about making your code work with any other system. And that‚Äôs where RESTful APIs come in. If I‚Äôve lost you at ‚ÄúRESTful‚Äù, <a href="https://www.youtube.com/watch?v=w4yHEQWct20&amp;list=UULFX78SUhrloA6Cn3aW_e8C_A&amp;index=22">watch my previous video here</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><a href="https://www.youtube.com/watch?v=w4yHEQWct20&amp;list=UULFX78SUhrloA6Cn3aW_e8C_A&amp;index=22"><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-15.png" class="img-fluid figure-img" style="width:75.0%"></a></p>
</figure>
</div>
</div></div><p>REST relies on HTTP, which is the foundation of the internet and is a common tongue. It‚Äôs like if Esperanto actually worked. REST APIs provide a language-agnostic way to expose functionality over the web.</p>
<p><a href="https://www.rplumber.io/">Plumber</a> is an R package that converts your R functions into a RESTful API meaning any tool that can communicate in HTTP can call your R functions. It converts R code like this into an http endpoint.</p>
<p>At it‚Äôs core Valve is a web server that runs multiple {plumber} APIs in parallel. Valve spins up and down plumber APIs as needed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-21.png" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p>It‚Äôs designed to work with any existing plumber API. And because of that it supports {vetiver} out of the box.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-22.png" class="img-fluid" style="width:50.0%"></p>
</div></div><p>Vetiver is a framework built by Julia Silge and Isabel Zimmerman from Posit that simplifies putting machine learning models built with tidymodels into a production setting. And since, the goal is R in production, Valve can be easily integrated into Docker containers and deployed with DigitalOcean, AWS, Azure, or whatever other orchestration tools you have available.</p>
<p>Valve is akin to Gunicorn for Flask apps and FastAPI.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/gunicor.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/flask.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/fastapi.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>To understand why Valve is so powerful, we need to first understand how plumber works and its limitations. Plumber works by writing a function definition and providing annotations using a special comment character <code>#*</code>. Let‚Äôs take a look at a very simple example.</p>
<p>The three main components of a plumber API are:</p>
<ul>
<li>the function definition</li>
<li>the request type <code>@post</code>
</li>
<li>endpoint <code>/add-2</code>
</li>
</ul>
<p>In a nutshell plumber works by spawning a single web server using the {httpuv} R package. The webserver captures incoming http requests, captures the provided parameters, body, and requested endpoint. Based on the endpoint, it passes the parameters to the function. The result is then ‚Äúserialized‚Äù into the correct output type. By default, this is <code>json</code>.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/plumber-nutshell.png" class="img-fluid"></p>
<p>For example, we might be calling the <code>/add-2</code> endpoint. The process looks a bit like this. We have a GET request. The endpoint is colored red. Then the parameters are colored blue. The request is captured by the web-server. The endpoints are checked. Then the parameters are passed to the function and the user gets the result.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/request.png" class="img-fluid"></p>
<p>You can see how this is powerful! But there is one major thing holding this back. This is all running in a single R process. R, like Python, is single threaded. That means each request that comes in has to be added to a queue. The next request cannot be processed until the previous one has been.</p>
<p>Valve helps by running multiple plumber APIs concurrently. Valve is built specifically for plumber, in Rust, and by leveraging the power Tokio framework. Instead of having a single plumber API and a single R process handling all requests, there is another web server handling all incoming requests. This web server is build using Tokio.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/plumber.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/rustacean-flat-happy.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/tokio.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>The app has a number of pre-specified worker threads. Each worker is capable of taking an incoming request, processing it, and returning a response. These worker threads will delegate the request to another plumber API. These plumber APIs are sitting in a connection pool waiting to be accessed. The APIs will spawn and de-spawn according to the amount of incoming traffic.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/valve.png" class="img-fluid"></p>
<p>What this means is that instead of being able to handle 1 request at a time, we can handle as many requests as there are workers concurrently. This allows us to take advantage of more than a single R process at a time and, as a result, we can utilize more of the compute resources available to us.</p>
<p>So how do you install Valve? There are two ways in which you can install Valve. The first is to use the Rust package manager Cargo. This is my personal recommendation. If you don‚Äôt have Rust and cargo installed, don‚Äôt worry it is the second easiest language I‚Äôve ever installed.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-12.png" class="img-fluid"></p>
<p>Follow this one liner and it‚Äôll handle the installation for you.</p>
<p>To install Valve with cargo run</p>
<pre class="shell"><code>cargo install valve-rs --no-default-features</code></pre>
<p>Doing this will install the Valve binary and make it available to you as a command line tool. Alternatively, if you want to install valve as an R package you can do so via the R-universe. The R-universe version has pre-built binaries for Windows, Mac, and Ubuntu which means you do not need to have rust installed. But again, its easy, so give it a shot!</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/install.packages.html">install.packages</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="st" style="color: #20794D;">"valve"</span>, </span>
<span>    repos <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"https://josiahparry.r-universe.dev"</span>, <span class="st" style="color: #20794D;">"https://cloud.r-project.org"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>To follow along with the rest of these demos you can check out code in the <a href="https://github.com/JosiahParry/youtube-tutorials/tree/main/intro-valve">github repository</a>.</p>
<p>Here I want to demo just how easy it is to use Valve and what the experience is like. For this simple example we will run a plumber API with one endpoint <code>/zzz</code> which will sleep for a specified amount of time. We‚Äôll create a Valve app with 10 workers and plumber APIs.</p>
<pre class="shell"><code>valve -n 10 -w 10</code></pre>
<p>You‚Äôll notice that only one API is spawned at the start. This is because connections are spawned based on incoming demand. As we send more requests, the plumber APIs will spawn. If, after a specified amount of time, they go stale, they will de-spawn. However, you do have the ability to control the minimum number of plumber APIs.</p>
<pre class="shell"><code>Valve starting at: 127.0.0.1:3000
Spawning plumber API at 127.0.0.1:11094</code></pre>
<p>We‚Äôre going to create a simple function <code>sleep()</code> which will call the zzz endpoint at a specified port for a specified amount of time. We‚Äôll use <code>furrr</code> to create 10 sessions and call the function 10 times on valve app.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">sleep</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">port</span>, <span class="va" style="color: #111111;">secs</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;">httr2</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://httr2.r-lib.org/reference/request.html">request</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>        <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"127.0.0.1:"</span>, <span class="va" style="color: #111111;">port</span>, <span class="st" style="color: #20794D;">"/sleep?zzz="</span>, <span class="va" style="color: #111111;">secs</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;">httr2</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://httr2.r-lib.org/reference/req_perform.html">req_perform</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;">httr2</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://httr2.r-lib.org/reference/resp_body_raw.html">resp_body_string</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
<p>Now with the function defined we can use furrr to run the function in parallel</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://github.com/DavisVaughan/furrr">furrr</a></span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://future.futureverse.org/reference/plan.html">plan</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">multisession</span>, workers <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>We will call the function 10 times using <code><a href="https://furrr.futureverse.org/reference/future_map.html">future_map()</a></code> . The first time this runs we can see that more plumber APIs are being spawned. This takes somewhere between 3 and 4 seconds the first time we run it.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">start</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;">furrr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span>, <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">sleep</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">3000</span>, <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="va" style="color: #111111;">multi_total</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">start</span></span>
<span><span class="va" style="color: #111111;">multi_total</span> </span>
<span><span class="co" style="color: #5E5E5E;">#&gt; Time difference of 3.653488 secs</span></span></code></pre></div>
</div>
<p>If you watch your terminal, you will see additional plumber connections being spawned.</p>
<pre class="shell"><code>Valve starting at: 127.0.0.1:3000
Spawning plumber API at 127.0.0.1:11094
Spawning plumber API at 127.0.0.1:35714
Spawning plumber API at 127.0.0.1:15674
Spawning plumber API at 127.0.0.1:30746
Spawning plumber API at 127.0.0.1:26860
Spawning plumber API at 127.0.0.1:54939
Spawning plumber API at 127.0.0.1:5592
Spawning plumber API at 127.0.0.1:46549
Spawning plumber API at 127.0.0.1:53346
Spawning plumber API at 127.0.0.1:44956</code></pre>
<p>If we run this again, we get something much closer to two seconds total for sending all 10 requests.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">start</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;">furrr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span>, <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">sleep</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">3000</span>, <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="va" style="color: #111111;">multi_total</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">start</span></span>
<span><span class="va" style="color: #111111;">multi_total</span> </span>
<span><span class="co" style="color: #5E5E5E;">#&gt; Time difference of 2.013385 secs</span></span></code></pre></div>
</div>
<p>Now, we can do the same thing with all 10 workers calling just one of the spawned plumber APIs.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">start</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;">furrr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">10</span>, <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">sleep</span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">24817</span>, <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">total</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">start</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="co" style="color: #5E5E5E;">#&gt; Time difference of 20.04956 secs</span></span></code></pre></div>
</div>
<p>That‚Äôs a huge different. That is a lot more performance that we are squeezing out of this plumber API by creating multiple to run concurrently.</p>
<p>In an R session load {valve}.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://github.com/JosiahParry/valve">valve</a></span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<p>Next, we will use the function <code><a href="https://rsgeo.josiahparry.com/reference/valve_run.html">valve_run()</a></code> to run our plumber API. This function has a lot of handy defaults to moderately scale your plumber API. By default it looks for the file <code>plumber.R</code> in your working directory.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rsgeo.josiahparry.com/reference/valve_run.html">valve_run</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"plumber.R"</span>, n_max <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="co" style="color: #5E5E5E;">#&gt; Valve app hosted at &lt;http://127.0.0.1:3000&gt;</span></span>
<span><span class="co" style="color: #5E5E5E;">#&gt; Spawning plumber API at 127.0.0.1:49015</span></span></code></pre></div>
</div>
<p>The CLI works just like the R function with two differences. We call it from the command line and the syntax is a smidgen different.</p>
<p>From the command line we can run <code>valve ‚Äìhelp</code> to see the arguments that we can provide. The CLI has the same defaults as the R package.</p>
<pre class="shell"><code>valve --help
Usage: valve [-h &lt;host&gt;] [-p &lt;port&gt;] [-n &lt;n-max&gt;] [-w &lt;workers&gt;] [-f &lt;file&gt;] [--check-unused &lt;check-unused&gt;] [--max-age &lt;max-age&gt;] [--n-min &lt;n-min&gt;]

Distribute your plumber API in parallel.

Options:
  -h, --host        host to serve APIs on
  -p, --port        the port to serve the main application on
  -n, --n-max       the maximum number of plumber APIs to spawn
  -w, --workers     number of Tokio workers to spawn to handle requests
  -f, --file        path to the plumber API (default `plumber.R`)
  --check-unused    default 10. Interval in seconds when to check for unused
                    connections
  --max-age         default 5 mins. How long an API can go unused before being
                    killed in seconds.
  --n-min           the maximum number of plumber APIs to spawn
  --help            display usage information</code></pre>
<p>Now I want to illustrate scaling a machine learning model with {vetiver} and valve. They do so by wrapping the model into a plumber API. I‚Äôve created a sample plumber API based on <a href="https://juliasilge.com/blog/childcare-costs/">Julia‚Äôs recent Tidy Tuesday screencast in which she creates an XGBoost model</a>.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-14.png" class="img-fluid"></p>
<p>I‚Äôve taken this example and used vetiver to create a plumber API to serve predictions from this model. One could deploy this API as is with Docker or something like Posit Connect. If going down the Docker approach, we can make this a bit more performant by using Valve.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The scripts to generate the vetiver model and API are in the <a href="https://github.com/JosiahParry/youtube-tutorials/tree/main/intro-valve">Github repo</a>.</p>
</div>
</div>
<p>To make this into a Valve app all we need to do is pass provide the plumber API file to valve and we‚Äôre on our way! I‚Äôve written some simple bench marks using drill to compare the performance of the two approaches. With valve we will use 5 concurrent processes and test it.</p>
<pre class="shell"><code>valve -f vetiver-api.R -n 5 -w 5</code></pre>



 ]]></description>
  <category>rust</category>
  <category>r</category>
  <category>production</category>
  <guid>https://josiahparry.com/posts/2023-08-22-valve-for-production/2023-08-22-valve-for-production.html</guid>
  <pubDate>Tue, 22 Aug 2023 04:00:00 GMT</pubDate>
  <media:content url="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-1.png" medium="image" type="image/png" height="56" width="144"/>
</item>
<item>
  <title>R is still fast: a salty reaction to a salty blog post</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-07-06-r-is-still-fast.html</link>
  <description><![CDATA[ <p>There‚Äôs this new <a href="https://matthewrkaye.com/posts/2023-06-29-lessons-learned-from-running-r-in-production/lessons-learned-from-running-r-in-production.html">blog post</a> making the rounds making some claims about why they won‚Äôt put R into production. Most notably they‚Äôre wheeling the whole ‚ÄúR is slow thing‚Äù again. And there are few things that grind my gears more than that type of sentiment. It‚Äôs almost always ill informed. I find that to be the case here too.</p>
<p>I wouldn‚Äôt have known about this had it 1) not mentioned my own Rust project <a href="https://github.com/JosiahParry/valve/">Valve</a> and 2) a kind stranger inform me about it on mastodon.</p>
<iframe src="https://fosstodon.org/@jimgar/110663477958759961/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen">
</iframe>
<p>I‚Äôve collected my reactions below as notes and sundry bench marks and bullet points.</p>
<section id="tldr" class="level2"><h2 class="anchored" data-anchor-id="tldr">TL;DR</h2>
<ul>
<li>There is a concurrent web server for R and I made it <a href="https://github.com/JosiahParry/valve/">Valve</a>
</li>
<li>Python is really fast at serializing json and R is slower</li>
<li>Python is really slow at parsing json and R is so so soooo much faster</li>
<li>To handle types appropriately, sometimes you have to program</li>
<li>There are mock REST API testing libraries <a href="https://enpiar.com/r/httptest/articles/httptest.html"><code>{httptest}</code></a> and <a href="https://docs.ropensci.org/webmockr/"><code>{webmockr}</code></a>
</li>
<li>Demand your service providers to make the tools you want</li>
<li>Ask and you shall receive</li>
<li>R can go into production</li>
<li><strong>PLEASE JUST TRY VALVE YOU‚ÄôLL LOVE IT</strong></li>
</ul></section><section id="production-services" class="level2"><h2 class="anchored" data-anchor-id="production-services">Production Services</h2>
<p>There are so many people using R in production in so many ways across the world. I wish Posit did a better job getting these stories out. As a former RStudio employee, I personally met people putting R in production in most amazing ways. From the US Department of State, Defense, Biotech companies, marketing agencies, national lotteries, and so much more. The one that sticks out the most is that <a href="https://www.linkedin.com/in/pmokhtarian/">Payam M.</a>, when at <a href="https://www.tabcorp.com.au/">Tabcorp</a> massively scaled their system using Plumber APIs and Posit Connect to such a ridiculous scale I couldn‚Äôt even believe.</p>
<section id="gunicorn-web-servers-and-concurrency" class="level3"><h3 class="anchored" data-anchor-id="gunicorn-web-servers-and-concurrency">Gunicorn, Web Servers, and Concurrency</h3>
<blockquote class="blockquote">
<p>‚ÄúR has no widely-used web server to help it run concurrently.‚Äù</p>
</blockquote>
<p>The premise of this whole blog post stems from the fact that there is no easily concurrent web server for R. Which is true and is the reason I built Valve. It doesn‚Äôt meet the criteria of widely used because no one has used it. In part, because of posts like this that discourage people from using R in production.</p>
</section><section id="types-and-conversion" class="level3"><h3 class="anchored" data-anchor-id="types-and-conversion">Types and Conversion</h3>
<p>There‚Äôs this weird bit about how <code>1</code> and <code>c(1, 2)</code> are treated as the same class and unboxing of json. They provide the following python code as a desirable pattern for processing data.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4">json.dump(x, sys.stdout)</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#&gt; 1</span></span>
<span id="cb1-6">json.dump(y, sys.stdout)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#&gt; [1, 2]</span></span></code></pre></div>
<p>They want scalars to be unboxed and lists to remain lists. This is the same behavior as <code>jsonlite</code>, though.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">jsonlite</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span>, auto_unbox <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 </code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">jsonlite</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">2</span>, auto_unbox <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1,2] </code></pre>
</div>
</div>
<p>There‚Äôs a difference here: one that the author fails to recognize is that a length 1 vector is handled appropriately. What the author is saying is that they don‚Äôt like that R doesn‚Äôt behave the same way as Python. You, as a developer should be able to guarantee that a value is length 1. It‚Äôs easy. <code>length(x) == 1</code>, or if you want <code>is_scalar &lt;- function(x) length(x) == 1</code>. This is the type system in R and json libraries handle the ‚Äúedge case‚Äù appropriately. There is nothing wrong here. The reprex is the same as the python library.</p>
<blockquote class="blockquote">
<p>‚ÄúR (and Plumber) also do not enforce types of parameters to your API, as opposed to FastAPI, for instance, which does via the use of pydantic.‚Äù</p>
</blockquote>
<p>Python does not type check nor does FastAPI. You opt in to type checking with FastAPI. You can do the same with Plumber. A quick perusal of the docs will show you this. Find the <a href="https://www.rplumber.io/articles/annotations.html"><code>@param</code></a> section. There is some concessions here, though. The truthful part here is the type annotations do type conversion for only dynamic routes. Which, I don‚Äôt know if FastAPI does. Type handling for static parameters is an <a href="https://github.com/rstudio/plumber/issues/755">outstanding issue of mine for plumber since 2021</a>.</p>
<p>I‚Äôve followed up on the issue above and within minutes the maintainer responded. There is an existing <a href="https://github.com/rstudio/plumber/pull/905">PR to handle this issue</a>.</p>
<p>This just goes to show if that you want something done in the open source world, just ask for it. More than likely its already there or just waiting for the slight nudge from someone else.</p>
<p>While I know it‚Äôs not ‚Äúseemless‚Äù adding an <code><a href="https://rdrr.io/r/base/integer.html">as.integer()</a></code> and a <code>stopifnot(is.integer(n))</code> isn‚Äôt the wildest thing for a developer to do.</p>
<p>There is a comparison between type checking in R and Python with the python example using type hints which are, again, opt-in. An unfair comparison when you say ‚Äúif you don‚Äôt use the opt-in features of plumber but use the opt-in features of FastAPI, FastAPI is better.‚Äù</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> fastapi <span class="im" style="color: #00769E;">import</span> FastAPI</span>
<span id="cb6-2"></span>
<span id="cb6-3">app <span class="op" style="color: #5E5E5E;">=</span> FastAPI()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="at" style="color: #657422;">@app.get</span>(<span class="st" style="color: #20794D;">"/types"</span>)</span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;">async</span> <span class="kw" style="color: #003B4F;">def</span> types(n: <span class="bu" style="color: null;">int</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">int</span>:</span>
<span id="cb6-7">  <span class="cf" style="color: #003B4F;">return</span> n <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
</section><section id="clients-and-testing" class="level3"><h3 class="anchored" data-anchor-id="clients-and-testing">Clients and Testing</h3>
<p>I haven‚Äôt done much testing of API endpoints but I do know that there are two de facto packages for this:</p>
<ul>
<li>
<a href="https://enpiar.com/r/httptest/articles/httptest.html"><code>{httptest}</code></a> and</li>
<li>
<a href="https://docs.ropensci.org/webmockr/"><code>{webmockr}</code></a>.</li>
</ul>
<p>These are pretty easy to find. Not so sure why they weren‚Äôt mentioned or even tested.</p>
</section><section id="performance" class="level3"><h3 class="anchored" data-anchor-id="performance">Performance</h3>
<p>JSON serialization is a quite interesting thing to base performance off of. I‚Äôve never seen how fast pandas serialization is. Quite impressive! But, keep with me, because you‚Äôll see, this is fibbing with benchmarks.</p>
<p>I do have thoughts on the use of jsonlite and it‚Äôs ubiquity. jsonlite is slow. I don‚Äôt like it. My belief is that everyone should use <a href="https://github.com/SymbolixAU/jsonify"><code>{jsonify}</code></a> when creating json. It‚Äôs damn good.</p>
<p>So, when I run these bench marks on my machine for parsing I get:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">microbenchmark</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/microbenchmark/man/microbenchmark.html">microbenchmark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  jsonify <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">jsonify</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonify/man/to_json.html">to_json</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">iris</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  jsonlite <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">jsonlite</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">iris</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  unit <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ms"</span>, </span>
<span>  times <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1000</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in microbenchmark::microbenchmark(jsonify = jsonify::to_json(iris), :
less accurate nanosecond times to avoid potential integer overflows</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'jsonify':
  method     from    
  print.json jsonlite</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
     expr      min       lq      mean    median       uq      max neval cld
  jsonify 0.258218 0.265024 0.3224672 0.2698005 0.280850 35.20330  1000  a 
 jsonlite 0.346245 0.360759 0.4169715 0.3719110 0.399012 20.00181  1000   b</code></pre>
</div>
</div>
<p>A very noticable difference in using jsonify over jsonlite. The same benchmark using pandas is holy sh!t fast!</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">from</span> timeit <span class="im" style="color: #00769E;">import</span> timeit</span>
<span id="cb11-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb11-3"></span>
<span id="cb11-4">iris <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"fastapi-example/iris.csv"</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">N <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb11-9">  <span class="st" style="color: #20794D;">"Mean runtime:"</span>, </span>
<span id="cb11-10">  <span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">1000</span> <span class="op" style="color: #5E5E5E;">*</span> timeit(<span class="st" style="color: #20794D;">'iris.to_json(orient = "records")'</span>, <span class="bu" style="color: null;">globals</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">locals</span>(), number <span class="op" style="color: #5E5E5E;">=</span> N) <span class="op" style="color: #5E5E5E;">/</span> N, <span class="dv" style="color: #AD0000;">4</span>), </span>
<span id="cb11-11">  <span class="st" style="color: #20794D;">"milliseconds"</span></span>
<span id="cb11-12">)</span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;">#&gt; Mean runtime: 0.0721 milliseconds</span></span></code></pre></div>
<p>Now, this is only half the story. This is <em>serialization</em>. What about the other part? Where you ingest it.</p>
<p>Here, I will also say, again, that you shouldn‚Äôt use jsonlite because it is slow. Instead, you should use <a href="https://github.com/eddelbuettel/rcppsimdjson"><code>{RcppSimdJson}</code></a>. Because its</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6E7ZGCfruaw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Let‚Äôs run another benchmark</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">jsn</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">jsonify</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonify/man/to_json.html">to_json</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">iris</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">microbenchmark</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/microbenchmark/man/microbenchmark.html">microbenchmark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  simd <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">RcppSimdJson</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/RcppSimdJson/man/fparse.html">fparse</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">jsn</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  jsonlite <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">jsonlite</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">fromJSON</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">jsn</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  unit <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ms"</span>,</span>
<span>  times <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1000</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
     expr      min        lq       mean   median        uq      max neval cld
     simd 0.052275 0.0551040 0.06672631 0.057933 0.0634885 4.316275  1000  a 
 jsonlite 0.433165 0.4531525 0.48931155 0.467359 0.4919795 4.352232  1000   b</code></pre>
</div>
</div>
<p>RcppSimdJson is ~8 times faster than jsonlite.</p>
<p>Let‚Äôs do a similar benchmark in python.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">jsn <span class="op" style="color: #5E5E5E;">=</span> iris.to_json(orient <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb14-4">  <span class="st" style="color: #20794D;">"Mean runtime:"</span>, </span>
<span id="cb14-5">  <span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">1000</span> <span class="op" style="color: #5E5E5E;">*</span> timeit(<span class="st" style="color: #20794D;">'pd.read_json(jsn)'</span>, <span class="bu" style="color: null;">globals</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">locals</span>(), number <span class="op" style="color: #5E5E5E;">=</span> N) <span class="op" style="color: #5E5E5E;">/</span> N, <span class="dv" style="color: #AD0000;">4</span>), </span>
<span id="cb14-6">  <span class="st" style="color: #20794D;">"milliseconds"</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;">#&gt; Mean runtime: 1.2629 milliseconds</span></span></code></pre></div>
<p>Python is 3x slower than jsonlite in this case and 25x slower than RcppSimdJson. Which is very slow. While serializing is an important thing to be fast in, so is parsing the incoming json you are receiving. How nice it is to show only half the story! Use RcppSimdJson and embarrass pandas‚Äô json parsing.</p>
</section><section id="integration-with-tooling" class="level3"><h3 class="anchored" data-anchor-id="integration-with-tooling">Integration with Tooling</h3>
<p>I have literally no idea about any of these except Launchdarkly because one of my close homies worked there for years. These are all paid services so I‚Äôm not sure how they work :)</p>
<p>I would say to checkout Posit Connect for deploying R and python into production. But if your only use case is to deploy a single model, then yeah, I‚Äôd say that‚Äôs overkill.</p>
<p>I wish more companies would create tooling for R and their services. The way to do this, is to lean into using R in production and demanding (not asking) providers to make wrappers for them. When you pay for a service, you have leverage. Use it. I think too many people fall over when what they need isn‚Äôt there immediately. Be sure to be the squeeky wheel that makes change.</p>
<p>I also think that if you‚Äôre in the position where you can make a wrapper for something, you should. I did this when using Databricks in my last role and provided them with a lot of feedback. Have they taken it? I‚Äôm not sure. I‚Äôm not there to harass them anymore.</p>
</section></section><section id="workarounds" class="level2"><h2 class="anchored" data-anchor-id="workarounds">Workarounds</h2>
<p>These are good workarounds. I would suggest looking at <a href="https://ndexr.io/">ndexr.io</a> as a way to scale these R based services as well. They utilize the NGINX approach described here.</p>
</section><section id="addenda" class="level2"><h2 class="anchored" data-anchor-id="addenda">Addenda</h2>
<p>Clearly, this is where I care a lot. I am the author of <a href="https://github.com/JosiahParry/valve/">Valve</a>. Valve is exactly what the author was clamoring for in the beginning of the blog post. It is a web server that runs Plumber APIs in parallel written in Rust using Tokio, Axum, and Deadpool. Valve auto-scales on its own up to a maximum number of worker threads. So it‚Äôs not always taking up space and running more compute than it needs.</p>
<p>Valve overview:</p>
<ul>
<li>Concurrent webserver to auto-scale plumber APIs</li>
<li>written in Rust using Tokio, Axum, and Deadpool</li>
<li>spawns and kills plumber APIs based on demand</li>
<li>integration with {vetiver} of of the box</li>
</ul>
<p>First things first, I want to address ‚Äúit‚Äôs not on CRAN.‚Äù You‚Äôre right. That‚Äôs because it is a Rust crate. Crates don‚Äôt go on CRAN. I‚Äôve made an R package around it to lower the bar to entry. But it is a CLI tool at the core.</p>
<p>Obviously, it is new. It is untested. I wish I could tell everyone to use it, but I can‚Äôt. I think anyone who used it would be floored by its performance and ease of use. It is SO simple.</p>
<p>I‚Äôll push it to crates.io and CRAN in the coming weeks. Nothing like h8rs to inspire.</p>


</section> ]]></description>
  <category>rust</category>
  <category>r</category>
  <category>production</category>
  <guid>https://josiahparry.com/posts/2023-07-06-r-is-still-fast.html</guid>
  <pubDate>Thu, 06 Jul 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>What‚Äôs so special about arrays?</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-06-11-matrix-bug.html</link>
  <description><![CDATA[ <p>I‚Äôm working on a new video about S3 objects in R and class inheritance / hierarchy. One of my favorite functions for exploring objecs and their structure is <code><a href="https://rdrr.io/r/base/class.html">unclass()</a></code>.</p>
<p>The documentation states</p>
<blockquote class="blockquote">
<p><code>unclass</code> returns (a copy of) its argument with its class attribute removed. (It is not allowed for objects which cannot be copied, namely environments and external pointers.)</p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p>see <code><a href="https://rdrr.io/r/base/class.html">?unclass</a></code> and review <code>Details</code></p>
</div></div><p>So, <code><a href="https://rdrr.io/r/base/class.html">unclass()</a></code> <em>should</em> remove the class of any and all objects. For the sake clarity of this post I‚Äôm going to make a helper function.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">class_unclass</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/class.html">unclass</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>This works for <code>factor</code>s which are just integer vectors which have the attribute <code>levels</code></p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<p>and <code>data.frame</code>s are lists (also technically a vector just not atomic but instead recursive) with attributes <code>row.names</code>, and <code>names</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/data.frame.html">data.frame</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
</div>
<p>But when we get down to <code>matrix</code> another poser type (just like data.frame and factor pretending to be something they‚Äôre not actually), we get something different.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/matrix.html">matrix</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "matrix" "array" </code></pre>
</div>
</div>
<p>Well, why the heck is that? What about it makes it so special? Let‚Äôs explore this a bit more.</p>
<p>The two things that make a matrix are the classes <code>c("matrix", "array")</code> and the <code>dim</code> attribute which specifies the dimensions. Matrixes are two dimensional arrays, by the way!</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/attributes.html">attributes</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/matrix.html">matrix</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$dim
[1] 1 1</code></pre>
</div>
</div>
<p>What is weird is that you can make a matrix just by adding the <code>dim</code> attribute to a vector.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">m</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/integer.html">integer</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, dim <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">m</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "matrix" "array" </code></pre>
</div>
</div>
<p>We didn‚Äôt even specify the class. Why does this happen?</p>
<p>And when we remove the dim attribute‚Ä¶.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/attr.html">attr</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">m</span>, <span class="st" style="color: #20794D;">"dim"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">m</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<p>we get an integer vector. This differs from the behavior of other similar types. Recall that factors are <code>integer</code> vectors with an attribute of <code>levels</code> that is a character vector.</p>
<p>So let‚Äôs try something here. Let‚Äôs create a factor from scratch.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/integer.html">integer</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>, levels <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>, class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"factor"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>factor()
Levels: </code></pre>
</div>
</div>
<p>Now, if the behavior is similar to <code>matrix</code> or <code>array</code> we would expect that by omitting the <code>class</code> attribute R should reconstruct it.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/integer.html">integer</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>, levels <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>integer(0)
attr(,"levels")
character(0)</code></pre>
</div>
</div>
<p>Nope! Would you look at that!</p>
<p><a href="https://github.com/yjunechoe"><strong><span class="citation" data-cites="yjunechoe">@yjunechoe</span></strong></a> pointed me to some excerpts from <a href="https://deepr.gagolewski.com/">Deep R Programming</a>, a book I wish I had read yesterday. It refers to these attributes as ‚Äú<em>special attributes</em>‚Äù. The author, <a href="https://www.gagolewski.com/">Marek Gagolewski</a> (author of <a href="https://stringi.gagolewski.com/"><code>stringi</code></a>, by the way), makes note of this special behavior of matrix but leaves it at that.</p>
<p>To me, this is a fundamental inconsistency in the language. Either all poser types (data.frame, matrix, factor, etc) should be automatically created if their special attributes are set on the appropriate type or not at all. What justification is there for <em>only</em> <code>matrix</code> having a special behavior in <code><a href="https://rdrr.io/r/base/class.html">unclass()</a></code>?</p>
<p>To me, this warrants a bug report for <code><a href="https://rdrr.io/r/base/class.html">unclass()</a></code>. Based on the documentation, <code><a href="https://rdrr.io/r/base/class.html">unclass()</a></code> should <em>always</em> remove the class attribute from an object but it fails to do so for <code>arrays</code> and <code>matrix</code>es.</p>
<section id="looking-deeper" class="level2"><h2 class="anchored" data-anchor-id="looking-deeper">Looking deeper!</h2>
<p>With some further exploratory help of June we can see the internal representation of these objects.</p>
<p>Let‚Äôs create an object with a <code>dim</code> attribute and a custom class. Suprisingly, the custom class is respected and <code>matrix</code> and <code>array</code> aren‚Äôt slapped on it.</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/integer.html">integer</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, dim <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"meep"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "meep"</code></pre>
</div>
</div>
<p>If we look at the internal representation using <code>.Internal(inspect(x))</code> we get to see some of the C goodies.</p>
<div class="cell">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Internal.html">.Internal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">inspect</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>@10ea6ccd0 13 INTSXP g0c1 [OBJ,REF(2),ATT] (len=1, tl=0) 0
ATTRIB:
  @10f0d5570 02 LISTSXP g0c0 [REF(1)] 
    TAG: @13d00e880 01 SYMSXP g1c0 [MARK,REF(2905),LCK,gp=0x4000] "dim" (has value)
    @10ea6cd08 13 INTSXP g0c1 [REF(65535)] (len=2, tl=0) 1,1
    TAG: @13d00e9d0 01 SYMSXP g1c0 [MARK,REF(32428),LCK,gp=0x6000] "class" (has value)
    @12d670170 16 STRSXP g0c1 [REF(65535)] (len=1, tl=0)
      @12d6701a8 09 CHARSXP g0c1 [REF(2),gp=0x60] [ASCII] [cached] "meep"</code></pre>
</div>
</div>
<p>Just look to the right hand side of these gibberish. See that the <code>dim</code> has a value of <code>1,1</code> and <code>class</code> has a value of <code>meep</code>. There is no matrix or array or nothing.</p>
<p>Now we remove the <code>meep</code> class and check again.</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">class_unclass</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "matrix" "array" </code></pre>
</div>
</div>
<p>Boom matrix and array. But if we look at the internals‚Ä¶</p>
<div class="cell">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Internal.html">.Internal</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;">inspect</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/class.html">unclass</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>@10fa94200 13 INTSXP g0c1 [ATT] (len=1, tl=0) 0
ATTRIB:
  @10f31f5d8 02 LISTSXP g0c0 [REF(1)] 
    TAG: @13d00e880 01 SYMSXP g1c0 [MARK,REF(2933),LCK,gp=0x4000] "dim" (has value)
    @10ea6cd08 13 INTSXP g0c1 [REF(65535)] (len=2, tl=0) 1,1</code></pre>
</div>
</div>
<p>THEY AREN‚ÄôT THERE!!!!!!</p>


</section> ]]></description>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2023-06-11-matrix-bug.html</guid>
  <pubDate>Sun, 11 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Feeling rusty: counting characters</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-04-13-counting-chars/index.html</link>
  <description><![CDATA[ <p>I‚Äôm working on a new video for you all on GeoHashes. As I keep working on my slides and script I keep finding new things I want to explore or that I need to write. Recently, that was to compare multiple geohashes to a known geohash. The goal of that is to count how many of the first characters matched a reference. If there are matching leading characters between a geohashes that means that they are in the same geohash at some level of precision. Knowing that number of shared characters tells us at what level of precision they coexist. The challenge is that there isn‚Äôt any easy way to do that in base R or packages I could find. So, what do we do when we can‚Äôt find something to do a task for us? We make it.</p>
<p>For these small tasks that require a lot of iteration and counting, I‚Äôve been leaning on Rust a lot more. I find it actually <em>easier</em> for the more computer sciency type tasks.</p>
<p>Here‚Äôs how I solved it.</p>
<p>Define two geohashes to compare:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;">let</span> x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"drt2yyy1cxwy"</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">let</span> y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"drt2yywg71qc"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p>Next we want to iterate over each of these string slices (represented as <code>&amp;str</code>). Typically we‚Äôd use the <code>.iter()</code> or <code>.into_iter()</code> methods to iterate over objects but these are slices and not a vector or array.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><code>.into_iter()</code> consumes the object you‚Äôre iterating over whereas <code>.iter()</code> iterates over it without consuming. The former provides ‚Äúowned‚Äù objects at each iteration while the latter provides references‚Äù</p>
</div></div><p>We iterate through the characters of a slice using <code>.chars()</code>. We‚Äôll want to iterate through both of them at the same time. Then, for each iteration, we check to see if they‚Äôre the same.</p>
<p>This will instantiate an iterator over each of the strings where each element is a <code>char</code></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span>  <span class="fu" style="color: #4758AB;">x.chars</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="fu" style="color: #4758AB;">y.chars</span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>This will not compile, it‚Äôs for illustration</p>
</div>
</div>
<p>These iterators will only be able to be iterated over one at a time using <code>.map()</code> and the like. We can combine them into one iterator using the <code>.zip()</code> method which <em>zips</em> them together into one iterator.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb3-1">x<span class="op" style="color: #5E5E5E;">.</span>chars()<span class="op" style="color: #5E5E5E;">.</span>zip(y<span class="op" style="color: #5E5E5E;">.</span>chars())</span></code></pre></div>
<p>This is good! Now we have a single iterator to work through. Each element in the resultant iterator will be a tuple with the first element <code>.0</code> being the first character of <code>x</code> and <code>.1</code> being the first character of <code>y</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Tuple‚Äôs look like <code>let z = (x, y);</code> and are accessed by position like <code>z.0</code> and <code>z.1</code>.</p>
</div></div><p>The approach I took here is to use the <code>.take_while()</code> method which takes a closure that returns a <code>bool</code> (<code>true</code> or <code>false</code>). It‚Äôll return another iterator that contains only the elements where that statement was true.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb4-1">x<span class="op" style="color: #5E5E5E;">.</span>chars()<span class="op" style="color: #5E5E5E;">.</span>zip(y<span class="op" style="color: #5E5E5E;">.</span>chars())</span>
<span id="cb4-2">    <span class="op" style="color: #5E5E5E;">.</span>take_while(<span class="op" style="color: #5E5E5E;">|</span>a<span class="op" style="color: #5E5E5E;">|</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">==</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>A closure is like an anonymous function. It‚Äôs arguments are defined between <code>| |</code> and the evaluated expression is to the right of it.</p>
</div></div><p>Here, the closure has the argument <code>|a|</code> which is the tuple from <code>x</code> and <code>y</code>. It checks to see if the characters are equal. The resultant iterator now only has elements for matching characters. We don‚Äôt really need to iterate over it, but rather we just need to count how many items are in the iterator.</p>
<p>We can use the <code>.count()</code> method for that. Shouts out to the Rust discord for helping me with this one.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Previously I used a <code>fold()</code> method that looked like <code>.fold(0, |acc, _| acc + 1)</code> which worked but was less ‚Äúelegant‚Äù</p>
</div></div><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb5-1"><span class="kw" style="color: #003B4F;">let</span> res <span class="op" style="color: #5E5E5E;">=</span> x<span class="op" style="color: #5E5E5E;">.</span>chars()<span class="op" style="color: #5E5E5E;">.</span>zip(y<span class="op" style="color: #5E5E5E;">.</span>chars())</span>
<span id="cb5-2">    <span class="op" style="color: #5E5E5E;">.</span>take_while(<span class="op" style="color: #5E5E5E;">|</span>a<span class="op" style="color: #5E5E5E;">|</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">==</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-3">    <span class="op" style="color: #5E5E5E;">.</span>count()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<p>Let‚Äôs wrap this into a function:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb6-1"><span class="kw" style="color: #003B4F;">fn</span> count_seq_chars(x<span class="op" style="color: #5E5E5E;">:</span> <span class="op" style="color: #5E5E5E;">&amp;</span><span class="dt" style="color: #AD0000;">str</span><span class="op" style="color: #5E5E5E;">,</span> y<span class="op" style="color: #5E5E5E;">:</span> <span class="op" style="color: #5E5E5E;">&amp;</span><span class="dt" style="color: #AD0000;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">usize</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-2">  x<span class="op" style="color: #5E5E5E;">.</span>chars()<span class="op" style="color: #5E5E5E;">.</span>zip(y<span class="op" style="color: #5E5E5E;">.</span>chars())</span>
<span id="cb6-3">      <span class="op" style="color: #5E5E5E;">.</span>take_while(<span class="op" style="color: #5E5E5E;">|</span>a<span class="op" style="color: #5E5E5E;">|</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">==</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-4">      <span class="op" style="color: #5E5E5E;">.</span>count()</span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>We can make it available in R using <a href="https://extendr.github.io/rextendr/reference/rust_source.html"><code>rextendr::rust_function()</code></a>.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">rextendr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://extendr.github.io/rextendr/reference/rust_source.html">rust_function</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span></span>
<span><span class="st" style="color: #20794D;">fn count_seq_chars(x: &amp;str, y: &amp;str) -&gt; usize {</span></span>
<span><span class="st" style="color: #20794D;">  x.chars().zip(y.chars())</span></span>
<span><span class="st" style="color: #20794D;">      .take_while(|a| a.0 == a.1)</span></span>
<span><span class="st" style="color: #20794D;">      .count()</span></span>
<span><span class="st" style="color: #20794D;">}"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">count_seq_chars</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"drt2yyy1cxwy"</span>, <span class="st" style="color: #20794D;">"drt2yywg71qc"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
</div>
<p>But this isn‚Äôt vectorized yet. It only works on two scalars. We can improve it by changing the <code>x</code> argument to take a vector of strings <code>Vec&lt;String&gt;</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>We have to use <code>Vec&lt;String&gt;</code> instead of <code>Vec&lt;&amp;str&gt;</code> because <code>rextendr</code> does not know how to take a vector of string slices.</p>
</div></div><p>Essentially, what we do next is take this vector of strings, iterate over it, convert the string to a <code>&amp;str</code> then just do what we did before!</p>
<p>We use <code>.map()</code> to apply an expression over each element of <code>x</code>. The closure takes a single argument <code>xi</code> which represents the ith element of <code>x</code>. We convert it to a slice, then iterate over it‚Äôs characters and the rest should be similar in there!</p>
<p>Lastly, we collect the resultant <code>usize</code> objects into a vector of them <code>Vec&lt;usize&gt;</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb9-1">  <span class="kw" style="color: #003B4F;">fn</span> count_seq_chars_to_ref(x<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">Vec</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">&gt;,</span> y<span class="op" style="color: #5E5E5E;">:</span> <span class="op" style="color: #5E5E5E;">&amp;</span><span class="dt" style="color: #AD0000;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">Vec</span><span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">usize</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-2">    x<span class="op" style="color: #5E5E5E;">.</span>into_iter()</span>
<span id="cb9-3">        <span class="op" style="color: #5E5E5E;">.</span>map(<span class="op" style="color: #5E5E5E;">|</span>xi<span class="op" style="color: #5E5E5E;">|</span> </span>
<span id="cb9-4">            xi<span class="op" style="color: #5E5E5E;">.</span>as_str()<span class="op" style="color: #5E5E5E;">.</span>chars()<span class="op" style="color: #5E5E5E;">.</span>zip(y<span class="op" style="color: #5E5E5E;">.</span>chars())</span>
<span id="cb9-5">            <span class="op" style="color: #5E5E5E;">.</span>take_while(<span class="op" style="color: #5E5E5E;">|</span>a<span class="op" style="color: #5E5E5E;">|</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">==</span> a<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb9-6">            <span class="op" style="color: #5E5E5E;">.</span>count()</span>
<span id="cb9-7">        )</span>
<span id="cb9-8">        <span class="op" style="color: #5E5E5E;">.</span>collect()</span>
<span id="cb9-9">  <span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Note that the function definition has <code>-&gt; Vec&lt;usize&gt;</code> this defines what the ouput object type will be. Something definitely unfamiliar for Rusers!</p>
</div></div><p>Again, we can use <code>rextendr</code> to wrap this into a single R function that we can use.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">rextendr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://extendr.github.io/rextendr/reference/rust_source.html">rust_function</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span></span>
<span><span class="st" style="color: #20794D;">  fn count_seq_chars_to_ref(x: Vec&lt;String&gt;, y: &amp;str) -&gt; Vec&lt;usize&gt; {</span></span>
<span><span class="st" style="color: #20794D;">    x.into_iter()</span></span>
<span><span class="st" style="color: #20794D;">        .map(|xi| </span></span>
<span><span class="st" style="color: #20794D;">            xi.as_str().chars().zip(y.chars())</span></span>
<span><span class="st" style="color: #20794D;">            .take_while(|a| a.0 == a.1)</span></span>
<span><span class="st" style="color: #20794D;">            .count()</span></span>
<span><span class="st" style="color: #20794D;">        )</span></span>
<span><span class="st" style="color: #20794D;">        .collect()</span></span>
<span><span class="st" style="color: #20794D;">  }</span></span>
<span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"drt2yyy1cxwy"</span>, <span class="st" style="color: #20794D;">"drt2yywg71qc"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
</div>
<p>Let‚Äôs test this and see how it works with a larger dataset of 100,000 strings. We create a bunch of sample strings that sample a-e and 1-5, are sorted, then pasted together. We then can compare them to the reference string <code>"abcd123"</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">sample_strings</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">replicate</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">100000</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sort.html">sort</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sample.html">sample</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">letters</span><span class="op" style="color: #5E5E5E;">[</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">]</span>, <span class="fl" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, collapse <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sample.html">sample</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">)</span>, collapse <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  collapse <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "acde423" "abce234" "abcd341" "abde124" "abce124" "bcde312"</code></pre>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 4 2 3 0</code></pre>
</div>
</div>
<p><a href="https://www.pmassicotte.com/">Philippe Massicotte</a> was kind enough to provide an R only example in a reply to a tweet of mine. We can compare the speed of the two implementations. A pure Rust implementation and an R native implementation.</p>
<p></p>
<p>Here we wrap his implementation into a function <code>count_seq_lapply()</code>. I‚Äôve modified this implementation to handle the scenario where the first element is not true so we don‚Äôt get a run length of <code>FALSE</code> elements.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">count_seq_lapply</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="va" style="color: #111111;">ref</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">res</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">lapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, \<span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>    <span class="va" style="color: #111111;">a</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/unlist.html">unlist</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/strsplit.html">strsplit</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/unlist.html">unlist</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/strsplit.html">strsplit</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">ref</span>, <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    </span>
<span>    <span class="va" style="color: #111111;">comparison</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">a</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">x</span></span>
<span>    </span>
<span>    <span class="kw" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">!</span><span class="va" style="color: #111111;">comparison</span><span class="op" style="color: #5E5E5E;">[</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    </span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/rle.html">rle</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">comparison</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">$</span><span class="va" style="color: #111111;">lengths</span><span class="op" style="color: #5E5E5E;">[</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span>  <span class="op" style="color: #5E5E5E;">}</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/unlist.html">unlist</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">res</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">count_seq_lapply</span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 4 2 3 0</code></pre>
</div>
</div>
<p>As you can see his works just as well and frankly, better. That‚Äôs because he inherits the NA handling of the base R functions he is using. If any NA are introduced into a pure Rust implementation without using <a href="https://extendr.github.io/extendr/extendr_api/">extendr</a> types and proper handling you‚Äôll get a <code>panic!</code> which will cause the R function to error.</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">bench</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="http://bench.r-lib.org/reference/mark.html">mark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  lapply <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_lapply</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>  rust <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Some expressions had a GC in every iteration; so filtering is
disabled.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression      min   median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
1 lapply        945ms    945ms      1.06    1.58MB     37.0
2 rust           59ms     60ms     16.7    781.3KB      0  </code></pre>
</div>
</div>
<p>The R implementation is still super fast. It‚Äôs just that Rust is also super super fast!</p>
<hr>
<section id="addendum-chatgpt-rules-apparently" class="level2"><h2 class="anchored" data-anchor-id="addendum-chatgpt-rules-apparently">Addendum: ChatGPT rules apparently</h2>
<p>So I asked Chat GPT to rewrite my above function but using C++ and the results are absolutely startling!</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb21-1"><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">size_t</span><span class="op" style="color: #5E5E5E;">&gt;</span> count_seq_chars_to_ref_cpp<span class="op" style="color: #5E5E5E;">(</span><span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> x<span class="op" style="color: #5E5E5E;">,</span> <span class="at" style="color: #657422;">const</span> <span class="bu" style="color: null;">std::</span>string<span class="op" style="color: #5E5E5E;">&amp;</span> y<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-2">  <span class="bu" style="color: null;">std::</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">size_t</span><span class="op" style="color: #5E5E5E;">&gt;</span> result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-3">  <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> <span class="kw" style="color: #003B4F;">auto</span><span class="op" style="color: #5E5E5E;">&amp;</span> xi <span class="op" style="color: #5E5E5E;">:</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-4">    <span class="dt" style="color: #AD0000;">size_t</span> count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-5">    <span class="kw" style="color: #003B4F;">auto</span> it_x <span class="op" style="color: #5E5E5E;">=</span> xi<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-6">    <span class="kw" style="color: #003B4F;">auto</span> it_y <span class="op" style="color: #5E5E5E;">=</span> y<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>it_x <span class="op" style="color: #5E5E5E;">!=</span> xi<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> it_y <span class="op" style="color: #5E5E5E;">!=</span> y<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">*</span>it_x <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">*</span>it_y<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb21-8">      <span class="op" style="color: #5E5E5E;">++</span>count<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-9">      <span class="op" style="color: #5E5E5E;">++</span>it_x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-10">      <span class="op" style="color: #5E5E5E;">++</span>it_y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-11">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb21-12">    result<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>count<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb21-13">  <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb21-14">  <span class="cf" style="color: #003B4F;">return</span> result<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb21-15"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>This is the code it wrote after only one prompt. I didn‚Äôt correct it. It worked right off the rip. I did, however, provide ChatGPT with my above rust code.</p>
<p>Let‚Äôs bench mark this.</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">Rcpp</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/pkg/Rcpp/man/cppFunction.html">cppFunction</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"std::vector&lt;size_t&gt; count_seq_chars_to_ref_cpp(std::vector&lt;std::string&gt; x, const std::string&amp; y) {</span></span>
<span><span class="st" style="color: #20794D;">  std::vector&lt;size_t&gt; result;</span></span>
<span><span class="st" style="color: #20794D;">  for (const auto&amp; xi : x) {</span></span>
<span><span class="st" style="color: #20794D;">    size_t count = 0;</span></span>
<span><span class="st" style="color: #20794D;">    auto it_x = xi.begin();</span></span>
<span><span class="st" style="color: #20794D;">    auto it_y = y.begin();</span></span>
<span><span class="st" style="color: #20794D;">    while (it_x != xi.end() &amp;&amp; it_y != y.end() &amp;&amp; *it_x == *it_y) {</span></span>
<span><span class="st" style="color: #20794D;">      ++count;</span></span>
<span><span class="st" style="color: #20794D;">      ++it_x;</span></span>
<span><span class="st" style="color: #20794D;">      ++it_y;</span></span>
<span><span class="st" style="color: #20794D;">    }</span></span>
<span><span class="st" style="color: #20794D;">    result.push_back(count);</span></span>
<span><span class="st" style="color: #20794D;">  }</span></span>
<span><span class="st" style="color: #20794D;">  return result;</span></span>
<span><span class="st" style="color: #20794D;">}"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">bench</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="http://bench.r-lib.org/reference/mark.html">mark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  GPT_cpp <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref_cpp</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  rust <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression      min   median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
1 GPT_cpp         2ms   2.19ms     453.      784KB     8.46
2 rust         58.9ms  59.74ms      16.7     781KB     0   </code></pre>
</div>
</div>
<p>Absolutely friggin‚Äô bonkers!! If I was better at concurrency and threading I‚Äôd try to compare that but alas. I‚Äôm stopping here :)</p>
</section><section id="double-addendum." class="level2"><h2 class="anchored" data-anchor-id="double-addendum.">Double addendum‚Ä¶.</h2>
<p>Okay, after consulting the gods in the extendr discord they pointed to a number of ways in which this can be improved and made faster.</p>
<p>First off, <code>rust_function()</code> compiled using the <code>dev</code> profile first. This is used for debugging. If we set <code>profile = "release"</code> we compile the function for release performance. H/t to <a href="https://github.com/ilia"><span class="citation" data-cites="iliak">@iliak</span></a>.</p>
<div class="cell">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">rextendr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://extendr.github.io/rextendr/reference/rust_source.html">rust_function</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span></span>
<span><span class="st" style="color: #20794D;">  fn count_seq_chars_to_ref(x: Vec&lt;String&gt;, y: &amp;str) -&gt; Vec&lt;usize&gt; {</span></span>
<span><span class="st" style="color: #20794D;">    x.into_iter()</span></span>
<span><span class="st" style="color: #20794D;">        .map(|xi| </span></span>
<span><span class="st" style="color: #20794D;">            xi.as_str().chars().zip(y.chars())</span></span>
<span><span class="st" style="color: #20794D;">            .take_while(|a| a.0 == a.1)</span></span>
<span><span class="st" style="color: #20794D;">            .count()</span></span>
<span><span class="st" style="color: #20794D;">        )</span></span>
<span><span class="st" style="color: #20794D;">        .collect()</span></span>
<span><span class="st" style="color: #20794D;">  }</span></span>
<span><span class="st" style="color: #20794D;">"</span>,</span>
<span>profile <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"release"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>‚Ñπ build directory: '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520'
‚úî Writing '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520/target/extendr_wrappers.R'</code></pre>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">bench</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="http://bench.r-lib.org/reference/mark.html">mark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  GPT_cpp <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref_cpp</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  rust <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression      min   median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
1 GPT_cpp      1.99ms   2.27ms     427.      784KB     8.45
2 rust         13.7ms  14.44ms      68.9     781KB     2.03</code></pre>
</div>
</div>
<p>This brings the run time down a whole lot. The next enhancement pointed out is that both <code>Vec&lt;String&gt;</code> and <code>Vec&lt;usize&gt;</code> use copies. Instead, I should be using <code>extendr</code> objects <code>Strings</code> and <code>Integers</code>. Here I:</p>
<ul>
<li>change the <code>x</code> to <code>Strings</code>
</li>
<li>cast usize to i32 using <code>.count() as i32</code> (h/t <a href="https://github.com/multimeric"><span class="citation" data-cites="multimeric">@multimeric</span></a>)</li>
<li>use <code>collect_robj()</code> instead of <code>collect()</code> so that it turns into an <code>Robj</code> (R object)</li>
</ul>
<div class="cell">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">rextendr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://extendr.github.io/rextendr/reference/rust_source.html">rust_function</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span><span class="st" style="color: #20794D;">"    fn count_seq_chars_to_ref(x: Strings, y: &amp;str) -&gt; Robj {</span></span>
<span><span class="st" style="color: #20794D;">     x.into_iter()</span></span>
<span><span class="st" style="color: #20794D;">        .map(|xi| </span></span>
<span><span class="st" style="color: #20794D;">          xi.as_str().chars().zip(y.chars())</span></span>
<span><span class="st" style="color: #20794D;">            .take_while(|a| a.0 == a.1)</span></span>
<span><span class="st" style="color: #20794D;">            .count() as i32</span></span>
<span><span class="st" style="color: #20794D;">        )</span></span>
<span><span class="st" style="color: #20794D;">        .collect_robj()</span></span>
<span><span class="st" style="color: #20794D;">        </span></span>
<span><span class="st" style="color: #20794D;">  }"</span>,</span>
<span>profile <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"release"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>‚Ñπ build directory: '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520'
‚úî Writing '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520/target/extendr_wrappers.R'</code></pre>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">bench</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="http://bench.r-lib.org/reference/mark.html">mark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  GPT_cpp <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref_cpp</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  rust <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression      min   median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
1 GPT_cpp      1.99ms   2.25ms      441.     784KB     8.64
2 rust         1.42ms   1.52ms      628.     391KB     6.24</code></pre>
</div>
</div>
<p>Now rust is faster.</p>
<p>Further, shout out to <a href="https://github.com/CGMossa"><span class="citation" data-cites="cgmossa">@cgmossa</span></a> for this last implementation that shaves off some more time by using <code>Integers</code> specifically.</p>
<div class="cell">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">rextendr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://extendr.github.io/rextendr/reference/rust_source.html">rust_function</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span></span>
<span><span class="st" style="color: #20794D;">  fn count_seq_chars_to_ref(x: Strings, y: &amp;str) -&gt; Integers {</span></span>
<span><span class="st" style="color: #20794D;">  x.iter()</span></span>
<span><span class="st" style="color: #20794D;">        .map(|xi|</span></span>
<span><span class="st" style="color: #20794D;">            xi.chars().zip(y.chars())</span></span>
<span><span class="st" style="color: #20794D;">            .take_while(|a| a.0 == a.1)</span></span>
<span><span class="st" style="color: #20794D;">            .count()</span></span>
<span><span class="st" style="color: #20794D;">        ).map(|x|(x as i32).into())</span></span>
<span><span class="st" style="color: #20794D;">        .collect()</span></span>
<span><span class="st" style="color: #20794D;">  }</span></span>
<span><span class="st" style="color: #20794D;">"</span>,</span>
<span>extendr_fn_options <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"use_try_from"</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span><span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>use_dev_extendr <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span>profile <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"release"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>‚Ñπ build directory: '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520'
‚úî Writing '/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmp114U2N/filea5ce392cc520/target/extendr_wrappers.R'</code></pre>
</div>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">bench</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="http://bench.r-lib.org/reference/mark.html">mark</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  GPT_cpp <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref_cpp</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  rust <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">count_seq_chars_to_ref</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sample_strings</span>, <span class="st" style="color: #20794D;">"abcd123"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression      min   median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
1 GPT_cpp      1.96ms   2.31ms      407.     784KB     8.47
2 rust         1.38ms   1.49ms      663.     391KB     6.22</code></pre>
</div>
</div>


</section> ]]></description>
  <category>rust</category>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2023-04-13-counting-chars/index.html</guid>
  <pubDate>Thu, 13 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Rust traits for R users</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-03-01-rust-traits-for-r-programmers/index.html</link>
  <description><![CDATA[ <p>In the few months that I‚Äôve been programming in Rust nothing has so fundamentally shifted the way that I think about programming‚Äîand specifically R packages‚Äîas Rust traits. I want to talk briefly about Rust traits and why I think they can make R packages better.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://josiahparry.com/posts/2023-03-01-rust-traits-for-r-programmers/feRris.svg" class="" height="150"></p>
</div></div><p>A trait defines a set of behaviors that can be used by objects of different kinds. Each trait is a collection of methods (functions) whose behavior is defined abstractly. The traits can then be <code>impl</code>emented <em>for</em> different object types. Any object that implements the trait can then use that method. It‚Äôs kind of confusing, isn‚Äôt it? Let‚Äôs work through <a href="https://doc.rust-lang.org/book/ch10-02-traits.html">the example in The Book‚Ñ¢</a> and how we can implement it in R.</p>
<section id="defining-a-trait" class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="defining-a-trait">Defining a Trait</h2>
<p>We start by defining a trait called <code>Summary</code> which as a single method that returns a <code>String</code>. Note how the definition is rather abstract. We know what the function is and what it returns. What happens on the inside doesn‚Äôt matter to use.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;">trait</span> Summary <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">fn</span> summarize(<span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Analogous in R is the definition of an <a href="https://adv-r.hadley.nz/s3.html">S3 function generic</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>It‚Äôs only analogous if the trait implements only one method</p>
</div></div><div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">Summary</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/UseMethod.html">UseMethod</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Summary"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>The S3 function generic is essentially saying that there is a new function called <code>Summary</code> and it will behave differently based on the class of object passed to it.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Note that we can‚Äôt specify the output type so we may want to create a validator function later</p>
</div></div><p>Now we want to define a struct called <code>NewsArticle</code> that contains 4 fields related to the news paper itself.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb3-1"><span class="kw" style="color: #003B4F;">pub</span> <span class="kw" style="color: #003B4F;">struct</span> NewsArticle <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">pub</span> headline<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;">pub</span> location<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;">pub</span> author<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;">pub</span> content<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-6"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>This is similar to creating a new record in <a href="https://vctrs.r-lib.org/"><code>vctrs</code></a> which is rather similar to using base R.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Base R</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false"><code>vctrs</code></a></li>
</ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    headline <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    location <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    author <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    content <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>  class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NewsArticle"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$headline
character(0)

$location
character(0)

$author
character(0)

$content
character(0)

attr(,"class")
[1] "NewsArticle"</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_rcrd.html">new_rcrd</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    headline <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    location <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    author <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    content <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>  class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NewsArticle"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;NewsArticle[0]&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</section><section id="implementing-a-trait" class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="implementing-a-trait">
<code>impl</code>ementing a trait</h2>
<p>It‚Äôs important that we are able to summarise our newspaper article for the socials ofc‚Äîso we need to <code>impl</code>ement the <code>Summary</code> trait for the <code>NewsArticle</code> struct.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb8-1"><span class="kw" style="color: #003B4F;">impl</span> Summary <span class="cf" style="color: #003B4F;">for</span> NewsArticle <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;">fn</span> summarize(<span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">String</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-3">        <span class="pp" style="color: #AD0000;">format!</span>(<span class="st" style="color: #20794D;">"{}, by {} ({})"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">self</span><span class="op" style="color: #5E5E5E;">.</span>headline<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">self</span><span class="op" style="color: #5E5E5E;">.</span>author<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">self</span><span class="op" style="color: #5E5E5E;">.</span>location)</span>
<span id="cb8-4">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Notice that the trait is called <code>Summary</code> whereas the method it provides is called <code><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarize()</a></code>. For the sake of example I‚Äôm going to call the R function <code><a href="https://rdrr.io/r/methods/S4groupGeneric.html">Summary()</a></code> throughout the rest of the example. It‚Äôs not possible to have a perfect 1:1 relationship between Rust and R ;)</p>
</div></div><p>This block defines how the <code><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarize()</a></code> method will work for a <code>NewsArticle</code> struct. It will create a string in the format of <code>"{title}, by {author} ({location})"</code>. In R, we have to define the <code>NewsArticle</code> method for the <code>Summary</code> function which is done by creating a function object with the name signature <code>{Generic}.{class} &lt;- function(...) { . . . }</code>.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Base R</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false"><code>vctrs</code></a></li>
</ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">Summary.NewsArticle</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sprintf.html">sprintf</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="st" style="color: #20794D;">"%s, by %s (%s)"</span>,</span>
<span>    <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">[[</span><span class="st" style="color: #20794D;">"headline"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">]</span>,</span>
<span>    <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">[[</span><span class="st" style="color: #20794D;">"author"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">]</span>,</span>
<span>    <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">[[</span><span class="st" style="color: #20794D;">"location"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">Summary.NewsArticle</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sprintf.html">sprintf</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="st" style="color: #20794D;">"%s, by %s (%s)"</span>,</span>
<span>    <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/fields.html">field</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"headline"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/fields.html">field</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"author"</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/fields.html">field</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"location"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<p>Since Musk‚Äôs takeover of twitter, tweets are getting out of hand becoming ridiculously long so we need to be able to summarize them too! So if we define a <code>Tweet</code> struct and a corresponding implementation of <code>Summary</code> we‚Äôll be able to easily summarize them exactly the same way as news articles.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">// define the struct</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">pub</span> <span class="kw" style="color: #003B4F;">struct</span> Tweet <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-3">    <span class="kw" style="color: #003B4F;">pub</span> username<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;">pub</span> content<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">String</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb11-5">    <span class="kw" style="color: #003B4F;">pub</span> reply<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">bool</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;">pub</span> retweet<span class="op" style="color: #5E5E5E;">:</span> <span class="dt" style="color: #AD0000;">bool</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">// implement the trait</span></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;">impl</span> Summary <span class="cf" style="color: #003B4F;">for</span> Tweet <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-11">    <span class="kw" style="color: #003B4F;">fn</span> summarize(<span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="dt" style="color: #AD0000;">String</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb11-12">        <span class="pp" style="color: #AD0000;">format!</span>(<span class="st" style="color: #20794D;">"{}: {}"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">self</span><span class="op" style="color: #5E5E5E;">.</span>username<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">self</span><span class="op" style="color: #5E5E5E;">.</span>content)</span>
<span id="cb11-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb11-14"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>Correspondingly in R, we‚Äôre going to be working with both Tweets and News Articles. So we need to define a tweet class to contain our tweets and a <code><a href="https://rdrr.io/r/methods/S4groupGeneric.html">Summary()</a></code> method for the new class.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Base R</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">vctrs</a></li>
</ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    username <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    content <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    reply <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/logical.html">logical</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    retweet <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/logical.html">logical</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Tweet"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$username
character(0)

$content
character(0)

$reply
logical(0)

$retweet
logical(0)

attr(,"class")
[1] "Tweet"</code></pre>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">Summary.Tweet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sprintf.html">sprintf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"%s: %s"</span>, <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">[[</span><span class="st" style="color: #20794D;">"username"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">]</span>, <span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">[[</span><span class="st" style="color: #20794D;">"content"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_rcrd.html">new_rcrd</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    username <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    content <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    reply <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/character.html">character</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    retweet <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/logical.html">logical</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>  class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Tweet"</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Tweet[0]&gt;</code></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">Summary.Tweet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sprintf.html">sprintf</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="st" style="color: #20794D;">"%s: %s"</span>, </span>
<span>    <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/fields.html">field</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"username"</span><span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>    <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/fields.html">field</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"content"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<p>We can now define a function that utilizes this trait that will produce consistent <code>String</code> output in the same format for both tweets and new articles.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb18-1"><span class="kw" style="color: #003B4F;">pub</span> <span class="kw" style="color: #003B4F;">fn</span> notify(item<span class="op" style="color: #5E5E5E;">:</span> <span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">impl</span> Summary) <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb18-2">    <span class="pp" style="color: #AD0000;">println!</span>(<span class="st" style="color: #20794D;">"Breaking news! {}"</span><span class="op" style="color: #5E5E5E;">,</span> item<span class="op" style="color: #5E5E5E;">.</span>summarize())<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-3"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>This is huge from the R perspective because we can create a <code>notify()</code> function that calls <code><a href="https://rdrr.io/r/methods/S4groupGeneric.html">Summary()</a></code> and as long as a method if defined for the input class it will work!</p>
<div class="cell">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">notify</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">item</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/sprintf.html">sprintf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Breaking news! %s"</span>, <span class="fu" style="color: #4758AB;">Summary</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">item</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
<p>To test this out lets create a <code>Tweet</code> and a <code>NewsArticle</code>. First we‚Äôll create constructor functions for each.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Base R</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false"><code>vctrs</code></a></li>
</ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="cell">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">new_article</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">headline</span>, <span class="va" style="color: #111111;">location</span>, <span class="va" style="color: #111111;">author</span>, <span class="va" style="color: #111111;">content</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>      headline <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">headline</span>,</span>
<span>      location <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">location</span>,</span>
<span>      author <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">author</span>,</span>
<span>      content <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">content</span></span>
<span>      <span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>    class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NewsArticle"</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;">new_tweet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">username</span>, <span class="va" style="color: #111111;">content</span>, <span class="va" style="color: #111111;">reply</span>, <span class="va" style="color: #111111;">retweet</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/structure.html">structure</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>      username <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">username</span>,</span>
<span>      content <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">content</span>,</span>
<span>      reply <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">reply</span>,</span>
<span>      retweet <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">retweet</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Tweet"</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="cell">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">new_article</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">headline</span>, <span class="va" style="color: #111111;">location</span>, <span class="va" style="color: #111111;">author</span>, <span class="va" style="color: #111111;">content</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_rcrd.html">new_rcrd</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>      headline <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">headline</span>,</span>
<span>      location <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">location</span>,</span>
<span>      author <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">author</span>,</span>
<span>      content <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">content</span></span>
<span>      <span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>    class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NewsArticle"</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;">new_tweet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">username</span>, <span class="va" style="color: #111111;">content</span>, <span class="va" style="color: #111111;">reply</span>, <span class="va" style="color: #111111;">retweet</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_rcrd.html">new_rcrd</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>      username <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">username</span>,</span>
<span>      content <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">content</span>,</span>
<span>      reply <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">reply</span>,</span>
<span>      retweet <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">retweet</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>    class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Tweet"</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
</div>
</div>
</div>
<p>Using the constructors we can create a tweet and a news article.</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># https://www.theonion.com/new-absolut-ad-features-swaying-mom-with-one-eye-closed-1850138855</span></span>
<span><span class="va" style="color: #111111;">article</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_article</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="st" style="color: #20794D;">"New Absolut Ad Features Swaying Mom With One Eye Closed Telling Camera She Used To Dance"</span>,</span>
<span>  <span class="st" style="color: #20794D;">"Stockholm"</span>,</span>
<span>  <span class="st" style="color: #20794D;">"The Onion"</span>, </span>
<span>  <span class="st" style="color: #20794D;">"The ad concludes abruptly with the mother beginning to cry when, for no particular reason, she suddenly remembers the death of Princess Diana."</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># https://twitter.com/TheOnion/status/1631104570041552896</span></span>
<span><span class="va" style="color: #111111;">tweet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_tweet</span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>  <span class="st" style="color: #20794D;">"@TheOnion"</span>,</span>
<span>  <span class="st" style="color: #20794D;">"Cat Internally Debates Whether Or Not To Rip Head Off Smaller Creature It Just Met https://bit.ly/3J1kNzV"</span>,</span>
<span>  <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span>  <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>We can see how notify works for both of these.</p>
<div class="cell">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">notify</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">tweet</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Breaking news! @TheOnion: Cat Internally Debates Whether Or Not To Rip Head Off Smaller Creature It Just Met https://bit.ly/3J1kNzV"</code></pre>
</div>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">notify</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">article</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Breaking news! New Absolut Ad Features Swaying Mom With One Eye Closed Telling Camera She Used To Dance, by The Onion (Stockholm)"</code></pre>
</div>
</div>
<section id="what-this-means" class="level3"><h3 class="anchored" data-anchor-id="what-this-means">what this means</h3>
<p>This is awesome. This means that any object that we create in the future, as long as it implements the <code><a href="https://rdrr.io/r/methods/S4groupGeneric.html">Summary()</a></code> function for its class we can utilize the <code>notify()</code> function. This comes with a caveat, though‚Äîas all good things do.</p>
<p>The Rust compiler ensures that any object that implements the <code>Summary</code> trait returns a single string. R is far more laissez faire than Rust with classes and types. One could create a <code>Summary</code> method for an object that returns a vector of strings. That would break notify. Either <code>notify()</code> should have type checking or you should make sure that your method always produces the correct type.</p>
</section></section><section id="implications-for-r-packages" class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="implications-for-r-packages">Implications for R packages</h2>
<p>This very simple concept can be transformative for the way that we build R packages. R packages are, for the most part, bespoke. Each one serves their own purpose and works only within its own types or types it‚Äôs aware of. But what if an R package could work with <em>any</em> object type? Using this idea we can get from Rust traits, we can do that.</p>
<p>Packages that want to be extensible can make it easy to do so by doing two fairly simple things. Low-level and critical functions should be exported as generic functions. High level functions that perform some useful functionality should be built upon those generics.</p>
<p>An example is the <a href="https://github.com/JosiahParry/sdf"><code>sdf</code></a> package I‚Äôve prototyped based on this idea. In this case, I have a spatial data frame class that can be implemented on any object that implements methods for the following functions:</p>
<ul>
<li><code><a href="https://rdrr.io/pkg/sdf/man/generics.html">is_geometry()</a></code></li>
<li><code><a href="https://rdrr.io/pkg/sdf/man/generics.html">bounding_box()</a></code></li>
<li><code><a href="https://rdrr.io/pkg/sdf/man/generics.html">combine_geometry()</a></code></li>
</ul>
<section id="an-example" class="level3 page-columns page-full"><h3 class="anchored" data-anchor-id="an-example">An example</h3>
<p>The <code>sdf</code> class is a <code>tibble</code> with a geometry column and a bounding box attribute. The function <code>as_sdf()</code> creates an <code>sdf</code> object that tells us what type of geometry is used and the bounding box of it.</p>
<div class="cell">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://r-spatial.github.io/sf/">sf</a></span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.1; sf_use_s2() is TRUE</code></pre>
</div>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">sdf</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'sdf'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:sf':

    is_geometry</code></pre>
</div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># get some sample data </span></span>
<span><span class="va" style="color: #111111;">g</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">sfdep</span><span class="fu" style="color: #4758AB;">::</span><span class="va" style="color: #111111;"><a href="https://sfdep.josiahparry.com/reference/guerry.html">guerry</a></span><span class="op" style="color: #5E5E5E;">[</span>, <span class="st" style="color: #20794D;">"region"</span><span class="op" style="color: #5E5E5E;">]</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;">as_sdf</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">g</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Geometry Type: sfc_MULTIPOLYGON
Bounding box: xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441
# A tibble: 85 √ó 2
   region                                                               geometry
   &lt;fct&gt;                                                          &lt;MULTIPOLYGON&gt;
 1 E      (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795, 80‚Ä¶
 2 N      (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520, 72‚Ä¶
 3 C      (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132, 71‚Ä¶
 4 E      (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332, 87‚Ä¶
 5 E      (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266, 88‚Ä¶
 6 S      (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236, 74‚Ä¶
 7 N      (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945, 81‚Ä¶
 8 S      (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627, 50‚Ä¶
 9 E      (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780, 77‚Ä¶
10 S      (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424, 62‚Ä¶
# ‚Ä¶ with 75 more rows</code></pre>
</div>
</div>
<p>This is super cool because we can group by and summarize the data just because we have those above functions defined for <code>sfc</code> objects (the geometry column).</p>
<div class="cell">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="fu" style="color: #4758AB;">as_sdf</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">g</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/group_by.html">group_by</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">region</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarise</a></span><span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/context.html">n</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Geometry Type: sfc_MULTIPOLYGON
Bounding box: xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441
# A tibble: 5 √ó 3
  region     n                                                          geometry
  &lt;fct&gt;  &lt;int&gt;                                                    &lt;MULTIPOLYGON&gt;
1 C         17 (((710830 2137350, 711746 2136617, 712430 2135212, 712070 213413‚Ä¶
2 E         17 (((801150 2092615, 800669 2093190, 800688 2095430, 800780 209579‚Ä¶
3 N         17 (((729326 2521619, 729320 2521230, 729280 2518544, 728751 251752‚Ä¶
4 S         17 (((747008 1925789, 746630 1925762, 745723 1925138, 744216 192523‚Ä¶
5 W         17 (((456425 2120055, 456229 2120382, 455943 2121064, 456070 212219‚Ä¶</code></pre>
</div>
</div>
<p>Say we want to create a custom <code>Point</code> class that we want to be usable by an <code>sdf</code> object. We can do this rather simply by creating the proper generics. A <code>Point</code> will be a list of length 2 numeric vectors where the first element is the x coordinate and the second element is the y coordinate.</p>
<div class="cell">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># create some points</span></span>
<span><span class="va" style="color: #111111;">pnt_data</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">lapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fl" style="color: #AD0000;">5</span>, \<span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/stats/Uniform.html">runif</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">90</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;"># create new vector class</span></span>
<span><span class="va" style="color: #111111;">pnts</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_vctr.html">new_vctr</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">pnt_data</span>, class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Point"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;">pnts</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Point[5]&gt;
[1] 53.59747, 75.12560  25.34989, 51.07764  8.542277, 19.890635
[4] 52.60644, 68.45127  16.40016, 75.16829 </code></pre>
</div>
</div>
<p>Now we can start defining our methods. <code><a href="https://rdrr.io/pkg/sdf/man/generics.html">is_geometry()</a></code> should always return TRUE for our type. We can do this like so:</p>
<div class="cell">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">is_geometry.Point</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/class.html">inherits</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="st" style="color: #20794D;">"Point"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>This method will only be dispatched on <code>Point</code>s so it will always inherit the <code>Point</code> class. One could just as well always return <code>TRUE</code></p>
</div></div><p>Next we need to define a method for the bounding box. This is the the maximum and minimum x and y coordinates. Our method should iterate over each point and extract the x and y into their own vector and return the minimum and maxes. These need to be structured in a particular order.</p>
<div class="cell">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">bounding_box.Point</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">vapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span>, <span class="va" style="color: #111111;">`[`</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/numeric.html">numeric</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="va" style="color: #111111;">y</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">vapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span>, <span class="va" style="color: #111111;">`[`</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/numeric.html">numeric</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span>xmin <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">min</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span>, ymin <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">min</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">y</span><span class="op" style="color: #5E5E5E;">)</span>, xmax <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span>, ymax <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">y</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
<p>Lastly, we need a way to combine the points together. In this case, we can just ‚Äúcombine‚Äù the points by finding the average point. This is not geometrically sound but for the sake of example it suffices. Note that the type it returns always has to be the same! There is not a compiler forcing us, so we must force ourselves!</p>
<div class="cell">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">combine_geometry.Point</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">x</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">vapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span>, <span class="va" style="color: #111111;">`[`</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/numeric.html">numeric</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="va" style="color: #111111;">y</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lapply.html">vapply</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">.x</span>, <span class="va" style="color: #111111;">`[`</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/numeric.html">numeric</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fl" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  </span>
<span>  <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_vctr.html">new_vctr</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/mean.html">mean</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span><span class="op" style="color: #5E5E5E;">)</span>, <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/mean.html">mean</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">y</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span>, </span>
<span>    class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Point"</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</div>
<p>With only those 3 functions we‚Äôve defined enough to create an <code>sdf</code> object where the geometry column is a <code>Point</code> vector. To illustrate this we can use the ggplot2 diamonds data set for example since it has nice x and y coordinates.</p>
<p>First we create a data frame with a <code>Point</code> column.</p>
<div class="cell">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/data.html">data</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">diamonds</span>, package <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ggplot2"</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;">diamond_pnts</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">diamonds</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    pnts <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">vctrs</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://vctrs.r-lib.org/reference/new_vctr.html">new_vctr</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>      <span class="fu" style="color: #4758AB;">purrr</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://purrr.tidyverse.org/reference/map2.html">map2</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">x</span>, <span class="va" style="color: #111111;">y</span>, <span class="va" style="color: #111111;">`c`</span><span class="op" style="color: #5E5E5E;">)</span>,</span>
<span>      class <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Point"</span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/select.html">select</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">cut</span>, <span class="va" style="color: #111111;">pnts</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">diamond_pnts</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 2
  cut             pnts
  &lt;ord&gt;        &lt;Point&gt;
1 Ideal     3.95, 3.98
2 Premium   3.89, 3.84
3 Good      4.05, 4.07
4 Premium   4.20, 4.23
5 Good      4.34, 4.35
6 Very Good 3.94, 3.96</code></pre>
</div>
</div>
<p>Next we cast it to an <code>sdf</code> object by using <code>as_sdf()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">diamond_sdf</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">as_sdf</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">diamond_pnts</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span><span class="va" style="color: #111111;">diamond_sdf</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Geometry Type: Point
Bounding box: xmin: 0 ymin: 0 xmax: 10.74 ymax: 58.9
# A tibble: 53,940 √ó 2
   cut             pnts
   &lt;ord&gt;        &lt;Point&gt;
 1 Ideal     3.95, 3.98
 2 Premium   3.89, 3.84
 3 Good      4.05, 4.07
 4 Premium   4.20, 4.23
 5 Good      4.34, 4.35
 6 Very Good 3.94, 3.96
 7 Very Good 3.95, 3.98
 8 Very Good 4.07, 4.11
 9 Fair      3.87, 3.78
10 Very Good 4.00, 4.05
# ‚Ä¶ with 53,930 more rows</code></pre>
</div>
</div>
<p>Notice that the printing method shows <code>Geometry Type: Point</code> and also has a <code>Bounding box:</code>. That means we have effectively extended the <code>sdf</code> class by implementing our own methods for the exported generic functions from <code>sdf</code>. From that alone the <code>sdf</code> methods for dplyr can be used.</p>
<div class="cell">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">diamond_sdf</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/group_by.html">group_by</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">cut</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarise</a></span><span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/context.html">n</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Geometry Type: Point
Bounding box: xmin: 5.507 ymin: 5.52 xmax: 6.247 ymax: 6.183
# A tibble: 5 √ó 3
  cut           n               pnts
  &lt;ord&gt;     &lt;int&gt;            &lt;Point&gt;
1 Fair       1610 6.246894, 6.182652
2 Good       4906 5.838785, 5.850744
3 Very Good 12082 5.740696, 5.770026
4 Premium   13791 5.973887, 5.944879
5 Ideal     21551 5.507451, 5.520080</code></pre>
</div>
</div>
</section><section id="why-this-works" class="level3"><h3 class="anchored" data-anchor-id="why-this-works">Why this works</h3>
<p>The dplyr <code>sdf</code> methods work like a charm because they use generic functions. Take the <code><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarise()</a></code> method for example.</p>
<div class="cell">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;">sdf</span><span class="fu" style="color: #4758AB;">:::</span><span class="va" style="color: #111111;">summarise.sdf</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function(.data, ...) {
  geom_col_name &lt;- attr(.data, "geom_column")
  geom_col &lt;- .data[[geom_col_name]]
  gd &lt;- group_data(.data)

  summarized_geoms &lt;- lapply(gd$.rows, function(ids) combine_geometry(geom_col[ids]))

  res &lt;- NextMethod()

  res[[geom_col_name]] &lt;- rlang::inject(c(!!!summarized_geoms))
  as_sdf(res)

}
&lt;bytecode: 0x1066d0b00&gt;
&lt;environment: namespace:sdf&gt;</code></pre>
</div>
</div>
<p>This method uses the <code><a href="https://rdrr.io/pkg/sdf/man/generics.html">combine_geometry()</a></code> generic function. <code><a href="https://rdrr.io/pkg/sdf/man/generics.html">combine_geometry()</a></code> takes a vector of geometries (as determined by <code><a href="https://rdrr.io/pkg/sdf/man/generics.html">is_geometry()</a></code>) and returns a single element. The summarise method does not care which method is used. It only cares that the output is consistent‚Äîin this case that a scalar value is outputted and that multiple of those scalars can be combined using <code><a href="https://rdrr.io/r/base/c.html">c()</a></code>.</p>
</section><section id="another-example" class="level3"><h3 class="anchored" data-anchor-id="another-example">Another example</h3>
<p><a href="https://github.com/JosiahParry/sdf#implementing-geos-generics">For a more detailed example check out the section in the README that implements an sdf class for geos geometry</a>. If you‚Äôre interested in the details I recommend looking at the source code it is very simple.</p>
<p>First look at the <a href="https://github.com/JosiahParry/sdf/blob/main/R/generics.R">generic method definitions</a>. Then look at the <a href="https://github.com/JosiahParry/sdf/blob/main/R/sf-compat.R"><code>sf</code> compatibility methods</a>.</p>


</section></section> ]]></description>
  <category>rust</category>
  <category>r</category>
  <category>package-development</category>
  <category>tutorial</category>
  <guid>https://josiahparry.com/posts/2023-03-01-rust-traits-for-r-programmers/index.html</guid>
  <pubDate>Thu, 02 Mar 2023 05:00:00 GMT</pubDate>
  <media:content url="https://josiahparry.com/posts/2023-03-01-rust-traits-for-r-programmers/feRris.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Raw strings in R</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-01-19-raw-strings-in-r.html</link>
  <description><![CDATA[ <p>The one thing about Python I actually really like is the ability to use raw strings. Raw strings are super helpful for me because at work I use a windows machine. And windows machines use a silly file path convention. The <code>\</code> back slack character is used as the file separator as opposed to the linux / unix <code>/</code> forward slash.</p>
<p>Using the backslash is so annoying because it‚Äôs also an escape character. In python I can write the following to hard code a file path.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">file_path <span class="op" style="color: #5E5E5E;">=</span> <span class="vs" style="color: #20794D;">r"nav\to\file\path.ext"</span></span></code></pre></div>
<p>Whereas in R typically you would have to write:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">file_path</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="st" style="color: #20794D;">"nav\\to\\file\\path.ext"</span></span></code></pre></div>
<p>Since <code>\</code> is an escape character you have to escape it first using itself. So, its annoying. And <code>file.path("nav", "to", "file", "path.ext", fsep = "\\")</code> is a wee bit cumbersome sometimes.</p>
<section id="well-apparently-we-have-all-been-sleeping-on-raw-strings-in-r-since-version-4.0." class="level1"><h1>WELL APPARENTLY WE HAVE ALL BEEN SLEEPING ON RAW STRINGS IN R SINCE VERSION 4.0.</h1>
</section><section id="its-version-4.2.2" class="level1 page-columns page-full"><h1>IT‚Äôs VERSION 4.2.2</h1>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full"><p><img src="https://josiahparry.com/posts/https:/media.giphy.com/media/3o7TKA3ypeMbOXSrp6/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Damnit.</figcaption><p></p>
</figure>
</div>
<section id="aight." class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="aight.">Aight.</h2>
<p>So like, you can use raw strings today.</p>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="">How can I get the R-devel news? I‚Äôm on the mailing list and get it once a week and it‚Äôs like ‚ÄúRe: memory leak in png() ` not this stuff. Tips?</span></div></div>
<p>It was announced in the <a href="https://cran.r-project.org/doc/manuals/r-devel/NEWS.html">news for version 4.0.0</a>.</p>
<p>They write:</p>
<blockquote class="blockquote">
<p>There is a new syntax for specifying raw character constants similar to the one used in C++: r‚Äù(‚Ä¶)‚Äù with ‚Ä¶ any character sequence not containing the sequence ‚Äò‚Å†)‚Äú‚Å†‚Äô. This makes it easier to write strings that contain backslashes or both single and double quotes. For more details see ?Quotes.</p>
</blockquote>
<p>You can write raw strings using the following formats:</p>
<ul>
<li><code>r"( ... )"</code></li>
<li><code>r"{ ... }"</code></li>
<li><code>r"[ ... ]"</code></li>
<li><code>R"( ... )"</code></li>
<li><code>R"{ ... }"</code></li>
<li><code>R"[ ... ]"</code></li>
</ul>
<p>You can even trickier by adding dashes between the quote and the delimter. The dashes need to be symmetrical though. So the following is also valid.</p>
<ul>
<li><code>r"-{ ... }"-</code></li>
<li><code>r"--{ ... }--"</code></li>
<li><code>r"--{ * _ * }--"</code></li>
</ul>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="">It kinda looks like a crab</span></div></div>
<p>Alright so back to the example</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span> <span class="st" style="color: #20794D;">r"{nav\to\file\path.ext}"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "nav\\to\\file\\path.ext"</code></pre>
</div>
</div>
<p>Hot damn. Thats nice.</p>
<p>I freaked out at first though because R prints two backslashes. But if you cat the result they go away. So do not worry.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span> <span class="st" style="color: #20794D;">r"{nav\to\file\path.ext}"</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/cat.html">cat</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>nav\to\file\path.ext</code></pre>
</div>
</div>


</section></section> ]]></description>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2023-01-19-raw-strings-in-r.html</guid>
  <pubDate>Thu, 19 Jan 2023 05:00:00 GMT</pubDate>
  <media:content url="https://media.giphy.com/media/3o7TKA3ypeMbOXSrp6/giphy.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fishnets and overlapping polygons</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2022-11-17-overlapping-polys/post.html</link>
  <description><![CDATA[ <p>Today a question was asked in the geocompr discord. I wanted to share part of the solution as I think it covers 2 helpful things:</p>
<ul>
<li>making a fishnet grid</li>
<li>calculating the area of overlap between two polygons</li>
</ul>
<p>For this example I‚Äôm using data from the <a href="http://gis.atlantaga.gov/?page=OPEN-DATA-HUB">Atlanta GIS Open Data Portal</a>. Specifically using the <a href="https://dpcd-coaplangis.opendata.arcgis.com/maps/future-land-use-">future land use polygons</a>.</p>
<p>I‚Äôve downloaded a local copy of the data as a geojson. But you can read it using the ArcGIS Feature Server it is hosted on.</p>
<section id="objective" class="level3"><h3 class="anchored" data-anchor-id="objective">Objective</h3>
<p>Create a map of Atlanta, visualized as a hexagon grid, that displays the amount of planned mixed use zoning. This will be done in the following sequence:</p>
<ol type="1">
<li>Creating a fishnet (hexagon) grid over the city</li>
<li>Creating intersected polygons</li>
<li>Calculate the area of intersected polygons</li>
<li>Join back to the original fishnet grid</li>
<li>visualized.</li>
</ol></section><section id="mixed-use-zoning" class="level3"><h3 class="anchored" data-anchor-id="mixed-use-zoning">Mixed-use zoning</h3>
<p>Start by loading sf, dplyr, and ggplot2. sf for our spatial work, dplyr for making our lives easier, and ggplot2 for a bad map later.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://r-spatial.github.io/sf/">sf</a></span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;">)</span></span>
<span><span class="kw" style="color: #003B4F;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;"><a href="https://ggplot2.tidyverse.org">ggplot2</a></span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>We read in our data (mine is local). You can use the commented out code to read directly from the ArcGIS feature server.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># read from the ArcGIS feature server</span></span>
<span><span class="co" style="color: #5E5E5E;"># st_read("https://services5.arcgis.com/5RxyIIJ9boPdptdo/arcgis/rest/services/Land_Use_Future/FeatureServer/0/query?outFields=*&amp;where=1%3D1&amp;f=geojson")</span></span>
<span></span>
<span><span class="va" style="color: #111111;">future_land_use</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_read.html">read_sf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Future_Land_Use_.geojson"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span>geometry <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/valid.html">st_make_valid</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">geometry</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>Let‚Äôs look at the different land use descriptions.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">future_land_use</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_geometry.html">st_drop_geometry</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/count.html">count</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">LANDUSEDESC</span>, sort <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;">reactable</span><span class="fu" style="color: #4758AB;">::</span><span class="fu" style="color: #4758AB;"><a href="https://glin.github.io/reactable/reference/reactable.html">reactable</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">

<div id="htmlwidget-3e3e55b8cb15dc83d1c2" class="reactable html-widget" style="width:auto;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-3e3e55b8cb15dc83d1c2">{"x":{"tag":{"name":"Reactable","attribs":{"data":{"LANDUSEDESC":["Open Space","Low-Density Commercial","Medium-Density Residential","Low-Density Residential","Mixed-Use","Single-Family Residential","High-Density Residential","Community Facilities","Industrial","Office/Institutional","Mixed-Use Medium-Density","Mixed-Use Low-Density","Mixed-Use High-Density","High-Density Commercial","Very High-Density Residential","Mixed Use-High Density","Transportation/Communications/Utilities","Mixed Use-Low Density","Office/Institutional/Residential","Private Open Space","High-Density Mixed-Use","Mixed Use-Medium Density","Business Park","Industrial-Mixed Use",null],"n":[385,275,266,179,137,115,112,89,81,50,34,33,23,22,22,8,7,6,4,4,3,2,1,1,1]},"columns":[{"accessor":"LANDUSEDESC","name":"LANDUSEDESC","type":"character"},{"accessor":"n","name":"n","type":"numeric"}],"defaultPageSize":10,"paginationType":"numbers","showPageInfo":true,"minRows":1,"dataKey":"4a1d8d25069ae7bd8fdfc3bff4613cb0","key":"4a1d8d25069ae7bd8fdfc3bff4613cb0"},"children":[]},"class":"reactR_markup"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>To see a disgusting map with a bad legend run the following.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">future_land_use</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>fill <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">LANDUSEDESC</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;">(</span>lwd <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.15</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
</div>
<p>We can see that there are a bunch of different descriptions for different types of mixed use zoning. Let‚Äôs filter down to descriptions that have <code>"Mixed-Use"</code> or <code>"Mixed Use"</code> and visualize them.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># how much area of mixed use land use?</span></span>
<span><span class="va" style="color: #111111;">mixed_use</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">future_land_use</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/grep.html">grepl</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Mixed-Use|Mixed Use"</span> , <span class="va" style="color: #111111;">LANDUSEDESC</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;">(</span>data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">mixed_use</span>, fill <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"blue"</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">NA</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2022-11-17-overlapping-polys/post_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section><section id="making-a-fishnet-grid" class="level3"><h3 class="anchored" data-anchor-id="making-a-fishnet-grid">Making a fishnet grid</h3>
<p>Having made a fishnet grid quite a few times, I‚Äôve got this handy function. In essence we create a grid over our target geometry and we keep only those locations from the grid that intersect eachother. If we dont‚Äô, we have a square shaped grid.</p>
<p>It is important that you create an ID for the grid, otherwise when we intersect later you‚Äôll not know what is being intersected.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">make_fishnet</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">geometry</span>, <span class="va" style="color: #111111;">n</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">10</span>, <span class="va" style="color: #111111;">hex</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">TRUE</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span>  <span class="va" style="color: #111111;">g</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_make_grid.html">st_make_grid</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">geometry</span>, square <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">!</span><span class="va" style="color: #111111;">hex</span>, n <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">n</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span>  <span class="va" style="color: #111111;">g</span><span class="op" style="color: #5E5E5E;">[</span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/lengths.html">lengths</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/geos_binary_pred.html">st_intersects</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">g</span>, <span class="va" style="color: #111111;">geometry</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="fl" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> </span>
<span><span class="op" style="color: #5E5E5E;">}</span></span>
<span></span>
<span></span>
<span><span class="va" style="color: #111111;">grd</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;">make_fishnet</span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">future_land_use</span>, n <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">40</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sf.html">st_as_sf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span>hex_id <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/row_number.html">row_number</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">grd</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2022-11-17-overlapping-polys/post_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Man, I love maps of sequential IDs.</p>
<p>Next, we split our mixed use polygons based on the hexagons.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># how much area in each hexagon</span></span>
<span><span class="va" style="color: #111111;">lu_intersects</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/geos_binary_ops.html">st_intersection</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">mixed_use</span>, <span class="va" style="color: #111111;">grd</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: attribute variables are assumed to be spatially constant throughout all
geometries</code></pre>
</div>
</div>
<p>Then we calculate the area of each resultant shape.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;">overlap_area</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="va" style="color: #111111;">lu_intersects</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;">(</span>area <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/geos_measures.html">st_area</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">geometry</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span></span>
<span><span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">overlap_area</span><span class="op" style="color: #5E5E5E;">[</span>, <span class="st" style="color: #20794D;">"area"</span><span class="op" style="color: #5E5E5E;">]</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2022-11-17-overlapping-polys/post_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The next step here is to take the split polygons, and join the data back to the hexagons. I use a right join because they don‚Äôt get enough love. And also because if you try to do a join with two sf objects they‚Äôll scream!!.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;"># join it back to the grid</span></span>
<span><span class="va" style="color: #111111;">hex_area_overlap</span> <span class="op" style="color: #5E5E5E;">&lt;-</span> <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_geometry.html">st_drop_geometry</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">overlap_area</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/select.html">select</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">hex_id</span>, <span class="va" style="color: #111111;">area</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://dplyr.tidyverse.org/reference/mutate-joins.html">right_join</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">grd</span>, by <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"hex_id"</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://r-spatial.github.io/sf/reference/st_as_sf.html">st_as_sf</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> </span>
<span></span>
<span><span class="va" style="color: #111111;">hex_area_overlap</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 1381 features and 2 fields
Geometry type: POLYGON
Dimension:     XY
Bounding box:  xmin: -84.55738 ymin: 33.64417 xmax: -84.28635 ymax: 33.88926
Geodetic CRS:  WGS 84
# A tibble: 1,381 √ó 3
   hex_id    area                                                              x
    &lt;int&gt;   [m^2]                                                  &lt;POLYGON [¬∞]&gt;
 1     72 160485. ((-84.5182 33.65548, -84.52146 33.65737, -84.52146 33.66114, ‚Ä¶
 2     84  44538. ((-84.51493 33.64983, -84.5182 33.65171, -84.5182 33.65548, -‚Ä¶
 3     85 176134. ((-84.51493 33.66114, -84.5182 33.66302, -84.5182 33.66679, -‚Ä¶
 4     87   5049. ((-84.51493 33.68376, -84.5182 33.68565, -84.5182 33.68942, -‚Ä¶
 5     97 380145. ((-84.51167 33.65548, -84.51493 33.65737, -84.51493 33.66114,‚Ä¶
 6    100 110821. ((-84.51167 33.68942, -84.51493 33.6913, -84.51493 33.69507, ‚Ä¶
 7    106   8232. ((-84.51167 33.75729, -84.51493 33.75917, -84.51493 33.76294,‚Ä¶
 8    110 109249. ((-84.5084 33.64983, -84.51167 33.65171, -84.51167 33.65548, ‚Ä¶
 9    111 150687. ((-84.5084 33.66114, -84.51167 33.66302, -84.51167 33.66679, ‚Ä¶
10    113 141654. ((-84.5084 33.68376, -84.51167 33.68565, -84.51167 33.68942, ‚Ä¶
# ‚Ä¶ with 1,371 more rows
# ‚Ñπ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>Now plot it!</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">hex_area_overlap</span>, <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;">(</span>fill <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;"><a href="https://rdrr.io/r/base/numeric.html">as.numeric</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="va" style="color: #111111;">area</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;">(</span>color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.15</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;">(</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/scale_viridis.html">scale_fill_viridis_c</a></span><span class="op" style="color: #5E5E5E;">(</span></span>
<span>    option <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"plasma"</span>, </span>
<span>    na.value <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span>    labels <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">scales</span><span class="fu" style="color: #4758AB;">::</span><span class="va" style="color: #111111;"><a href="https://scales.r-lib.org/reference/comma.html">comma</a></span></span>
<span>    <span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">labs</a></span><span class="op" style="color: #5E5E5E;">(</span>fill <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Area of mixed-use zoning (m)"</span><span class="op" style="color: #5E5E5E;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2022-11-17-overlapping-polys/post_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section> ]]></description>
  <category>r</category>
  <category>spatial</category>
  <category>tutorial</category>
  <guid>https://josiahparry.com/posts/2022-11-17-overlapping-polys/post.html</guid>
  <pubDate>Thu, 17 Nov 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Make your R scripts Databricks notebooks</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2022-05-11-make-your-r-scripts-databricks-notebooks.html</link>
  <description><![CDATA[ 



<p>I‚Äôve never had a good reason to deviate from the canonical <code>.R</code> file extension until today.</p>
<p>As you may have seen over the past few month from my numerous rage-tweets and <a href="https://twitter.com/JosiahParry/status/1517195634293489664">Databricks related threads</a>, I‚Äôve been doing <em>a lot</em> of work getting figuring out Databricks as an R user so we can get onboard with adoption here at NPD.</p>
<p>One of my biggest qualms about Databricks is that it‚Äôs tailored to their notebooks. The notebooks get magical superpowers that aren‚Äôt available anywhere else. Notebooks get root permissions, they have access to <code>dbutils</code>, and are the only thing that can actually be scheduled by Databricks outside of a jar file or SparkSQL code.</p>
<p>I‚Äôve spent quite a bit of time thinking about how we can schedule R scripts through a notebook. If you‚Äôre wondering, have the notebook kickoff the R script with a shell command.</p>
<p>But, alas, I‚Äôve learned something today. If you connect your Git repo to Databricks through their <code>"Repos"</code>, you can have your R scripts be accessible as notebooks with quite literally only two changes.</p>
<p>First, R scripts need to have the less-preferable, though equally functional, file extension <code>.r</code>. Second, the first line of the script should be a comment that says <code># Databricks notebook source</code>. And that‚Äôs it. Then once the git repo has been connected, it will recognize those as notebooks.</p>
<p>If you want to create cells in your code write a comment <code># COMMAND ----------</code>‚Äîthat‚Äôs 10 hyphens at the end.</p>
<p>If you create a file <code>main.r</code> which contains the body</p>
<pre><code># Databricks notebook source

print("Hello world")

# COMMAND ---------

print("Databricks! I've figured you out‚Äîsorta....")

# COMMAND ---------

print("I feel powerful.")</code></pre>
<p>You will have an R script that is recognized as a notebook by Databricks that can be scheduled using Databricks‚Äô scheduling wizard.</p>



 ]]></description>
  <category>databricks</category>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2022-05-11-make-your-r-scripts-databricks-notebooks.html</guid>
  <pubDate>Wed, 11 May 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Installing Python on my M1 in under 10 minutes</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2022-02-12-installing-python-on-my-m1-in-under-10-minutes.html</link>
  <description><![CDATA[ 



<p>Installing python has never been an easy task for me. I remember back in 2016 I wanted to learn how to use pyspark and thus python, I couldn‚Äôt figure out how to install python so I gave up. In graduate school I couldn‚Äôt install python so I used a docker container my professor created and never changed a thing. When working at RStudio I used the Jupyter Lab instance in RStudio Workbench when I couldn‚Äôt install it locally.</p>
<p>Now, I want to compare pysal results to some functionality I‚Äôve written in R. To do that, I need a python installation. I‚Äôve heard extra horror stories about installing Python on the new Mac M1 chip‚Äîwhich I have.</p>
<div class="page-columns page-full"><p>Prior to installing, I took to twitter for suggestions. I received the phenomenal tweet below encouraging me to install with <a href="https://rstudio.github.io/reticulate/"><code>{reticulate}</code></a><sup>1</sup> which was absolutely phenomenal advice.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;is a package that lets you call python from R.</p></li></div></div>
<blockquote class="twitter-tweet blockquote">
<p lang="es" dir="ltr">
reticulate::install_miniconda() üòâ
</p>
‚Äî Kevin Ushey (<span class="citation" data-cites="kevin_ushey">@kevin_ushey</span>) <a href="https://twitter.com/kevin_ushey/status/1491188923292581888?ref_src=twsrc%5Etfw">February 8, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<section id="installing-python" class="level2">
<h2 class="anchored" data-anchor-id="installing-python">Installing Python</h2>
<p>The steps to install python, at least for me, was <em>very</em> simple.</p>
<ol type="1">
<li>Install reticulate</li>
<li>Install miniconda</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"reticulate"</span>)</span>
<span id="cb1-2">reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_miniconda</span>()</span></code></pre></div>
<p>That‚Äôs it. That‚Äôs all it took.</p>
</section>
<section id="creating-my-first-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-my-first-conda-environment">Creating my first conda environment</h2>
<p>After installing python, I restarted R, and began building my first conda environment. I created a conda environment called <code>geo</code> for my geospatial work. I installed <code>libpysal</code>, <code>geopandas</code>, and <code>esda</code>. These installed every other dependency I needed‚Äìe.g.&nbsp;<code>pandas</code>, and <code>numpy</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">conda_create</span>(<span class="st" style="color: #20794D;">"geo"</span>)</span>
<span id="cb2-2">reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_condaenv</span>(<span class="st" style="color: #20794D;">"geo"</span>)</span>
<span id="cb2-3">reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">conda_install</span>(<span class="st" style="color: #20794D;">"geo"</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"libpysal"</span>, <span class="st" style="color: #20794D;">"geopandas"</span>, <span class="st" style="color: #20794D;">"esda"</span>))</span></code></pre></div>
</section>
<section id="using-my-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="using-my-conda-environment">Using my conda environment</h2>
<p>To begin using my new conda environment, I opened up a fresh R session and a fresh R Markdown document. In my first code chunk I told reticulate which conda environment to use. Then my following code chunks were python which opened up the python repl. Make sure that you start your code chunk with <code>```{python}</code></p>
<div class="highlight">
<pre class="chroma"><code class="language-r" data-lang="r"><span class="nf">reticulate</span><span class="nf">::</span><span class="nf"><a href="https://rstudio.github.io/reticulate/reference/use_python.html">use_condaenv</a></span><span class="o">(</span><span class="s">"geo"</span><span class="o">)</span></code></pre>
</div>
<p>In the following example I utilize <code>esda</code> to calculate a local join count.</p>
<div class="highlight">
<pre class="chroma"><code class="language-r" data-lang="r">import libpysal
import geopandas as gpd
from esda.join_counts_local import Join_Counts_Local

fp = libpysal.examples.root + "/guerry/" + "Guerry.shp" 

guerry_ds = gpd.read_file(fp)
guerry_ds['SELECTED'] = 0
guerry_ds.loc[(guerry_ds['Donatns'] &gt; 10997), 'SELECTED'] = 1

w = libpysal.weights.Queen.from_dataframe(guerry_ds)

LJC_uni = Join_Counts_Local(connectivity=w).fit(guerry_ds['SELECTED'])

LJC_uni.p_sim</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">## array([  nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan, 0.435,   nan, 0.025, 0.025,   nan, 0.328,</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan, 0.342,   nan, 0.334,</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan, 0.329,   nan,   nan,</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan, 0.481,</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;">##          nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,   nan,</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">##          nan,   nan, 0.02 ,   nan,   nan,   nan,   nan,   nan, 0.125,</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">##          nan, 0.043,   nan,   nan])</span></span></code></pre></div>


</section>


 ]]></description>
  <category>python</category>
  <category>r</category>
  <category>reticulate</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2022-02-12-installing-python-on-my-m1-in-under-10-minutes.html</guid>
  <pubDate>Sat, 12 Feb 2022 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
