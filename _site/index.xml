<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Josiah Parry</title>
<link>https://josiahparry.com/</link>
<atom:link href="https://josiahparry.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.489</generator>
<lastBuildDate>Thu, 13 Jun 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Caching WebR from CDN</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-06-13-caching-webr.html</link>
  <description><![CDATA[ 




<p>I am developing Rust bindings to <a href="https://webr.r-wasm.org/">WebR</a>. Because WebR is not compiled for WASI and only WebAssembly, native Rust bindings are not possible. Instead, bindings are done through <a href="https://rustwasm.github.io/docs/wasm-bindgen/">wasm-bindgen</a> which creates bindings to JavaScript.</p>
<p>The WIP Rust crate is called <a href="https://github.com/JosiahParry/webr-js-rs/"><code>webr-js-rs</code></a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I‚Äôm building these bindings to support <strong><a href="https://flrsh.dev/">flrsh.dev</a></strong>.</p>
<p>Sign up for an account to be notified when I launch our first course (a deep dive on DuckDB)!</p>
</div>
</div>
<p><code>webr-js-rs</code> works <em>only</em> on wasm targets.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>See <a href="https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/">this informative blog post</a> from Mozilla on what WASI is.</li>
<li>There is an <a href="https://github.com/r-wasm/webr/issues/166">outstanding issue</a> on the WebR GitHub.</li>
</ul>
</div>
</div>
<p>The problem I was encountering:</p>
<p><strong>WebR wasn‚Äôt caching the binaries!</strong></p>
<p>Turns out that this is because my code had this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>wasm_bindgen<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://webr.r-wasm.org/latest/webr.mjs"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span></code></pre></div>
<p>I brought this issue up in a GitHub issue. <a href="https://github.com/georgestagg"><span class="citation" data-cites="GeorgeStagg">@GeorgeStagg</span></a> pointed out</p>
<blockquote class="blockquote">
<p>‚ÄúThe webR CDN assets under /latest/ are intentionally served with Cache-Control: no-cache so that the latest commit is always downloaded by the browser.‚Äù</p>
</blockquote>
<p>This makes sense! It means since there is no cache instruction, it will fetch the binaries every time! Instead he recommended to use a tagged version</p>
<blockquote class="blockquote">
<p>‚ÄúThe longer-term builds under e.g.&nbsp;/v0.3.3/ are served with the HTTP header cache-control: max-age=604800, and so the webR assets should automatically be <strong>cached by browsers for 1 week</strong>.‚Äù</p>
</blockquote>
<p>üëÜüèº emphasis mine.</p>
<p>This works! So I‚Äôve changed webr-js-rs to use a fixed version.</p>
<p>The one challenge with this, though, is that even though the binaries are cached, the R session will be restarted from scratch if the browser is refreshed. So that is something I need to figure out next!</p>



 ]]></description>
  <category>webr</category>
  <category>rust</category>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2024-06-13-caching-webr.html</guid>
  <pubDate>Thu, 13 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Docker: keep your secrets secret</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-06-11-docker-env-vars/</link>
  <description><![CDATA[ 




<p>You‚Äôve written a shiny app, plumber API, or an ETL process. Your orchestrating that work with Docker. In order for the application to work, you need to be able to use secret values.</p>
<blockquote class="blockquote">
<p>How can you use secrets with a Docker image safely?</p>
</blockquote>
<section id="example-dockerfile" class="level2">
<h2 class="anchored" data-anchor-id="example-dockerfile">Example Dockerfile</h2>
<p>Here is a very simple Dockerfile. Say the container is called <code>supersecret</code>. When we run the Docker container we print a single environment variable.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rhub/r-minimal</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--slave"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat(Sys.getenv('SECRET_USER'))"</span>]</span></code></pre></div>
<p>Run this with <code>docker run --rm -t supersecret</code> and you‚Äôll see nothing printed to the console. This is because the environment variable is not actually available to the container.</p>
<p>How can you set the environment variables used by a container?</p>
</section>
<section id="the-env-instruction" class="level2">
<h2 class="anchored" data-anchor-id="the-env-instruction">The <code>ENV</code> instruction</h2>
<p>The <code>ENV</code> Docker instruction is used to specify environment variables You can specify environment variables directly into the Dockerfile like so:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rhub/r-minimal</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENV</span> SECRET_USER=josiah</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--slave"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat(Sys.getenv('SECRET_USER'))"</span>]</span></code></pre></div>
<p>Running <code>docker run --rm -t supersecret</code> will print <code>josiah</code> to the console! So that worked.</p>
<p>This is fine for things that dont need to be secret. For example maybe you have something like <code>ENV DEBUG=true</code> to specify that this is a debug build.</p>
<p>But if you have a secret, <strong>you shouldn‚Äôt place your secrets directly in the code of the Dockerfile</strong>.</p>
</section>
<section id="using---env" class="level2">
<h2 class="anchored" data-anchor-id="using---env">Using <code>--env</code></h2>
<p>Another way to specify environment variables is to specify the environment variables at run time using the <code>--env</code> flag. This accepts key-value pairs for the environment variables.</p>
<p>For example</p>
<pre><code>docker run --env SECRET_USER="ricky bobby" --rm -t supersecret</code></pre>
<p>will print <code>ricky bobby</code> to the console.</p>
<p>This will work but it requires that you manually specify the environment variables at run time when using <code>docker run</code>. And that can be cumbersome and require some finagling.</p>
<p>And again, you dont want to write a bash script that hard codes those values into a <code>docker run</code> call.</p>
<p>So what else can you do?</p>
</section>
<section id="using-a-separate-file-with---env-file" class="level2">
<h2 class="anchored" data-anchor-id="using-a-separate-file-with---env-file">Using a separate file with <code>--env-file</code></h2>
<p>You shouldn‚Äôt store secrets in your R code. You should use a <code>.Renviron</code> file. This looks like</p>
<pre class="shell"><code>KEY=value
SECRET_USER=josiah
SECRET_USER_PASSWORD=super-duper-very-secret</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>In many other languages and ecosystem, using a <code>.env</code> file with the same structure is used to set environment variables.</p>
</div>
</div>
<p>This would make the environment variables <code>KEY</code>, <code>SECRET_USER</code> and <code>SECRET_USER_PASSWORD</code> available to your R session by running <code>Sys.getenv()</code>.</p>
<p>Now, you don‚Äôt want to actually copy this file into the docker container. What if you accidentally made the file available? Yikes!</p>
<p>Instead, you can pass the file directly using the <code>--env-file</code> flag. This will capture the environment variables written in a file as a <code>KEY=value</code> pair and make them available in your container.</p>
<section id="docker-run-with-file" class="level3">
<h3 class="anchored" data-anchor-id="docker-run-with-file">docker run with file</h3>
<p>Given the following files which define a Docker image called <code>supersecret</code></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.env</strong></pre>
</div>
<pre class="shell" data-filename=".env"><code>SECRET_USER=shhhh-dont-tell</code></pre>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<pre class="docker" data-filename="Dockerfile"><code>FROM rhub/r-minimal

CMD [ "R", "--slave", "-e", "cat(Sys.getenv('SECRET_USER'))"]</code></pre>
</div>
</div>
</div>
</div>
<p>You will need to run <code>docker run --env-file .env supersecret</code> to set your environment variables appropriately.</p>


</section>
</section>

 ]]></description>
  <category>production</category>
  <category>docker</category>
  <guid>https://josiahparry.com/posts/2024-06-11-docker-env-vars/</guid>
  <pubDate>Thu, 13 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Making a Ridiculously Fast‚Ñ¢ API Client</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-06-06-designing-arcgisgeocode.html</link>
  <description><![CDATA[ 




<p>I recently had the pleasure of publishing the R package <a href="https://github.com/R-ArcGIS/arcgisgeocode/"><code>{arcgisgeocode}</code></a>. It is an R interface to the <a href="https://www.esri.com/en-us/arcgis/products/arcgis-world-geocoder">ArcGIS World Geocoder</a>. You could say it is the ‚Äúofficial‚Äù Esri geocoding R package.</p>
<p>To my knowledge, <strong>it is the fastest geocoding library available in the R ecosystem</strong>. The ArcGIS World Geocoder is made avialable through <a href="https://jessecambon.github.io/tidygeocoder/"><code>{tidygeocoder}</code></a> as well as <a href="https://dieghernan.github.io/arcgeocoder/"><code>{arcgeocoder}</code></a>.</p>
<p><code>{arcgisgeocode}</code> provides the full functionality of the World Geocoder which includes bulk geocoding functionality which the other two do not. The other two packages provide an interface to the <a href="https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm"><code>/findAddressCandidates</code></a> and <a href="https://developers.arcgis.com/rest/geocode/api-reference/geocoding-reverse-geocode.htm"><code>/reverseGeocode</code></a> API endpoints. The former provides single address <strong>forward geocoding</strong> and the latter provides <strong>reverse geocoding</strong>.</p>
<p><code>{arcgisgeocode}</code> is <strong>~17x faster</strong> when performing single address geocoding and <strong>~40x faster</strong> when performing reverse geocoding when compared to the community counterparts. There are 2 primary reasons why this is.</p>
<p>The prolific <a href="https://kylebarron.dev/">Kyle Barron</a> responded to one of my tweets a few months ago.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
isn't geocoding always bottlenecked by the server?
</p>
‚Äî Kyle Barron <span class="citation" data-cites="kylebarron">@kylebarron</span><span class="citation" data-cites="mapstodon.space">@mapstodon.space</span> (<span class="citation" data-cites="kylebarron2">@kylebarron2</span>) <a href="https://twitter.com/kylebarron2/status/1773509095024107756?ref_src=twsrc%5Etfw">March 29, 2024</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This statement is true in an aboslute sense. But then if it is only the server that is the bottle neck, why does <code>{arcgisgeocode}</code> out-perform two other packages calling <strong>the exact same API endpoints</strong>?</p>
<p>The reasons are primarily two-fold.</p>
<section id="json-parsing-is-slow" class="level1 page-columns page-full">
<h1>JSON parsing is slow</h1>
<p>The first is that both tidygeocoder and arcgeocoder rely on <a href="https://cran.r-project.org/web/packages/jsonlite/index.html"><code>{jsonlite}</code></a> to both encode json and parse json. I have said it many times before and I‚Äôll say it again‚Äîjsonlite was a revolutionary R package but it has proven to be <em>slow</em>.</p>
<p>The way that these API requests work is that we need to craft JSON from R objects, inject them into our API request, and then process the JSON that we get back from the server.</p>
<p>Encoding R objects as text strings is slow. Reading text and converting them back into R objects is also slow.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>This is tangentially why Apache Arrow is so amazing. It uses the same memory layout regardless of where you are. If we were using Arrow arrays and the API received <a href="https://arrow.apache.org/docs/python/ipc.html">Arrow IPC</a> and sent Arrow IPC, we would be able serialize and deserialize much faster!!!!</p>
</div></div><section id="handling-json-with-serde" class="level2">
<h2 class="anchored" data-anchor-id="handling-json-with-serde">Handling JSON with serde</h2>
<p><a href="https://docs.rs/serde_json">serde_json</a> is a Rust crate that handles <strong>ser</strong>ialization and <strong>de</strong>serialization of Rust structs. It takes the guess work out of encoding and decoding JSON responses because it requires that we specify what the json will look like. <code>{arcgisgeocode}</code> uses <code>serde_json</code> to perform JSON serialization and deserialization.</p>
<p>For example I have the following <a href="https://github.com/R-ArcGIS/arcgisgeocode/blob/62edfcccc572f2fa518095b2d85acc0c1d041c9c/src/rust/src/batch_geocode.rs#L26-L43">struct definition</a></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    objectid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>serde<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>rename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"singleLine"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-4">    single_line<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-5">    address<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-6">    address2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-7">    address3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-8">    neighborhood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-9">    city<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-10">    subregion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-11">    region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-12">    postal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>serde<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>rename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postalExt"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-14">    postal_ext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>serde<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>rename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"countryCode"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb1-16">    country_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-17">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>EsriPoint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>These struct definitions plus serde_json all coupled with the <a href="https://github.com/extendr/extendr"><code>extendr</code></a> library means that I can process and create JSON extremely fast!</p>
</section>
</section>
<section id="using-a-request-pool" class="level1">
<h1>Using a request pool</h1>
<p>Both <code>{tidygeocoder}</code> and <code>{arcgeocoder}</code> both use <a href="https://httr.r-lib.org/"><code>{httr}</code></a> whereas <code>{arcgisgeocode}</code> uses <a href="https://httr2.r-lib.org/"><code>{httr2}</code></a>. There may be speed-ups inherent in switching.</p>
<p>But the primary difference is that in <code>{arcgisgeocode}</code>, we use a <a href="https://httr2.r-lib.org/reference/req_perform_parallel.html"><code>req_perform_parallel()</code></a> with a small connection pool. This allows for multiple workers to be handling requests concurrently. That means there is less time being spent waiting for each request to be handled and then processed by our R code.</p>
<p>Note that with great power comes great responsibility. Using <code>req_perform_parallel()</code> without care may lead to accidentally committing a <a href="https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/">DDoS attack</a>. For that reason we use a conservative number of workers.</p>
</section>
<section id="closing-notes" class="level1">
<h1>Closing notes</h1>
<p>While Kyle is correct in the absolute sense, that the bottleneck of performance does come down to the geocoding service, it is also true that the clients that we write to call these services might be adding additional performance overhead.</p>
<p>To improve performance, I would recommend identifying the slowest part and making it faster. In general, when it comes to API clients, this is almost always the <strong>(de)serialization</strong> and the request handling.</p>
<p>I don‚Äôt expect everyone to learn how to write Rust. But you can make informed decisions about what libraries you are using.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Learn how to parse json with Rust
</div>
</div>
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/embed/f2HfHlYQLks?si=NO5VOZRLBola3qVE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
</div>
</div>
<p>If you are using <code>jsonlite</code> and you care about performance. Stop that. I strongly recommend using RccpSimdJson (for parsing only), yyjson (for both), and jsonify‚Äîin that order. You will find your code to be <em>much faster</em>.</p>
<p>Next, if you are making multiple requests to the same endpoint. Consider using a small worker pool using <code>req_perform_parallel()</code> and then watch how the speed improves.</p>


</section>

 ]]></description>
  <guid>https://josiahparry.com/posts/2024-06-06-designing-arcgisgeocode.html</guid>
  <pubDate>Thu, 06 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>IndexMap instead of BTreeMap</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-27-indexmap-rs.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level1">
<h1>TL;DR</h1>
<ul>
<li><code>HashMap&lt;K, V&gt;</code> is useful when you have a value that you need to fetch frequently based on a specific key. With a hashmap, the <strong>order does not matter</strong>.</li>
<li><code>BTreeMap&lt;K, V&gt;</code> is a hashmap but it keeps track of the order of the keys. In a BtreeMap, <strong>order matters</strong>.</li>
<li><code>IndexMap&lt;K,V&gt;</code> is like a BTreeMap but the <strong>order is defined by insertion order</strong>.</li>
</ul>
<section id="btreemaps-ordering" class="level2">
<h2 class="anchored" data-anchor-id="btreemaps-ordering">BTreeMaps &amp; ordering</h2>
<p>When I am programming in Rust, I often need to use either a <code>HashMap&lt;K, V&gt;</code> or a <code>BTreeMap&lt;K, V&gt;</code>. In the case of a BTreeMap, the order is based on the key values. For example if they are strings, the ordering is done alphabetically. Or if the value is numeric, it is done based on that. Or whatever other <code>Ord</code> trait you may have implemented or derived.</p>
</section>
<section id="when-insertion-is-important" class="level2">
<h2 class="anchored" data-anchor-id="when-insertion-is-important">When insertion is important</h2>
<p>In another usecase, I want to fetch keys or values <strong>based on the order they were inserted</strong>. That is where <a href="https://docs.rs/indexmap/latest/indexmap/"><code>IndexMap</code></a> is helpful! IndexMap will iterate through the keys or values in the same order they were inserted.</p>
<p>In my current usecase, I am creating a <a href="https://docs.rs/lazy_static/latest/lazy_static/">lazy_static</a> <code>IndexMap</code> that contains course content for <a href="https://flrsh.dev"><code>flrsh.dev</code></a> (pronounced flourish).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">lazy_static::lazy_static!</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ref</span> COURSE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> IndexMap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">mut</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">IndexMap::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">serde_json::from_str::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>CourseContent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">body::</span>COURSE_BODY)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">        content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_iter()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>for_each(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>exercise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">            m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert(exercise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>slug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> exercise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>body)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">        m</span>
<span id="cb1-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The IndexMap is created by parsing the JSON file using <a href="https://docs.rs/serde_json"><code>serde_json</code></a>.</p>
<p>The JSON file looks roughly like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"slug"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"body"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"slug"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"body"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"slug"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"body"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>This gives me a <code>Vec&lt;CourseContent&gt;</code> which has two fields and the slug is the key and the body is the exercise. This is great because the JSON has the content in order and I need to be able to fetch it in order.</p>
<p>Ordering matters to me because I am using this IndexMap to update the navigationbar. We want to make sure that the next slug is not random!</p>


</section>
</section>

 ]]></description>
  <category>rust</category>
  <guid>https://josiahparry.com/posts/2024-05-27-indexmap-rs.html</guid>
  <pubDate>Mon, 27 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>{duckdb} or {duckplyr}?</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-24-duckdb-and-r.html</link>
  <description><![CDATA[ <p>I‚Äôve been diving pretty deep into DuckDB. It has shown that it has great utility for the vast majority of mid to large scale data analysis tasks‚ÄîI‚Äôm talking Gigabytes not Petabytes. In particular, <a href="https://github.com/krlmlr">Kirill M√ºller</a> of <a href="https://cynkra.com/">Cynkra</a>, has been doing great work in bringing DuckDB to the R community.</p>
<p>Today, this takes the form of two R packages:</p>
<ul>
<li><a href="https://r.duckdb.org/"><code>{duckdb}</code></a></li>
<li><a href="https://duckdblabs.github.io/duckplyr/"><code>{duckplyr}</code></a></li>
</ul>
<p>I think the R community would <strong>benefit greatly</strong> by adopting DuckDB into their analytic workflows. It can used to make highly performant shiny applications or just speed up your workflow.</p>
<p>For example, here is a demo of a Shiny application filtering, plotting, and visualizing 4.5 million records very quickly!</p>
<p><img src="https://raw.githubusercontent.com/flrsh-dev/flrsh-lessons/main/duckdb-deep-dive/project/final-app.gif" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
a personal note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I‚Äôm beginning to build out some content for courses that I‚Äôll be making availble through my new website <a href="https://flrsh.dev/">flrsh.dev</a> (pronounced flourish). Sign up if you want to be notified when we start rolling things out üôÉ.</p>
<p>The first course will be on DuckDB!</p>
<p>Also, if it takes a while to load, thats because the provider is spinning up an instance because no one is on it lol! It is very much a <strong>WIP</strong>.</p>
</div>
</div>
</div>
<section id="yall-keep-asking-me-duckdb-or-duckplyr" class="level2"><h2 class="anchored" data-anchor-id="yall-keep-asking-me-duckdb-or-duckplyr">Y‚Äôall keep asking me <code>{duckdb}</code> or <code>{duckplyr}</code>
</h2>
<p>and before I tell you what my answer is, I‚Äôll tell you why I‚Äôm bullish on DuckDB. I won‚Äôt ramble on details.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Jargon giraffe ü¶í: bullish!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bullish is a term that is associated with a growing stock market. Think of the upward motion of their horns. People who are ‚Äúbullish‚Äù would spend more money in the stock market expecting its prices to continue to rise and thus make more moneyyy üí∏üí∏üí∏</p>
</div>
</div>
</div>
</section><section id="why-duckdb" class="level2"><h2 class="anchored" data-anchor-id="why-duckdb">Why DuckDB?</h2>
<ul>
<li>Supports <strong>larger-than-memory</strong> workloads</li>
<li>Columnar vectorized operations means <strong>operating only on the data you need</strong> to and more of it and faster!</li>
<li>Tight <a href="https://arrow.apache.org/docs/r/">Apache Arrow</a> integration!</li>
<li>Supports <a href="https://substrait.io/">Substrait</a> for database agnostic query plans</li>
<li>Runs in the browser (think <a href="https://shinylive.io/r/examples/">ShinyLive</a> + DuckDB means fast compute all running in the browser without a Shiny server)</li>
<li>_ It is stupid fast_</li>
</ul></section><section id="my-verdict" class="level2"><h2 class="anchored" data-anchor-id="my-verdict">My verdict?</h2>
<p>The thing that is most important, in my opinion, for DuckDBs ability to be useful to the R community is its ability to work on data that is larger than RAM. <a href="https://duckdb.org/2024/03/29/external-aggregation.html">Read this awesome blog post</a>.</p>
<div class="display-1">
<blockquote class="blockquote">
<p>Use <a href="https://r.duckdb.org/">duckdb</a>!!!</p>
</blockquote>
</div>
<section id="duckplyr" class="level3"><h3 class="anchored" data-anchor-id="duckplyr"><code>{duckplyr}</code></h3>
<p>The R package <a href="https://duckdblabs.github.io/duckplyr/">duckplyr</a> is a <strong>drop in replacement for dplyr</strong>. duckplyr operates only on data.frame objects and, as of today, only works with in memory data. This means it is limited to the size of your machine‚Äôs RAM.</p>
</section><section id="duckdb" class="level3"><h3 class="anchored" data-anchor-id="duckdb"><code>{duckdb}</code></h3>
<p><a href="https://r.duckdb.org/">duckdb</a>, on the other hand, is a <a href="https://dbi.r-dbi.org/reference/index.html"><code>{DBI}</code></a> extension package. This means that you can use DBI functions to write standard SQL. But it also means that you can use use tables in your DuckDB database with dplyr (via dbplyr).</p>
<p><a href="https://r.duckdb.org/">duckdb</a> allows you to write standard dplyr code and create lazy tables that can be combined to make even lazier code! Moreover, you can utilize the <strong>out-of-core</strong> processing capabilities with DuckDB using <a href="https://r.duckdb.org/">duckdb</a> and, to me, that is the whole selling point.</p>
<p>If performance is your objective and you, for some reason, refuse to use the out-of-core capabilities of DuckDB, you should just use <code>data.table</code> via <code>dtplyr</code>.</p>
</section></section><section id="getting-started-with-duckdb-r" class="level2"><h2 class="anchored" data-anchor-id="getting-started-with-duckdb-r">Getting started with DuckDB &amp; R</h2>
<p>Using DuckDB as a database backend for dplyr is pretty much the same as anything other backend you might use. Very similar code to what I‚Äôll show you can be used to run code on Apache Spark or Postgres.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
üò≠ * crying * just use postgres
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
me, sobbing: just use postgres <a href="https://t.co/rJ4JcZJ4Zj">https://t.co/rJ4JcZJ4Zj</a>
</p>
‚Äî Jacob Matson (<span class="citation" data-cites="matsonj">@matsonj</span>) <a href="https://twitter.com/matsonj/status/1793681468134445371?ref_src=twsrc%5Etfw">May 23, 2024</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><pre><code>|Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£|
    Just use Postgres    
|ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø|
       \ (‚Ä¢‚ó°‚Ä¢) / 
        \     /</code></pre>
</div>
</div>
</div>
<section id="create-a-duckdb-driver" class="level3"><h3 class="anchored" data-anchor-id="create-a-duckdb-driver">Create a DuckDB driver</h3>
<ol type="1">
<li>Load duckdb: <code><a href="https://r.duckdb.org/">library(duckdb)</a></code>
</li>
<li>Create a database driver <code><a href="https://r.duckdb.org/reference/duckdb.html">duckdb()</a></code>
</li>
</ol>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://r.duckdb.org/">duckdb</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: DBI</code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This uses **in memory** database which is limited by RAM</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">drv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r.duckdb.org/reference/duckdb.html">duckdb</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this creates a persistent database which allows DuckDB to</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform **larger-than-memory** workloads</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">drv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r.duckdb.org/reference/duckdb.html">duckdb</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/tempfile.html">tempfile</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fileext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".duckdb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">drv</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>&lt;duckdb_driver dbdir='/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmpt7T0Xr/file84ac2528edf1.duckdb' read_only=FALSE bigint=numeric&gt;</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>Create a database connection object</li>
</ol>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">con</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dbi.r-dbi.org/reference/dbConnect.html">dbConnect</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">drv</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">con</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>&lt;duckdb_connection 949a0 driver=&lt;duckdb_driver dbdir='/private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmpt7T0Xr/file84ac2528edf1.duckdb' read_only=FALSE bigint=numeric&gt;&gt;</code></pre>
</div>
</div>
<ol start="4" type="1">
<li>Import some data from somewhere</li>
</ol>
<p>Here we will download a medium sized csv and import it.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tmp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/tempfile.html">tempfile</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fileext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/download.file.html">download.file</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/flrsh-dev/flrsh-lessons/main/data/houses1990.csv"</span>,</span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tmp</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">housing</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r.duckdb.org/reference/backend-duckdb.html">tbl_file</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">con</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tmp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">housing</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Source:   SQL [?? x 9]
# Database: DuckDB v0.10.2 [root@Darwin 23.4.0:R 4.4.0//private/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T/Rtmpt7T0Xr/file84ac2528edf1.duckdb]
   houseValue income houseAge rooms bedrooms population households latitude
        &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;
 1     452600   8.33       41   880      129        322        126     37.9
 2     358500   8.30       21  7099     1106       2401       1138     37.9
 3     352100   7.26       52  1467      190        496        177     37.8
 4     341300   5.64       52  1274      235        558        219     37.8
 5     342200   3.85       52  1627      280        565        259     37.8
 6     269700   4.04       52   919      213        413        193     37.8
 7     299200   3.66       52  2535      489       1094        514     37.8
 8     241400   3.12       52  3104      687       1157        647     37.8
 9     226700   2.08       42  2555      665       1206        595     37.8
10     261100   3.69       52  3549      707       1551        714     37.8
# ‚Ñπ more rows
# ‚Ñπ 1 more variable: longitude &lt;dbl&gt;</code></pre>
</div>
</div>
<ol start="5" type="1">
<li>Run some dplyr code on the table</li>
</ol>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">avg_price_by_age</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">housing</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/group_by.html">group_by</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">houseAge</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/summarise.html">summarise</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    avg_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mean.html">mean</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">houseValue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/explain.html">show_query</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">avg_price_by_age</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;SQL&gt;
SELECT houseAge, AVG(houseValue) AS avg_val
FROM (FROM '/var/folders/wd/xq999jjj3bx2w8cpg7lkfxlm0000gn/T//Rtmpt7T0Xr/file84ac12eaa270.csv') q01
GROUP BY houseAge</code></pre>
</div>
</div>
<ol start="6" type="1">
<li>Bring the results into memory</li>
</ol>
<p>Use <code><a href="https://dplyr.tidyverse.org/reference/compute.html">dplyr::collect()</a></code> to bring the results into memory as an actual tibble!</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">avg_price_df</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/compute.html">collect</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">avg_price_by_age</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">avg_price_df</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 52 √ó 2
   houseAge avg_val
      &lt;dbl&gt;   &lt;dbl&gt;
 1       17 190494.
 2       35 207299.
 3       37 207361.
 4       44 216233.
 5       30 200253.
 6       14 189597.
 7        5 208418.
 8        9 186673.
 9       21 200157.
10       25 220414.
# ‚Ñπ 42 more rows</code></pre>
</div>
</div>


</section></section> ]]></description>
  <category>r</category>
  <category>prod</category>
  <category>duckdb</category>
  <guid>https://josiahparry.com/posts/2024-05-24-duckdb-and-r.html</guid>
  <pubDate>Fri, 24 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Spatial ML: Predicting on out-of-sample data</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-23-spatial-ml-prediction.html</link>
  <description><![CDATA[ <p>The incorporation of spatially dependent variables in a machine learning model can greatly improve the model‚Äôs performance. These features can include, but not limited to:</p>
<ul>
<li>the spatial lag (neighborhood average) of a variable</li>
<li>counts of neighboring features</li>
<li>most common category nearby</li>
<li>spatial embedding via principle coordinate analysis</li>
</ul>
<section id="deriving-spatial-features" class="level2"><h2 class="anchored" data-anchor-id="deriving-spatial-features">Deriving spatial features</h2>
<p>These kinds of spatial variables are dependent upon the features nearby them. To calculate these variable one needs to have a concept of a neighborhood.</p>
<blockquote class="blockquote">
<p>N.B. These neighborhoods are typically found using spatial indices such as R* trees for polygons and lines and KD-trees for point features. These spatial indices make it fast to look up nearby features.</p>
</blockquote>
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/">sf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://github.com/r-spatial/spdep/">spdep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com">sfdep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://github.com/r-spatial/spatialreg/">spatialreg</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org">ggplot2</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_contiguity.html">st_contiguity</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geometry</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pnts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/geos_unary.html">st_centroid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">edges</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_as_edges.html">st_as_edges</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geometry</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_weights.html">st_weights</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, main <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A polygon's neighborhood"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">edges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">edges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">from</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_kernel_weights.html">st_kernel_weights</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pnts</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gaussian"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/spdep/reference/nb2listw.html">nb2listw</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to do PCOA</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pcoa</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/scale.html">scale</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/methods/as.html">as</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CsparseMatrix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">irlba</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/irlba/man/prcomp_irlba.html">prcomp_irlba</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n_comps</span>, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">plot_comp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span>, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/scale_viridis.html">scale_fill_viridis_c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>option <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/theme.html">theme</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>legend.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pcoa</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">labs</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A Spatial Component"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</details><div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-23-spatial-ml-prediction_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-23-spatial-ml-prediction_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>Given an arrangement of features we derive input features from them. For example we use the neighborhood based on contiguity to calculate spatial lags. Or, we use the neighborhoods to create a spatial weights matrix to use as input into a principle coordinate analysis (PCoA) to derive embeddings of spatial relationships.</p>
</section><section id="the-problem" class="level2"><h2 class="anchored" data-anchor-id="the-problem">The Problem</h2>
<p>An issue arises when we want to use these models outside of the data that we used to train the model.</p>
<p><strong>How do we incorporate space with out-of-sample data?</strong></p>
<p>There are three approaches we can take, I believe.</p>
<ol type="1">
<li>Use the original spatial features to derive the spatial varaibles on the out of sample data.</li>
<li>Grow the spatial index trees</li>
<li>Calculate the spatial variables on the context of the new out-of-sample data.</li>
</ol>
<p>There are issues with each of these approaches.</p>
</section><section id="using-original-spatial-features-for-test-samples" class="level2"><h2 class="anchored" data-anchor-id="using-original-spatial-features-for-test-samples">Using Original Spatial Features for test samples</h2>
<p>Let us take the example of the spatial lag. To calculate the spatial lag of a feature outside of our sample, we would need to <em>retain the existing R* and KD trees</em>. This could be memory intensive. The process would be somewhat like this:</p>
<ol type="1">
<li>Identify the neighborhood of the new feature</li>
<li>Calculate the spatial lag of the neighborhood in the context of the training dataset</li>
<li>Use those variables for prediction</li>
</ol>
<section id="use-case" class="level3"><h3 class="anchored" data-anchor-id="use-case">Use case:</h3>
<p>One would use this approach when they believe that their training data has covered the complete spatial extent of what they intend to model.</p>
</section><section id="cons" class="level3"><h3 class="anchored" data-anchor-id="cons">Cons:</h3>
<p>This would require storing the spatial indices that were used to create the variables along with the variables that are used. In the case of PCoA, you would need to maintain the loadings so that incoming data can be projected onto it.</p>
</section></section><section id="growing-the-spatial-feature-space" class="level2"><h2 class="anchored" data-anchor-id="growing-the-spatial-feature-space">Growing the Spatial Feature Space</h2>
<p>Another example would be that for the <em>entire out-of-sample dataset</em> we insert it into our spatial index then calculate the neighborhood for each feature. This means that each out-of-sample location can have a neighborhood that consists of features in the <em>original training dataset or the test set</em>.</p>
<ol type="1">
<li>Insert out-of-sample features into spatial index</li>
<li>Identify neighborhood of out-of-sample features</li>
<li>Calculate spatial lag in the context of both training and testing dataset</li>
<li>Use those newly calculated spatial variables in the prediction set.</li>
</ol>
<p><strong>Important</strong>:</p>
<p>From this, you can either, keep the newly inserted features in the spatial index so that they are available for later predictions or discard them after having identified your neigborhoods. If you choose the former, it makes the model mutable meaning that the spatial features generated from it would learn from each test set.</p>
</section><section id="use-case-1" class="level2"><h2 class="anchored" data-anchor-id="use-case-1">Use case:</h2>
<p>You would use this approach when the original training data does not cover the complete spatial extent of what is intended to be modeled.</p>
</section><section id="cons-1" class="level2"><h2 class="anchored" data-anchor-id="cons-1">Cons</h2>
<p>This would require storing the original spatial indicies and variables that were used to create the spatial variables. Additionally, this would require a <em>mutable spatial index</em>. In the case that the out-of-sample are not retained, the spatial index must be cloned which can be memory intensive depending on the size of it.</p>
</section><section id="deriving-spatial-variables-from-the-test-set" class="level2"><h2 class="anchored" data-anchor-id="deriving-spatial-variables-from-the-test-set">Deriving Spatial Variables from the test set</h2>
<p>This last approach is the most straight forward. If there are spatial features that are needed for prediction, you generate them entirely from the test dataset. In the case of the spatial lag you would:</p>
<ol type="1">
<li>Create a new spatial index for the test set</li>
<li>Identify the neighborhood of each test feature in the test-set</li>
<li>Calculate the spatial lag with these features</li>
<li>Use those newly calculated spatial variables in the prediction set.</li>
</ol></section><section id="use-case-2" class="level2"><h2 class="anchored" data-anchor-id="use-case-2">Use case:</h2>
<p>You would use this approach when the model is intended to predict a specific phenomenon and is ambivalent to the spatial extent. The model is also intended to be predicted upon an entire target spatial extent. For example, the model is trained to detect housing prices in urban areas. The model might be trained on data in California but is intended to be used in urban areas in Ohio, Michigan, Massachusettes, etc.</p>
</section><section id="cons-2" class="level2"><h2 class="anchored" data-anchor-id="cons-2">Cons</h2>
<p>Calculating a spatial index can be time-consuming. It would require a test set that covers the entire spatial extent that is intended to be predicted upon. This would not be good for small batch or individual record prediction.</p>


</section> ]]></description>
  <category>spatial</category>
  <category>ml</category>
  <guid>https://josiahparry.com/posts/2024-05-23-spatial-ml-prediction.html</guid>
  <pubDate>Thu, 23 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Univariate Spatial Dimensionality Reduction</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-22-univariate-mem.html</link>
  <description><![CDATA[ <p>In discussing principal coordinate analysis (PCoA), the question naturally arose of ‚Äúhow could we incorporate non-spatial data into this method?‚Äù Well, that is what I wanted to explore.</p>
<p>If we include an attribute e.g.&nbsp;crime rate, and embed that into the spatial components generated by PCoA we would truly be doing spatial dimension reduction. Not only would we be encoding spatial patterns, but we would be encoding spatial patterns as they relate to some attribute across the spatial surface.</p>
<p>This is already explored in the context of gene expression via <a href="https://github.com/shangll123/SpatialPCA"><code>{spatialPCA}</code></a> (<a href="https://lulushang.org/SpatialPCA_Tutorial/">website here</a>). This is somewhat different to what I explored in my previous blog post. My brief review of the paper and R package tells me that the spatialPCA method applies the spatial weights matrix into the covariance matrix used in PCA.</p>
<p>What I‚Äôm going to explore is a bit different than that.</p>
<section id="univariate-spatial-encoding" class="level1"><h1>Univariate spatial encoding</h1>
<p>Naturally, we want to look at how we can incorporate attributes into PCoA. Lets first start by creating a spatial weights matrix.</p>
<p>As always, we use the Guerry dataset since it is tried and true. Here I create a spatial weights matrix using contiguity to identify neighborhoods and we use a guassian kernel (like spatial PCA). The Gaussian kernel makes it so that locations that are closer have more weight than those further away. Since we are using contiguity, the distance is estimated by using centroids.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geom</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geometry</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pnts</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_centroid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geom</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># neighbors via contiguity</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_contiguity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geom</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gaussian kernel weights for neighbors</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_kernel_weights</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pnts</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gaussian"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nb2listw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span>, style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Characteristics of weights list object:
Neighbour list object:
Number of regions: 85 
Number of nonzero links: 420 
Percentage nonzero weights: 5.813149 
Average number of links: 4.941176 

Weights style: B 
Weights constants summary:
   n   nn       S0       S1       S2
B 85 7225 698.7942 2378.909 24825.15</code></pre>
</div>
</div>
<section id="revisiting-the-spatial-lag" class="level2"><h2 class="anchored" data-anchor-id="revisiting-the-spatial-lag">Revisiting the spatial lag</h2>
<p>The spatial lag is arguably the most fundamental spatial statistic. It is, in essence, the weighted average of a variable <img src="https://latex.codecogs.com/png.latex?x"> across a neighborhood.</p>
<p>To calculate the spatial lag, referred often to as <img src="https://latex.codecogs.com/png.latex?Wy">, we multiply our spatial weights matrix by our neighboring values. Let‚Äôs walk through how this works really quickly.</p>
<p>We have the index positions of our neighbors and the weights that are associated with each of them.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code>[[1]]
[1] 36 37 67 69

[[2]]
[1]  7 49 57 58 73 76

[[3]]
[1] 17 21 40 56 61 69

[[4]]
[1]  5 24 79 80

[[5]]
[1]  4 24 36

[[6]]
[1] 24 28 36 40 41 46 80</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code>[[1]]
[1] 1.553402 1.857660 2.062100 1.676694

[[2]]
[1] 1.801787 1.717777 1.439955 1.721547 1.260566 1.429496

[[3]]
[1] 1.599532 1.527097 1.376795 1.722723 1.865664 1.350771

[[4]]
[1] 2.040754 1.356645 1.871658 1.685343

[[5]]
[1] 2.040754 1.674375 1.689488

[[6]]
[1] 2.075805 1.679763 1.357435 1.308397 2.009760 1.812262 1.432539</code></pre>
</div>
</div>
</div>
<p>To calculate the spatial lag we first find the neighbors‚Äô values for a vector x, multiply them by the weights and sum them up. In this case the variable is literacy.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">literacy</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_xj</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 29 73 45 32

[[2]]
[1] 67 63 45 54 54 44

[[3]]
[1] 13 23 29 20 19 32

[[4]]
[1] 69 42 23 37

[[5]]
[1] 46 42 29

[[6]]
[1] 42 40 29 29 21 27 37</code></pre>
</div>
</div>
<p>With the neighboring values, we can multiply them by the spatial weights.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj_wt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purrr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://purrr.tidyverse.org/reference/map2.html">map2</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.xj</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.xj</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj_wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1]  45.04865 135.60918  92.79449  53.65420

[[2]]
[1] 120.71975 108.21994  64.79797  92.96353  68.07056  62.89782

[[3]]
[1] 20.79392 35.12323 39.92704 34.45446 35.44761 43.22467

[[4]]
[1] 140.81202  56.97907  43.04814  62.35767

[[5]]
[1] 93.87468 70.32374 48.99514

[[6]]
[1] 87.18379 67.19052 39.36560 37.94350 42.20495 48.93109 53.00394</code></pre>
</div>
</div>
<p>The last step in calculating the spatial lag is to sum that all up:</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_lag</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/lapply.html">vapply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj_wt</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sum</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/numeric.html">numeric</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_lag</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 327.1065 517.6696 208.9709 303.1969 213.1936 375.8234</code></pre>
</div>
</div>
<p>Or, simplified, that is:</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_lag</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 327.1065 517.6696 208.9709 303.1969 213.1936 375.8234</code></pre>
</div>
</div>
</section><section id="stopping-short-of-the-spatial-lag" class="level2"><h2 class="anchored" data-anchor-id="stopping-short-of-the-spatial-lag">Stopping short of the spatial lag</h2>
<p>We use the spatial lag to get a univariate estimate of the spatial neighborhoods value. We have a matrix of xj values that we multiply the spatial weights matrix and then perform a row summation.</p>
<p>What if we <em>didn‚Äôt</em> perform that summation, and instead applied PCA onto the weighted values of <code>xj</code>?</p>
<p>We would then be encoding space and attributes into the components! In the below code chunk I am converting the spatial weights matrix to a sparse matrix and also creating a sparse matrix of the neighboring values. I am also scaling them.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">listw</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CsparseMatrix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nb2listw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_xj</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/scale.html">scale</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CsparseMatrix"</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Now, we multiply them and perform PCA on the resultant matrix:</p>
<div class="cell">
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">plot_comp</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_viridis_c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>legend.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prcomp_irlba</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xj</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_comp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-22-univariate-mem_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-22-univariate-mem_files/figure-html/unnamed-chunk-10-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-22-univariate-mem_files/figure-html/unnamed-chunk-10-3.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2024-05-22-univariate-mem_files/figure-html/unnamed-chunk-10-4.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>We can see that there are some meaningful components in here!</p>
<p>The original variable‚Äôs distribution:</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">literacy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_viridis_c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literacy"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-05-22-univariate-mem_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can see that there is some resemblance to original variable in these components.</p>
</section><section id="do-they-exhibit-spatial-autocorrelation" class="level2"><h2 class="anchored" data-anchor-id="do-they-exhibit-spatial-autocorrelation">Do they exhibit spatial autocorrelation?</h2>
<p>Yes, yes they do!</p>
<div class="cell">
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps_autocorr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/apply.html">apply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">broom</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://generics.r-lib.org/reference/tidy.html">tidy</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">global_moran_test</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>, simplify <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/bind_rows.html">bind_rows</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"component"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/mutate.html">mutate</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>            estimate1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Round.html">round</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">estimate1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, p.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rstatix</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rpkgs.datanovia.com/rstatix/reference/p_value.html">p_format</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">p.value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/select.html">select</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">component</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moran's I"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">estimate1</span>, p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">p.value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comps_autocorr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 3
  component `Moran's I` p_val  
  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;  
1 PC1             0.689 &lt;0.0001
2 PC2             0.611 &lt;0.0001
3 PC3             0.409 &lt;0.0001
4 PC4             0.594 &lt;0.0001</code></pre>
</div>
</div>
<p>How do we use this, though? That is the part I am not so clear on. We have multiple components and they all exhibit <em>significant</em> autocorrelation. The applicability of each of these components may depend a lot upon what they are used to predict. The interpretation of them is tougher than identifying the applicability.</p>
<div class="cell">
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">regress_component</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vars</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/sets.html">setdiff</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">colnames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code_dept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"region"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ave_id_geo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main_city"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"department"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  </span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/lapply.html">lapply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vars</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">var</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">broom</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://generics.r-lib.org/reference/glance.html">glance</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">var</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/setNames.html">setNames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/bind_rows.html">bind_rows</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/arrange.html">arrange</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r.squared</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/select.html">select</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">variable</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r.squared</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org/reference/filter.html">filter</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r.squared</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
<p>If we regress our components upon the variables in the Guerry dataset we might be able to see which patterns they can help explain away. This helper function filters out regressions with an <img src="https://latex.codecogs.com/png.latex?R%5E2"> of less than 0.1.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code># A tibble: 1 √ó 2
  variable r.squared
  &lt;chr&gt;        &lt;dbl&gt;
1 literacy     0.136</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code># A tibble: 5 √ó 2
  variable        r.squared
  &lt;chr&gt;               &lt;dbl&gt;
1 donation_clergy     0.276
2 desertion           0.193
3 instruction         0.132
4 literacy            0.121
5 clergy              0.112</code></pre>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code># A tibble: 1 √ó 2
  variable      r.squared
  &lt;chr&gt;             &lt;dbl&gt;
1 crime_parents     0.114</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code># A tibble: 2 √ó 2
  variable    r.squared
  &lt;chr&gt;           &lt;dbl&gt;
1 prostitutes     0.319
2 wealth          0.189</code></pre>
</div>
</div>
</div>
<p>Interestingly the 3rd and 4th components are the most useful if we were looking for something to predict upon‚Äîthis is a derived use case where we‚Äôre fishing for something that looks good.</p>
</section><section id="univariate-spatial-attribute-comopnent-w-regression" class="level2"><h2 class="anchored" data-anchor-id="univariate-spatial-attribute-comopnent-w-regression">Univariate Spatial Attribute Comopnent w/ Regression</h2>
<p>Let‚Äôs explore this 4rd component a bit more. If we regress <code>prostitutes ~ literacy</code> we see that there is a much weaker model. Surprisingly, in fact. And the residuals are only very mildly autocorrelated. Why is the component such a strong predictor????</p>
<div class="cell">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">literacy</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = prostitutes ~ literacy, data = guerry)

Residuals:
   Min     1Q Median     3Q    Max 
-415.6 -122.3  -40.5   57.9 4314.3 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept) -208.002    134.721  -1.544  0.12641   
literacy       8.981      3.147   2.854  0.00545 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 502.9 on 83 degrees of freedom
Multiple R-squared:  0.08935,   Adjusted R-squared:  0.07838 
F-statistic: 8.144 on 1 and 83 DF,  p-value: 0.005455</code></pre>
</div>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">global_moran_test</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 5.0023, p-value = 2.832e-07
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.142390596      -0.011904762       0.000951401 </code></pre>
</div>
</div>
<p>Adding in the component to the model, the <img src="https://latex.codecogs.com/png.latex?R%5E2"> shoots right up! But why?</p>
<div class="cell">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">literacy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = prostitutes ~ literacy + comps$rotation[, 4], data = guerry)

Residuals:
   Min     1Q Median     3Q    Max 
-766.7 -103.4  -65.6   36.5 3210.5 

Coefficients:
                    Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)         -165.523    113.683  -1.456    0.149    
literacy               6.326      2.688   2.353    0.021 *  
comps$rotation[, 4] 2604.594    440.074   5.919 7.25e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 423.5 on 82 degrees of freedom
Multiple R-squared:  0.3619,    Adjusted R-squared:  0.3464 
F-statistic: 23.26 on 2 and 82 DF,  p-value: 9.995e-09</code></pre>
</div>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">global_moran_test</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 2.3311, p-value = 0.009874
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.100827939      -0.011904762       0.002338715 </code></pre>
</div>
</div>
<p>Often when there is a spatial effect of a variable, we utilize its spatial lag in the model. This is an SLX model but simplified.</p>
<div class="cell">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">literacy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_lag</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = prostitutes ~ literacy + st_lag(x, nb, wt), data = guerry)

Residuals:
   Min     1Q Median     3Q    Max 
-500.7 -138.6  -29.5   54.1 4237.2 

Coefficients:
                   Estimate Std. Error t value Pr(&gt;|t|)   
(Intercept)       -155.2878   149.8723  -1.036  0.30319   
literacy            10.7142     3.8112   2.811  0.00617 **
st_lag(x, nb, wt)   -0.3858     0.4764  -0.810  0.42034   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 503.9 on 82 degrees of freedom
Multiple R-squared:  0.09657,   Adjusted R-squared:  0.07454 
F-statistic: 4.383 on 2 and 82 DF,  p-value: 0.01554</code></pre>
</div>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">global_moran_test</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 5.2839, p-value = 6.322e-08
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.167643014      -0.011904762       0.001154633 </code></pre>
</div>
</div>
<p>Is this all autocorrelation? What if we look at including just a spatial component? What is interesting is that if we recreate this process using <em>only</em> the Moran‚Äôs Eigenvectors, there is nothing meaningful to be extracted that predicts prostitution as well as the spatial univariate component!</p>
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">irlba</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/irlba/man/prcomp_irlba.html">prcomp_irlba</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/scale.html">scale</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/scale.html">scale</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">F</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comps_autocorr</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regress_component</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sp_comps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</details><div class="cell quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<pre><code># A tibble: 4 √ó 3
  component `Moran's I` p_val  
  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;  
1 PC1             1.04  &lt;0.0001
2 PC2             0.981 &lt;0.0001
3 PC3             0.934 &lt;0.0001
4 PC4             0.889 &lt;0.0001</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<pre><code># A tibble: 10 √ó 2
   variable        r.squared
   &lt;chr&gt;               &lt;dbl&gt;
 1 desertion           0.366
 2 suicides            0.258
 3 crime_pers          0.203
 4 literacy            0.197
 5 crime_prop          0.178
 6 instruction         0.171
 7 wealth              0.158
 8 donation_clergy     0.155
 9 lottery             0.143
10 commerce            0.138</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<pre><code># A tibble: 4 √ó 2
  variable    r.squared
  &lt;chr&gt;           &lt;dbl&gt;
1 literacy        0.256
2 instruction     0.230
3 donations       0.160
4 commerce        0.151</code></pre>
</div>
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<pre><code># A tibble: 2 √ó 2
  variable    r.squared
  &lt;chr&gt;           &lt;dbl&gt;
1 instruction     0.142
2 literacy        0.121</code></pre>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<pre><code># A tibble: 0 √ó 2
# ‚Ñπ 2 variables: variable &lt;chr&gt;, r.squared &lt;dbl&gt;</code></pre>
</div>
</div>
</div>


</section></section> ]]></description>
  <category>spatial</category>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2024-05-22-univariate-mem.html</guid>
  <pubDate>Wed, 22 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Encoding spatial patterns as variables</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-17-moran-eigenvectors.html</link>
  <description><![CDATA[ <p>I‚Äôve begun reading <a href="https://www.sciencedirect.com/science/article/abs/pii/S0304380006000925">‚ÄúSpatial modelling: a comprehensive framework for principal coordinate analysis of neighbour matrices (PCNM)‚Äù</a> which describes the process of making ‚ÄúMoran Eigenvector Maps.‚Äù</p>
<p>In this case, I haven‚Äôt finished reading the paper but am quite thrilled by the prospect of it. One of the biggest problems in ecological and social science modelling is that space is often a confounder in models. By this I mean that a lot of phenomena we see are <strong>spatially dependent</strong>.</p>
<p>Reductively, spatial dependence means that variables or outcomes are strongly linked to where things are. For example, income tends to be spatially dependent. Meaning that high income areas are typically surounded by other high income areas.</p>
<section id="the-problem" class="level2"><h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>When modelling data that exhibit spatial dependence, spatial relationships need to be accounted for. Otherwise, you will often find that model residuals (errors) <em>also exhibit spatial dependence</em>. So? How can you control for this.</p>
<p>There are a number of techniques that people use from more statistically sound ones, to tricks used by ML engineers. For example you may introduce the spatial lag (neighborhood average of a variable) to account for some of the spatial association.</p>
</section><section id="principal-coordinate-analysis-pcoa" class="level2"><h2 class="anchored" data-anchor-id="principal-coordinate-analysis-pcoa">Principal Coordinate Analysis (PCoA)</h2>
<p>One interesting idea is using principle components analysis to encode geography into numeric variables. Conceptually, the idea is actually rather simple!</p>
<p>When we do spatial statistics, we create what are called spatial weights matrices. These define which features are related to eachother.</p>
<p>For example we can identify the neighbors from the famous guerry dataset based on the contiguity‚Äîthat is if they are touching. We create a <code>nb</code> and <code>wt</code> object. The <code>nb</code> are the neighbors and <code>wt</code> uses a gaussian kernel. The gaussian kernel assigns more weight to to locations that are closer and less weight to those that are further‚Äîessentially following the normal distribution.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com">sfdep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://dplyr.tidyverse.org">dplyr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geometry</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">centroids</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sf</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/geos_unary.html">st_centroid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_contiguity.html">st_contiguity</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_kernel_weights.html">st_kernel_weights</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">centroids</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gaussian"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Visually, this is what the neighborhood relationship looks like:</p>
<div class="cell">
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org">ggplot2</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sfn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/st_as_graph.html">st_as_graph</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/autoplot.html">autoplot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sfn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">geoms</span>, fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</details><div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-05-17-moran-eigenvectors_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The weights object is a ragged array which is used to be a sparse matrix representation of the spatial weights.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/head.html">head</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1.553402 1.857660 2.062100 1.676694

[[2]]
[1] 1.801787 1.717777 1.439955 1.721547 1.260566 1.429496

[[3]]
[1] 1.599532 1.527097 1.376795 1.722723 1.865664 1.350771

[[4]]
[1] 2.040754 1.356645 1.871658 1.685343

[[5]]
[1] 2.040754 1.674375 1.689488

[[6]]
[1] 2.075805 1.679763 1.357435 1.308397 2.009760 1.812262 1.432539</code></pre>
</div>
</div>
<p>The spatial weights are an <code>n x n</code> square matrix. The idea behind the paper above is that we can encode the spatial relationships in this neighborhood matrix using principle components.</p>
<p>We can take the weights matrix and create a dense matrix from it:</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/wt_as_matrix.html">wt_as_matrix</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>Using this new matrix, we can perform PCA on it.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pca_res</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/prcomp.html">prcomp</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pca_res</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Importance of components:
                           PC1     PC2     PC3     PC4     PC5     PC6     PC7
Standard deviation     0.95957 0.89585 0.85836 0.81484 0.79239 0.72065 0.66135
Proportion of Variance 0.06928 0.06038 0.05543 0.04996 0.04724 0.03907 0.03291
Cumulative Proportion  0.06928 0.12966 0.18510 0.23505 0.28229 0.32137 0.35428
                           PC8     PC9    PC10    PC11    PC12    PC13    PC14
Standard deviation     0.65347 0.60391 0.58993 0.54551 0.51607 0.51048 0.50266
Proportion of Variance 0.03213 0.02744 0.02618 0.02239 0.02004 0.01961 0.01901
Cumulative Proportion  0.38640 0.41385 0.44003 0.46242 0.48246 0.50206 0.52107
                          PC15    PC16    PC17    PC18    PC19    PC20    PC21
Standard deviation     0.50008 0.49651 0.48004 0.47334 0.46571 0.46447 0.45886
Proportion of Variance 0.01882 0.01855 0.01734 0.01686 0.01632 0.01623 0.01584
Cumulative Proportion  0.53989 0.55844 0.57578 0.59263 0.60895 0.62518 0.64103
                          PC22   PC23    PC24    PC25    PC26    PC27    PC28
Standard deviation     0.45371 0.4495 0.43495 0.43208 0.42533 0.42265 0.40912
Proportion of Variance 0.01549 0.0152 0.01423 0.01405 0.01361 0.01344 0.01259
Cumulative Proportion  0.65651 0.6717 0.68595 0.70000 0.71361 0.72705 0.73964
                          PC29    PC30    PC31    PC32    PC33    PC34    PC35
Standard deviation     0.40662 0.40248 0.39657 0.38949 0.38172 0.37648 0.36612
Proportion of Variance 0.01244 0.01219 0.01183 0.01141 0.01096 0.01066 0.01009
Cumulative Proportion  0.75208 0.76427 0.77610 0.78752 0.79848 0.80915 0.81923
                          PC36    PC37    PC38    PC39    PC40    PC41    PC42
Standard deviation     0.35885 0.35324 0.35042 0.34655 0.33906 0.33458 0.32477
Proportion of Variance 0.00969 0.00939 0.00924 0.00904 0.00865 0.00842 0.00794
Cumulative Proportion  0.82892 0.83831 0.84755 0.85658 0.86523 0.87366 0.88159
                          PC43    PC44    PC45    PC46    PC47    PC48    PC49
Standard deviation     0.32182 0.30859 0.30426 0.30100 0.29700 0.28072 0.27493
Proportion of Variance 0.00779 0.00716 0.00697 0.00682 0.00664 0.00593 0.00569
Cumulative Proportion  0.88938 0.89655 0.90351 0.91033 0.91697 0.92290 0.92858
                          PC50    PC51    PC52    PC53    PC54    PC55    PC56
Standard deviation     0.26620 0.25927 0.25817 0.25373 0.25203 0.23148 0.22505
Proportion of Variance 0.00533 0.00506 0.00501 0.00484 0.00478 0.00403 0.00381
Cumulative Proportion  0.93391 0.93897 0.94399 0.94883 0.95361 0.95764 0.96145
                          PC57   PC58    PC59    PC60    PC61    PC62    PC63
Standard deviation     0.21925 0.2124 0.20738 0.20542 0.20426 0.17969 0.17415
Proportion of Variance 0.00362 0.0034 0.00324 0.00318 0.00314 0.00243 0.00228
Cumulative Proportion  0.96507 0.9685 0.97170 0.97488 0.97801 0.98044 0.98273
                          PC64    PC65    PC66    PC67    PC68    PC69    PC70
Standard deviation     0.17330 0.16078 0.15374 0.14641 0.14201 0.13335 0.13088
Proportion of Variance 0.00226 0.00194 0.00178 0.00161 0.00152 0.00134 0.00129
Cumulative Proportion  0.98499 0.98693 0.98871 0.99032 0.99184 0.99318 0.99447
                          PC71    PC72    PC73    PC74    PC75    PC76    PC77
Standard deviation     0.12526 0.10810 0.10181 0.08943 0.08425 0.07410 0.07172
Proportion of Variance 0.00118 0.00088 0.00078 0.00060 0.00053 0.00041 0.00039
Cumulative Proportion  0.99565 0.99653 0.99731 0.99791 0.99844 0.99885 0.99924
                          PC78    PC79    PC80    PC81    PC82    PC83     PC84
Standard deviation     0.06809 0.04608 0.03760 0.03481 0.02250 0.01105 0.008143
Proportion of Variance 0.00035 0.00016 0.00011 0.00009 0.00004 0.00001 0.000000
Cumulative Proportion  0.99959 0.99975 0.99986 0.99995 0.99999 1.00000 1.000000
                            PC85
Standard deviation     3.921e-16
Proportion of Variance 0.000e+00
Cumulative Proportion  1.000e+00</code></pre>
</div>
</div>
<p>The spatial relationships that are embedded by the spatial weights matrix, are now encoded as components from a PCA. This means that we can use each of these components as a univariate measure of space. And, they also exhibit quite interesting patterns of spatial dependence.</p>
</section><section id="exploring-pcoa" class="level2"><h2 class="anchored" data-anchor-id="exploring-pcoa">Exploring PCoA</h2>
<p>These components essentially capture spatial autocorrelation. For example we an look at the first component.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract the first component</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pca_res</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/scale_viridis.html">scale_fill_viridis_c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">labs</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eigenvector"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-05-17-moran-eigenvectors_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It displays a pattern of being near Paris (the dark purple, or negative eigenvector values) or being nearer to Aveyron, the positive eigenvector values. Clearly, this displays some interesting global spatial autocorrelation. But how much?</p>
<p>We can measure the global spatial autocorrelation of this component using Moran‚Äôs I.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/global_moran_perm.html">global_moran_perm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Monte-Carlo simulation of Moran I

data:  x 
weights: listw  
number of simulations + 1: 500 

statistic = 1.0698, observed rank = 500, p-value &lt; 2.2e-16
alternative hypothesis: two.sided</code></pre>
</div>
</div>
<p>The result is <code>1.0698</code> which is greater than the theoretical maximum of 1. There is a ridiculous amount of spatial autocorrelation here.</p>
</section><section id="using-pcoa-eigenvectors-to-reduce-spatial-confounding" class="level2"><h2 class="anchored" data-anchor-id="using-pcoa-eigenvectors-to-reduce-spatial-confounding">Using PCoA Eigenvectors to reduce spatial confounding</h2>
<p>Predicting crime based on population and the prostitution levels of 1830s France shows that there is a <em>lot</em> of spatial autocorrelation in the residuals. This means that the results of the model do not appropriately account for spatial dependence.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">crime_pers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pop1831</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = crime_pers ~ pop1831 + prostitutes, data = guerry)

Residuals:
     Min       1Q   Median       3Q      Max 
-13762.2  -4592.1   -974.6   4892.4  18672.5 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) 13688.932   2265.393   6.043 4.27e-08 ***
pop1831        17.676      5.881   3.006  0.00352 ** 
prostitutes    -3.197      1.665  -1.920  0.05833 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 7001 on 82 degrees of freedom
Multiple R-squared:  0.1021,    Adjusted R-squared:  0.08016 
F-statistic:  4.66 on 2 and 82 DF,  p-value: 0.01211</code></pre>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/global_moran_test.html">global_moran_test</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 5.0424, p-value = 2.298e-07
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.328493924      -0.011904762       0.004557168 </code></pre>
</div>
</div>
<p>If you include the first eigenvector component, the spatial autocorrelation of the residuals decrease dramatically.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">crime_pers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pop1831</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp1</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = crime_pers ~ pop1831 + prostitutes + comp1, data = guerry)

Residuals:
     Min       1Q   Median       3Q      Max 
-14228.8  -3822.7   -893.4   4232.5  19718.8 

Coefficients:
              Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  14847.292   2080.269   7.137 3.66e-10 ***
pop1831         15.179      5.386   2.818  0.00607 ** 
prostitutes     -4.597      1.551  -2.964  0.00399 ** 
comp1       -28422.828   6708.123  -4.237 5.95e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 6373 on 81 degrees of freedom
Multiple R-squared:  0.265, Adjusted R-squared:  0.2378 
F-statistic: 9.733 on 3 and 81 DF,  p-value: 1.482e-05</code></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/global_moran_test.html">global_moran_test</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 2.666, p-value = 0.003838
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.167439656      -0.011904762       0.004525529 </code></pre>
</div>
</div>
<p>Interestingly, this increases the <img src="https://latex.codecogs.com/png.latex?R%5E2"> by 16 which is nothing to scoff at. The significance of <code>prostitutes</code> variable increases and the <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> values shrink. And the first component accounts for pretty much everything else lol!</p>
<section id="what-about-another-component" class="level3"><h3 class="anchored" data-anchor-id="what-about-another-component">What about another component?</h3>
<p>We can plot the relationship that is capture by the second component.</p>
<div class="cell">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract the second component</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pca_res</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rotation</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggplot.html">ggplot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/aes.html">aes</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggsf.html">geom_sf</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/scale_viridis.html">scale_fill_viridis_c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/ggtheme.html">theme_void</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://ggplot2.tidyverse.org/reference/labs.html">labs</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eigenvector"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-05-17-moran-eigenvectors_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This component captures a west to east relationship rather than a north to south one. Is the second component spatially autocorrelated?</p>
<div class="cell">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/global_moran_perm.html">global_moran_perm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Monte-Carlo simulation of Moran I

data:  x 
weights: listw  
number of simulations + 1: 500 

statistic = 0.99864, observed rank = 500, p-value &lt; 2.2e-16
alternative hypothesis: two.sided</code></pre>
</div>
</div>
<p>Oh hell yeah it is.</p>
<p>If this component is included in the model instead of the first one we see something interesting.</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">crime_pers</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">pop1831</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prostitutes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">comp2</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">guerry</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/summary.html">summary</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = crime_pers ~ pop1831 + prostitutes + comp2, data = guerry)

Residuals:
   Min     1Q Median     3Q    Max 
-13617  -4584  -1150   4831  18360 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) 13730.388   2278.027   6.027 4.71e-08 ***
pop1831        17.518      5.919   2.960  0.00404 ** 
prostitutes    -3.098      1.686  -1.837  0.06989 .  
comp2        3303.053   7091.459   0.466  0.64262    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 7034 on 81 degrees of freedom
Multiple R-squared:  0.1045,    Adjusted R-squared:  0.0713 
F-statistic:  3.15 on 3 and 81 DF,  p-value: 0.02941</code></pre>
</div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://sfdep.josiahparry.com/reference/global_moran_test.html">global_moran_test</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/residuals.html">resid</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mod</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nb</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Moran I test under randomisation

data:  x  
weights: listw    

Moran I statistic standard deviate = 5.0189, p-value = 2.598e-07
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.326953780      -0.011904762       0.004558477 </code></pre>
</div>
</div>
<p>The model is not impacted nor is the spatial autocorrelation. So the pattern encompassed by the second component is not confounding our variables like the first one is.</p>
</section></section><section id="what-does-this-mean" class="level2"><h2 class="anchored" data-anchor-id="what-does-this-mean">What does this mean?</h2>
<p>If you have spatially dependent features that you‚Äôre predicting you should consider using these as input features to your models. I have a hunch that they would work insanely well with computer vision tasks and things models like Random Forests and XGBoost.</p>


</section> ]]></description>
  <category>spatial</category>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2024-05-17-moran-eigenvectors.html</guid>
  <pubDate>Fri, 17 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Databases for Data Scientist</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-05-16-databases-for-ds.html</link>
  <description><![CDATA[ 




<p>It‚Äôs been coming up a lot recently, or, maybe, I‚Äôve just been focused on this a lot more. Data scientists are coming to terms with the fact that they have to work with databases if they want their analytics to scale. That is pretty normal. But one of the bigger challenges is that these data scientists don‚Äôt really know how to make that leap. What do they need to know to make that transition?</p>
<p>For many of use in the ‚Äúknow‚Äù, we know that there actually isn‚Äôt all that much different between a database and a data.frame. A data frame is in memory but a database table is just <em>over there</em> sitting somewhere else.</p>
<blockquote class="blockquote">
<p>If you know how to write dplyr, you already know how to work with a database.</p>
</blockquote>
<section id="what-do-you-need-to-know" class="level2">
<h2 class="anchored" data-anchor-id="what-do-you-need-to-know">What do you need to know?</h2>
<p>For those of you who want to begin to use databases in your work and want to start scaling your analysis, there are a few topics that would be helpful for you to know. I‚Äôm not going to teach you them here. But list them out so you can google it. And truthfully, you already know what these are but you don‚Äôt know the terminology.</p>
<p>Here is my list of things to know:</p>
<ol type="1">
<li>Learn what <strong>RDBMS</strong> means.</li>
</ol>
<ul>
<li>relational database management system or sometimes just DBMS</li>
</ul>
<ol start="2" type="1">
<li>Understand <strong>primary keys</strong> and <strong>foreign keys</strong></li>
<li>Figure out what database <strong>normalization</strong> is and when its useful</li>
<li>Schemas vs.&nbsp;tables for organizational purposes</li>
<li>Views vs tables (this is handy for making tables to be consumed by BI / other things)</li>
<li>Table indexes and what they are (that way you can know when you might need them)</li>
</ol>
</section>
<section id="why-you-might-not-actually-need-a-full-rdbms" class="level2">
<h2 class="anchored" data-anchor-id="why-you-might-not-actually-need-a-full-rdbms">Why you might not actually need a full RDBMS</h2>
<p>With the ubiquity of parquet and tools like apache arrow and DuckDB, there‚Äôs a good chance that for what you want to accomplish in your analytical workflow, you don‚Äôt need a fully fledged database. Organized parquet files into a database-like structure will be sufficient. DuckDB and Arrow can allow you to work with these data in a larger than memory capacity. You don‚Äôt need to read it all into memory, actually.</p>
<p>Before you say you need Postgres for analytics, instead, try parquet (and with hive partitioning if your data are larger) with DuckDB and Apache Arrow. It‚Äôs likely all you need.</p>


</section>

 ]]></description>
  <category>production</category>
  <category>arrow</category>
  <category>duckdb</category>
  <guid>https://josiahparry.com/posts/2024-05-16-databases-for-ds.html</guid>
  <pubDate>Thu, 16 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Why do we sleep on factors?</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-02-15-factor-finagling.html</link>
  <description><![CDATA[ <p>Factors are R‚Äôs version of an enum(eration) (<a href="../posts/2023-11-10-enums-in-r/index.html">related post</a>). They‚Äôre quite handy and I think we can probably rely on them a bit more for enumations like <code>c("a", "b", "c")</code>. Today I‚Äôve been helping test a new possible feature of <a href="https://extendr.github.io/"><code>extendr</code></a> involving factors and it has me thinking a bit about some behaviors. Here are my extemporaneous thoughts:</p>
<p>When we have a factor, how can we get new values and associate it with an existing factor?</p>
<p>For example, we can create a factor of the alphabet.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">as.factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] a b c d e f g h i j k l m n o p q r s t u v w x y z
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<p>Say we have new values that match the level names and want to extend the vector or create a new one based on the levels.</p>
<p>It would be <em>nice</em> if we could subset a factor based on the levels name</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] &lt;NA&gt;
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<p>but this gives us an <code>NA</code> because there is no named element <code>"a"</code>. If we gave them names we could access it accordingly</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/setNames.html">setNames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a 
a 
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<p>but this would be antithetical to the efficiency of a factor.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>They key selling point of a factor is that we define the levels only once and associate them based on integer positions. This is far far far faster and more memory efficient than repeating a value a sh!t ton of times.</p>
</div></div><p>To create a new factor we have to pass in the levels accordingly:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/levels.html">levels</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] d
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<p>This is actually pretty nice! But I feel like there could be an even better experience, though I don‚Äôt know what it would be‚Ä¶</p>
<p>If we wanted to extend the vector by combining the existing factor with levels names we coerce to a character vector but instead of the levels we get the integer values.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "a" </code></pre>
</div>
</div>
<p>To combine them we would need to ensure that they are both factors.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/levels.html">levels</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] a b c d e f g h i j k l m n o p q r s t u v w x y z d
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<section id="using-vctrs" class="level2"><h2 class="anchored" data-anchor-id="using-vctrs">Using <code>vctrs</code>
</h2>
<p>Upon further thinking, <a href="https://vctrs.r-lib.org/"><code>vctrs</code></a> tends to have the type-safe behavior that I wish from R (and aspects of it should probably be adapted into base R).</p>
<p>I think vctrs gets to the behavior that I want actually. If I have a value and I use <code><a href="https://vctrs.r-lib.org/reference/vec_cast.html">vctrs::vec_cast()</a></code> and provide the existing factor vector <code>f</code> to the <code>to</code> argument, it will use the levels.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vctrs</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://vctrs.r-lib.org/reference/vec_cast.html">vec_cast</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] z
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
</div>
<p>But this <em>will not</em> succeed if we pass it a value that is unknown. The error message is a bit cryptic and frankly feels a little pythonic in the verbosity of the traceback! But this is type safe! And I LIKE IT!</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vctrs</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://vctrs.r-lib.org/reference/vec_cast.html">vec_cast</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error:
! Can't convert from `"123"` &lt;character&gt; to &lt;factor&lt;754f0&gt;&gt; due to loss of generality.
‚Ä¢ Locations: 1</code></pre>
</div>
</div>


</section> ]]></description>
  <category>r</category>
  <guid>https://josiahparry.com/posts/2024-02-15-factor-finagling.html</guid>
  <pubDate>Thu, 15 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Shared segment of parallel lines</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-01-27-shared-segments.html</link>
  <description><![CDATA[ <section id="i-need-your-help" class="level2"><h2 class="anchored" data-anchor-id="i-need-your-help">I need your help!!</h2>
<p>I am working on a problem where I identify approximately parallel lines. From the two lines that I have deemed parallel, I want to calculate the length of the segment that has a shared domain or range, or both domain and range.</p>
<p>In these examples I am using truly parallel lines for sake of simplicity.</p>
<p>There are four scenarios that we have to solve for: positive slope, negative slope, no slope, and undefined slopes.</p>
<p><strong>Helper functions: </strong></p>
<div class="cell">
<details class="code-fold"><summary>Code</summary><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate range of x values </span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_range</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sf</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/st_bbox.html">st_bbox</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xmin</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate range of y values </span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_range</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sf</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/st_bbox.html">st_bbox</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ymin</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ymax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate overlapping range between two ranges</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap_range</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Extremes.html">max</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Extremes.html">min</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">r2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">find_overlaps</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">a</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    x_overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">overlap_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>    y_overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">overlap_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y_range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap_rect</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sf</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/st_bbox.html">st_bbox</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>      xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, </span>
<span>      xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span>      ymin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span>      ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sf</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://r-spatial.github.io/sf/reference/st_as_sfc.html">st_as_sfc</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bbox</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
</section><section id="positive-slope" class="level2"><h2 class="anchored" data-anchor-id="positive-slope">Positive Slope</h2>
<p>The first scenario is the shared positive slope.</p>
<p><strong>Question</strong>:</p>
<p>How do I find the coordinates of the contained line segment to calculate the length? The solution should be able to handle the scenario where x and y are flipped as well.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Positive Slope Scenario</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wk</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://paleolimbot.github.io/wk/reference/wkt.html">wkt</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(0.0 0.0, 2.0 2.0)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target line</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(0.5 0.75, 2.5 2.75)"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one we've deemed parallel</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-01-27-shared-segments_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We can see that these two lines are parallel. We find their overlapping range:</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_overlaps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$x_overlap
[1] 0.5 2.0

$y_overlap
[1] 0.75 2.00</code></pre>
</div>
</div>
<p>What we want to calculate is the length of the red line segment contained by the bounding box.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">overlap_rect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-01-27-shared-segments_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section><section id="negative-slope-scenario" class="level1"><h1>Negative Slope Scenario</h1>
<p>We have a very similar scenario. But this time with a <em>negative</em> slope. The solution should be able to handle if I want to find each line segment if x and y are swapped.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wk</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://paleolimbot.github.io/wk/reference/wkt.html">wkt</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(0 2, 2 0)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target line</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(1 0.5, 3 -1.5)"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># deemed parallel</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_overlaps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$x_overlap
[1] 1 2

$y_overlap
[1] 0.0 0.5</code></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">overlap_rect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-01-27-shared-segments_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section><section id="undefined-slope-scenario" class="level1"><h1>Undefined Slope Scenario</h1>
<p>Here, our overlap is only in one dimension as opposed to two. It may be more simple?</p>
<p>I think the answer here is is <code>y_max - y_min</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wk</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://paleolimbot.github.io/wk/reference/wkt.html">wkt</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(2 1.5, 2 2.5)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the target line </span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(1 1, 1 2)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># deemed parallel</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(2 1.5, 2 2)"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># overlap range (1D)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_overlaps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$x_overlap
[1] NA

$y_overlap
[1] 1.5 2.0</code></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, lty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-01-27-shared-segments_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><strong>Segment Length</strong>:</p>
<p>Here is how we can calculate the overlap in the y-dimension:</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_overlaps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_over</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_overlap</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_over</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_over</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5</code></pre>
</div>
</div>
</section><section id="no-slope-scenario" class="level1"><h1>No slope scenario</h1>
<p>Similar to the undefined slope. We have a one dimensional overlap. I think the answer here is <code>x_max - x_min</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wk</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://paleolimbot.github.io/wk/reference/wkt.html">wkt</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(0 1, 2 1)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target feature</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(1 2, 3 2)"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># deemed parallel</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINESTRING(1 1, 2 1)"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># overlap range (1D)</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, lwd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, lty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2024-01-27-shared-segments_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><strong>Segment Length</strong>:</p>
<p>Here is how we can calculate the overlap in the x-dimension:</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_overlaps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_over</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">overlap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_overlap</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_over</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_over</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>


</section> ]]></description>
  <category>r-spatial</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2024-01-27-shared-segments.html</guid>
  <pubDate>Sat, 27 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Leptos &amp; wasm-bindgen</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2024-01-15.html</link>
  <description><![CDATA[ 




<p>As a side project, I‚Äôm trying to build a full stack web app with auth, session management etc. I do data science and no web-dev. I am <em>very</em> out of my element. But no better way to learn than trial by fire.</p>
<p>I‚Äôm doing all of this through the Rust <a href="https://leptos.dev/">leptos</a> framework. But the challenge is that javascript is always present and I can‚Äôt really get away from it for some things and making the two interact is honestly super tricky and is probably where most of my frustration with leptos has come from.</p>
<p>To be able to call javascript from your leptos app. You need to use something called <a href="https://rustwasm.github.io/docs/wasm-bindgen/">wasm-bindgen</a>. This lets you call javascript functions from Rust.</p>
<p>Part of what I‚Äôm playing with involves <a href="https://webr.r-wasm.org/">webR</a>. And I have a javascript file like so:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>webr.js</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="webr.js" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> { WebR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Console</span> } <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://webr.r-wasm.org/latest/webr.mjs'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> webR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">WebR</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> webR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Create a webR console using the Console helper class */</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> webRConsole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Console</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"webR console started"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">webRConsole<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">webRConsole<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stdin</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"options('max.print' = 1000)"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a bunch of other stuff that fetches things from the DOM</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">export</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resize_plot</span>(w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h) {</span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"options(device = webr::canvas("</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(call)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> webRConsole<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stdin</span>(call)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">}</span></code></pre></div>
</div>
<p>which will load webR at the start and exports a function to resize the plot window.</p>
<p>Now in a rust file I have:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bindings.rs</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="bindings.rs" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">wasm_bindgen::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// create rust functions from the javascript functions</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>wasm_bindgen<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/webr.js"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">extern</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> resize_plot(w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">f64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">f64</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> JsValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>This lets me call <code>resize_plot()</code> directly from my rust code which is super cool! However, because of the way that wasm-bindgen works, whatever is not contained inside of a function is execute on <em>every single page</em> even where it is not needed.</p>
<p>Because I have <code>resize_plot()</code> called in one of my leptos components it gets imported in the site-wide javascript via wasm-bindgen at <code>/pkg/myapp.js</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> { resize_plot } <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./snippets/myapp-aa4c1e3078dc6708/webr.js'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>On pages where this code isn‚Äôt needed or uses errors can abound which will break client side reactivity in leptos.</p>
<p>Now it‚Äôs a matter of having to figure out how to appropriately import and expose javascript functions so that no errors arise with wasm-bindgen.</p>
<p>In one case, I was able to move everything over to pure javascript which is fine. I‚Äôm unsure how I will handle others.</p>



 ]]></description>
  <category>rust</category>
  <guid>https://josiahparry.com/posts/2024-01-15.html</guid>
  <pubDate>Mon, 15 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing S3 head() methods</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-11-27-custom-head-method/</link>
  <description><![CDATA[ 




<p>I‚Äôve been struggling for the past 15-20 minutes trying to fix the following <code>R CMD check</code> greivances.</p>
<pre><code>checking whether the namespace can be loaded with stated dependencies ... WARNING
  Error: object 'head' not found whilst loading namespace 'arcgislayers'
  Execution halted

checking dependencies in R code ... NOTE
  Error: object 'head' not found whilst loading namespace 'arcgislayers'</code></pre>
<p>It feels like something that shouldn‚Äôt be difficult? You write the method and you export it right? Well, that‚Äôs true if the function is exported in <code>base</code>. But there are a lot of handy functions that are in base R that <em>are not</em> in the package <code>{base}</code>.</p>
<p><code>head()</code>, the function I‚Äôm fighting with, is actually an export of the base R package <code>{utils}</code>.</p>
<p>Here‚Äôs some code I have that I couldn‚Äôt get to export <code>head()</code> properly.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb2-2">head.FeatureLayer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ARCGIS_TOKEN"</span>), ...) {</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect_layer</span>(x, n_max, token)</span>
<span id="cb2-4">}</span></code></pre></div>
<p>To fix this we need to do the following:</p>
<ol type="1">
<li>Add <code>utils</code> as an imported package with <code>usethis::use_package("utils")</code></li>
<li>Then we need to specifically import <code>head</code> by adding <code>#' @importFrom utils head</code></li>
<li>Redocument with <code>devtools::document()</code> (or cmd + shift + d)</li>
</ol>
<p>The whole shebang:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom utils head</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @export</span></span>
<span id="cb3-3">head.FeatureLayer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ARCGIS_TOKEN"</span>), ...) {</span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect_layer</span>(x, n, token)</span>
<span id="cb3-5">}</span></code></pre></div>
<p>Now R CMD check won‚Äôt complain about it.</p>



 ]]></description>
  <category>pkg-dev</category>
  <guid>https://josiahparry.com/posts/2023-11-27-custom-head-method/</guid>
  <pubDate>Mon, 27 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Building a DataFusion CSV reader with arrow-extendr</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-11-24-dfusionrdr/</link>
  <description><![CDATA[ 




<p>Want to skip to the end with the source code? <em>Click here</em>.</p>
<section id="goal" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="goal">Goal</h2>
<p>For this tutorial we‚Äôre going to create a very simple Rust-based R package using <a href="https://extendr.github.io/"><code>extendr</code></a> and <a href="https://josiahparry.github.io/arrow-extendr/arrow_extendr/index.html"><code>arrow-extendr</code></a>. The package will use the new and very powerful <a href="https://arrow.apache.org/datafusion/"><strong><code>DataFusion</code></strong></a> crate to create a csv reader.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>‚ÄúDataFusion is a very fast, extensible query engine for building high-quality data-centric systems in Rust, using the Apache Arrow in-memory format.‚Äù</p>
</div></div><p>We‚Äôll learn a little bit about how <code>extendr</code>, Rust, and <code>arrow-extendr</code> works along the way.</p>
</section>
<section id="create-a-new-r-package" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="create-a-new-r-package">Create a new R package</h2>
<p>We will use <a href="https://usethis.r-lib.org/"><code>{usethis}</code></a> to create a new R package called <code>dfusionrdr</code> (prnounced d-fusion reader).</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>The following section is the standard process for creating a new Rust based R package. It‚Äôs a pretty simple process once you get used to it!</p>
</div></div><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfusionrdr"</span>)</span></code></pre></div>
<p>This will open a new R project with the scaffolding of an R package. From here, we need to make the R package into an extendr R package. To do so we use<code>rextendr::use_extendr()</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><code>use_extendr()</code> creates the directory <code>src/</code> a rust crate in <code>src/rust/</code> as wll as a few <code>Makevars</code> files in <code>src/</code> that are used to define how to compile the Rust library. Rust is a compiled language unlike R and Python which are interpreted. Meaning that instead of being able to run code line by line, we have to run it all at once.</p>
<p>Compiled code can be turned into something called a static library. R can call functions and objects from these libraries using the <code>.Call()</code> function. You do not need to worry about this function. It‚Äôs just for context. :)</p>
</div>
</div>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">rextendr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_extendr</span>()</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Before running this, make sure you have a compatible Rust installation by running <code>rextendr::rust_sitrep()</code>. If you do not, it will tell you need to do. If you‚Äôre on windows, you‚Äôre likely missing a target.</p>
</div></div></section>
<section id="building-your-package" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="building-your-package">Building your package</h2>
<p>Once you‚Äôve initialized extendr in your package, we can check to see if everything worked by running the <code>hello_world()</code> function that is included. To do so, we can build our package, then document it.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>I use the RStudio shortcut to build my package which is <code>cmd + shift + b</code> or if on Windows it‚Äôs (probably) <code>ctrl + shift + b</code>. If neither of those work for you, run <code>devtools::build()</code>.</p>
</div>
</div>
<p>To make R functions from Rust available into R, we run <code>rextendr::document()</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><code>rextendr::document()</code> will also compile your R package for you if need be. Personally, I prefer to build it then document it. For some reason‚Äîand it may just be me‚ÄîI find that compilation from the console can freeze? The cargo file lock is wonky and I probably mess it up a bunch.</p>
</div></div><p>Run <code>devtools::load_all()</code> to bring the documented functions into scope and run the function!</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>()</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hello_world</span>()</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "Hello world!"</span></span></code></pre></div>
<p>We‚Äôve now ran Rust code directly from R. Pretty simple Rust, but Rust nonetheless.</p>
</section>
<section id="adding-rust-dependencies" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="adding-rust-dependencies">Adding Rust dependencies</h2>
<p>Much like how we like to use R packages to make our lives easier, we can use Rust crates (libraries) to make do crafty things. To do so, we will open up our Rust crate in our preferred editor. I prefer VS Code.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>If you haven‚Äôt configured VS Code to use with Rust, there are like a million different ways to configure it. But at minimum, install the <code>rust-analyzer</code>, <code>BetterTOML</code>, and <code>CodeLLDB</code> extensions (I think CodeLLDB comes with the rust-analyzer though?)</p>
</div></div><p>Open <code>src/rust/</code> in VS Code. Then we will add 3 additional dependencies. These are</p>
<ul>
<li><code>datafusion</code>
<ul>
<li>a powerful Arrow-based <code>DataFrame</code> library (like Polars but different)</li>
</ul></li>
<li><code>tokio</code>
<ul>
<li>which will give us the ability to run code lazily and asynchronously which is required by <code>datafusion</code></li>
</ul></li>
<li><code>arrow_extendr</code>
<ul>
<li>this is a crate I built that lets us send Arrow data from Rust to R and back</li>
</ul></li>
</ul>
<p>In the terminal run the following</p>
<pre class="shell"><code>cargo add datafusion
cargo add tokio
cargo add arrow_extendr --git https://github.com/JosiahParry/arrow-extendr</code></pre>

<div class="no-row-height column-margin column-container"><div class="">
<p><code>arrow-extendr</code> is not published on crates.io yet so we need to pass the git flag to tell Rust where to find the library.</p>
</div></div><div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my preferred way of adding dependencies. If you open up <code>Cargo.toml</code> you‚Äôll now see these libraries added under the <code>[Dependencies]</code> heading.</p>
</div>
</div>
<section id="making-r-work-with-datafusion" class="level3">
<h3 class="anchored" data-anchor-id="making-r-work-with-datafusion">Making R work with DataFusion</h3>
<p><code>DataFusion</code> requires one additional C library that we need to use we need to add it to our <code>Makevars</code>. This is not something you typically have to do, but DataFusion requires it from us.</p>
<p>Open <code>Makevars</code> and <code>Makevars.win</code>. One the line that starts with <code>PKG_LIBS</code> add <code>-llzma</code> to the end.</p>
<p>Again, this is not a common thing you have to do. This is specifically for our use case.</p>
</section>
</section>
<section id="building-our-csv-reader" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="building-our-csv-reader">Building our CSV Reader</h2>
<p>Open <code>src/lib.rs</code>. This is where your R package is defined. For larger packages you may want to break it up into multiple smaller files. But our use case is relatively small (and frankly, not that simple, lol!).</p>
<p>Let‚Äôs first start by removing our hello_world example from our code. Delete the hello world function (lines 3-8) and remove it from the module declaration under <code>mod dfusionrdr</code>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>In order to make our Rust functions available to R, we need to include them in our <code>extendr_module!</code> macro call. Under <code>mod dfusionrdr</code> we can add additional functions there. Those incldued in there will be made available to R. If the have <code>/// @export</code> roxygen tag, then they will be exported in the R package as well.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_module!</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">mod</span> dfusionrdr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
<p>Let‚Äôs create the scaffolding for our first function <code>read_csv_dfusion()</code></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb6-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>extendr<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// @export </span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">  <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">rprintln!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We will read the csv file at: `{csv_path}`"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<ol type="1">
<li>The <code>#[extendr]</code> macro indicates that this function will be made available to R.</li>
<li>We add <code>/// @export</code> to indicate that our function will be exported to R. We can add roxygen2 documentation to our functions by prefixing with <code>///</code> which a documentation comment wheras <code>//</code> is a normal comment.</li>
</ol>
</div></div><p>This function prints a message indicating we will read a CSV at the path provided. It takes one argument <code>csv_path</code> which is an <code>&amp;str</code>. A <code>&amp;str</code> in Rust is a like a scalar character in R e.g.&nbsp;<code>"my-file.csv"</code></p>
<p>Next we need to make sure the function is available to R in the module.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_module!</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">mod</span> dfusionrdr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion;</span>
<span id="cb7-4">}</span></code></pre></div>
<p>From RStudio, let‚Äôs build, document, and load again.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span>()    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. </span></span>
<span id="cb8-2">rextendr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">document</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. </span></span>
<span id="cb8-3">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load_all</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3.</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<ol type="1">
<li>Only run if you haven‚Äôt built with <code>cmd + shift + b</code></li>
<li>This brings functions into the <code>NAMESPACE</code> and updates arguments and outputs</li>
<li>Loads everything from your package into memory</li>
</ol>
</div></div><section id="import-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="import-dependencies">Import dependencies</h3>
<p>In order to use DataFusion to read dependencies we need to import it. A lot of Rust libraries have something called a <code>prelude</code>. The <code>prelude</code> is a special module that contains common structs, traits, enums, etc that are very useful for the crate. Notice that the top of your <code>lib.rs</code> includes <code>use extendr_api::prelude::*;</code> this brings all of the Rust based R objects into scope such as <code>Robj</code>, <code>Doubles</code>, <code>Integers</code> etc.</p>
<p>DataFusion also has a useful <code>prelude</code> that we want to bring into scope. We will add <code>use datafusion::prelude::*;</code> to the top of our file (much like adding <code>library()</code>). This brings important objects into scope for us. We will also need <code>tokio::runtime::Runtime</code> as well.</p>
<p>The first 3 lines of your <code>lib.rs</code> should look like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_api::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">datafusion::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">tokio::runtime::</span>Runtime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
<section id="context-and-runtime" class="level3">
<h3 class="anchored" data-anchor-id="context-and-runtime">Context and Runtime</h3>
<p><code>DataFusion</code> requires something called a <a href="https://docs.rs/datafusion/latest/datafusion/execution/context/struct.SessionContext.html"><code>SessionContext</code></a>. The session context</p>
<blockquote class="blockquote">
<p>‚Äúmaintains the state of the connection between a user and an instance of the DataFusion engine.‚Äù</p>
</blockquote>
<p>We need to instantiate this struct inside of our function.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>We now have a <code>ctx</code> object which we can use to read our csv. It has a method called <code>read_csv()</code>. It requires the path of a csv to read as well as a struct called <code>CsvReadOptions</code> which determines how it will be read into memory. We will pass <code>csv_path</code> to the first argument and create a default options struct with the <code>new()</code> method.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb11-4">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-5">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb11-6">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This will compile with a bunch of warnings about unused variables. But, more importantly, the <code>csv</code> variable we created is special. If you have your Rust analyzer configured you should see that it is of type <code>impl Future&lt;Output = Result &lt;..., ...&gt;&gt;</code>. That right there is problematic!</p>
<p>When you see <code>impl Future&lt;...&gt;</code> that tells us it is an asynchronous result that needs to be polled and executed. <code>async</code> functions are lazy. They don‚Äôt do anything until you ask it to. The way to do this is by calling the <code>.await</code> attribute. We can then <code>unwrap()</code> the results and store it into another variable.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>It‚Äôs typically a pretty bad idea to use <code>.unwrap()</code> since the program will ‚Äúpanic!‚Äù if it does not get a result that it expected. But it‚Äôs a pretty handy way to get working code without error handling. I typically handle errors after I‚Äôve gotten the bulk of what I want working.</p>
</div>
</div>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb12-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sdf"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-5">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb12-6">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>If we run <code>cargo check</code> in our terminal we will get the message:</p>
<pre><code>error[E0728]: `await` is only allowed inside `async` functions and blocks</code></pre>
<p>One way to get this to work would be to add <code>async fn</code> instead of <code>fn</code> but that isn‚Äôt supported by <code>extendr</code> since R is single threaded and doesn‚Äôt support <code>async</code>. So how do we get around this?</p>
</section>
<section id="async-with-extendr-and-tokio" class="level3">
<h3 class="anchored" data-anchor-id="async-with-extendr-and-tokio"><code>async</code> with <code>extendr</code> and <code>tokio</code></h3>
<p>In order to run async functions we need to execute it in a runtime. <a href="https://tokio.rs/"><code>tokio</code></a> provides this for us with the <code>Runtime</code> struct. It lets us run <code>impl Future&lt;...&gt;</code> in a non async function!</p>
<p>We‚Äôll modify our function definition to</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb14-5">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-6">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb14-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>With the <code>Runtime</code> object <code>rt</code> we can call the <code>block_on()</code> method which takes a <code>Future</code> and runs it until it has completed. This means that we don‚Äôt get to use async functionality‚Äîe.g.&nbsp;executing 2 or more things at the same time‚Äîbut we still get to take the result!</p>
<p>Let‚Äôs read the csv into an object called <code>df</code> using the <code>block_on()</code> method.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb15-5">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-6">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb15-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-8"></span>
<span id="cb15-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(csv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The analyzer shows that this is a <code>DataFrame</code>. Awesome! Now, how can we get this into memory?</p>
</section>
<section id="sending-dataframes-to-r-with-arrow-extendr" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="sending-dataframes-to-r-with-arrow-extendr">Sending <code>DataFrame</code>s to R with arrow-extendr</h3>
<p>This is where arrow-extendr comes into play. arrow-extendr provides a couple of traits which allow us to convert a number of arrow-rs types into an <code>Robj</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>See my post on <a href="https://josiahparry.com/posts/2023-03-01-rust-traits-for-r-programmers/">Rust traits for R users</a></p>
</div></div><div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>An <code>Robj</code> is <code>extendr</code>‚Äôs catch all for any type of object that can be returned to R</p>
</div>
</div>
<p>The <code>IntoArrowRobj</code> trait can convert a <code>Vec&lt;RecordBatch&gt;</code> into an <code>Robj</code>. The <a href="https://arrow.apache.org/docs/r/reference/RecordBatch-class.html">R documentation</a> for a <code>RecordBatch</code> says</p>
<blockquote class="blockquote">
<p>‚ÄúA record batch is a collection of equal-length arrays matching a particular Schema. It is a table-like data structure that is semantically a sequence of fields, each a contiguous Arrow Array.‚Äù</p>
</blockquote>
<p>Based on that, a <code>Vec&lt;RecordBatch&gt;</code> is a collection of chunks of a table-like data structures.</p>
<p><code>DataFrame</code>s have a method <code>.collect()</code> which creates a <code>Vec&lt;RecordBatch&gt;</code>.</p>
<p>Let‚Äôs modify our function to turn the DataFrame into a <code>Vec&lt;RecordBatch&gt;</code>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>All things with DataFusion are done async so we need to wrap them in <code>rt.block_on()</code>.</p>
</div>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb16-5">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-6">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb16-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// create a dataframe from the csv</span></span>
<span id="cb16-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(csv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// collect the results into record batches</span></span>
<span id="cb16-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collect())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>With this, we can send the results to R with the <code>into_arrow_robj()</code> method! First we need to add <code>use arrow_extendr::to::IntoArrowRobj;</code> to the top of our script to bring the trait into scope.</p>
<p>Then in our function we need to specify the return type as <code>Robj</code> (see the first line of the definition <code>-&gt; Robj</code>) and then turn <code>res</code> into an <code>Robj</code></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb17-5">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-6">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb17-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-8"></span>
<span id="cb17-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// create a dataframe from the csv</span></span>
<span id="cb17-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(csv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-11"></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// collect the results into record batches</span></span>
<span id="cb17-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collect())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-14"></span>
<span id="cb17-15">    res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_arrow_robj()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb17-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="handling-arrow-rs-from-r" class="level3">
<h3 class="anchored" data-anchor-id="handling-arrow-rs-from-r">Handling arrow-rs from R</h3>
<p>Let‚Äôs rebuild and document our function again.</p>
<p>I‚Äôve added a csv of <a href="https://allisonhorst.github.io/palmerpenguins/"><code>{palmerpenguins}</code></a> to the <code>inst/</code> folder of our package for testing. Let‚Äô try reading this in.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv_dfusion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/penguins.csv"</span>)</span>
<span id="cb18-2">res</span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;nanoarrow_array_stream struct&lt;rowid: int64, species: string, island: string, bill_length_mm: string, bill_depth_mm: string, flipper_length_mm: string, body_mass_g: string, sex: string, year: int64&gt;&gt;</span></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;  $ get_schema:function ()  </span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;  $ get_next  :function (schema = x$get_schema(), validate = TRUE)  </span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;  $ release   :function ()  </span></span></code></pre></div>
<p>Now, this doesn‚Äôt look very familiar to most R users. This is an object from the <a href="https://arrow.apache.org/nanoarrow/0.3.0/r/index.html"><code>{nanoarrow}</code></a> R package called <code>"nanoarrow_array_stream"</code>. This is how data is received from Rust in R. We can process batches from this ‚Äústream‚Äù using the method <code>get_next()</code>. But there‚Äôs a handy <code>as.data.frame()</code> method for it.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a good time to note that you should add <code>nanoarrow</code> as a dependency of your package explicitly with <code>usethis::use_package("nanoarrow")</code>.</p>
</div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv_dfusion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/penguins.csv"</span>)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(res) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   rowid species    island bill_length_mm bill_depth_mm flipper_length_mm</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1     1  Adelie Torgersen           39.1          18.7               181</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2     2  Adelie Torgersen           39.5          17.4               186</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3     3  Adelie Torgersen           40.3            18               195</span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 4     4  Adelie Torgersen             NA            NA                NA</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 5     5  Adelie Torgersen           36.7          19.3               193</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 6     6  Adelie Torgersen           39.3          20.6               190</span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   body_mass_g    sex year</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1        3750   male 2007</span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2        3800 female 2007</span></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3        3250 female 2007</span></span>
<span id="cb19-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 4          NA     NA 2007</span></span>
<span id="cb19-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 5        3450 female 2007</span></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 6        3650   male 2007</span></span></code></pre></div>
<p>Boom! We‚Äôve written ourselves a reader! Let‚Äôs do a simple bench mark comparing it to <code>readr</code>.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dfusionrdr)</span>
<span id="cb20-2">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">datafusion =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv_dfusion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/penguins.csv"</span>)),</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">readr =</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/penguins.csv"</span>),</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb20-6">)</span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; # A tibble: 2 √ó 6</span></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`</span></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;</span></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1 datafusion  922.3¬µs   1.04ms     915.     1.07MB      0  </span></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2 readr        14.6ms  15.31ms      65.6    13.2MB     80.8</span></span></code></pre></div>
<p>Insanely fast!</p>
<hr>
</section>
</section>
<section id="source-code" class="level2">
<h2 class="anchored" data-anchor-id="source-code">Addendum</h2>
<p>The source code for the entire package is below. It also includes a function <code>read_sql_csv_dfusion()</code> which takes a SQL statement and reads it into memory if you want to explore that. For example:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT count(*) as "n", "species" FROM csv GROUP BY "species"'</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(</span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_sql_csv_dfusion</span>(query, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inst/penguins.csv"</span>) </span>
<span id="cb21-5">)</span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     n   species</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1  68 Chinstrap</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2 152    Adelie</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3 124    Gentoo</span></span></code></pre></div>
<section id="source-code-1" class="level3">
<h3 class="anchored" data-anchor-id="source-code-1">Source code:</h3>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>lib.rs</strong></pre>
</div>
<div class="sourceCode" id="cb22" data-filename="lib.rs" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">arrow_extendr::to::</span>IntoArrowRobj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_api::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">datafusion::prelude::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*;</span></span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">tokio::runtime::</span>Runtime<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">use</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">std::result::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>extendr<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/// @export</span></span>
<span id="cb22-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_csv_dfusion(csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>read_csv(</span>
<span id="cb22-13">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-14">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()</span>
<span id="cb22-15">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-16"></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// create a dataframe from the csv</span></span>
<span id="cb22-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(csv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-19"></span>
<span id="cb22-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// collect the results into record batches</span></span>
<span id="cb22-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collect())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-22"></span>
<span id="cb22-23">    res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_arrow_robj()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb22-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-25"></span>
<span id="cb22-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>extendr<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_sql_csv_dfusion(sql_query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Robj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Error</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Runtime::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">SessionContext::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-30"></span>
<span id="cb22-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> csv_tbl_fut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>register_csv(</span>
<span id="cb22-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-33">        csv_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-34">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">CsvReadOptions::</span>new()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-35">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-36"></span>
<span id="cb22-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// // we dont assign it to anything because we're just ensuring that it gets ran</span></span>
<span id="cb22-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(csv_tbl_fut)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-39"></span>
<span id="cb22-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// // create a plan</span></span>
<span id="cb22-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sql(sql_query))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-42"></span>
<span id="cb22-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// // collect into a vector of record batches</span></span>
<span id="cb22-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>block_on(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collect())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-45"></span>
<span id="cb22-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// return the result to R</span></span>
<span id="cb22-47">    res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_arrow_robj()</span>
<span id="cb22-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-49"></span>
<span id="cb22-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to generate exports.</span></span>
<span id="cb22-51"></span>
<span id="cb22-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This ensures exported functions are registered with R.</span></span>
<span id="cb22-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// See corresponding C code in `entrypoint.c`.</span></span>
<span id="cb22-54"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_module!</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">mod</span> dfusionrdr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> read_sql_csv_dfusion;</span>
<span id="cb22-57">    fn read_csv_dfusion;</span>
<span id="cb22-58">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Cargo.toml</strong></pre>
</div>
<div class="sourceCode" id="cb23" data-filename="Cargo.toml" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[package]</span></span>
<span id="cb23-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">dfusionrdr</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb23-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">publish</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb23-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">0.1.0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb23-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">edition</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">2021</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[lib]</span></span>
<span id="cb23-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">crate-type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">staticlib</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">dfusionrdr</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[dependencies]</span></span>
<span id="cb23-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">arrow_extendr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">git</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/JosiahParry/arrow-extendr"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb23-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">datafusion</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"33.0.0"</span></span>
<span id="cb23-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr-api</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb23-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tokio</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.34.0"</span></span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>rust</category>
  <category>pkg-dev</category>
  <category>extendr</category>
  <category>arrow</category>
  <guid>https://josiahparry.com/posts/2023-11-24-dfusionrdr/</guid>
  <pubDate>Sat, 25 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Enums in R: towards type safe R</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-11-10-enums-in-r/</link>
  <description><![CDATA[ <p>Hadley Wickham has recently dropped a new draft section of his book <a href="https://design.tidyverse.org/">Tidy Design Principles</a> on <a href="https://design.tidyverse.org/boolean-strategies.html">enumerations and their use in R</a>.</p>
<p>In short, <strong>enumerations</strong> enumerate (list out) the possible values that something might take on. In R we see this most often in function signatures where an argument takes a scalar value but all possible values are listed out.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I will refer to enumerations as enums from here on.</p>
</div></div><section id="enums-in-r" class="level2"><h2 class="anchored" data-anchor-id="enums-in-r">Enums in R</h2>
<p>A good example is the <code><a href="https://rdrr.io/r/stats/cor.html">cor()</a></code> function from the base package <code>stats</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/args.html">args</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (x, y = NULL, use = "everything", method = c("pearson", 
    "kendall", "spearman")) 
NULL</code></pre>
</div>
</div>
<p>The possible values for <code>method</code> are <code>"pearson"</code>, <code>"kendall"</code>, or <code>"spearman"</code> but all values are listed inside of the function definition.</p>
<p>Inside of the function, though, <code>match.arg(method)</code> is used to ensure that the provided value to the <code>method</code> argument is one of the provided values.</p>
<p>Hadley makes the argument that we should prefer an enumeration to a boolean flag such as <code>TRUE</code> or <code>FALSE</code>. I agree!</p>
<section id="a-real-world-example" class="level3"><h3 class="anchored" data-anchor-id="a-real-world-example">A real world example</h3>
<p>A post on mastodon makes a point that the function <code><a href="https://r-spatial.github.io/sf/reference/st_make_grid.html">sf::st_make_grid()</a></code> has an argument <code>square = TRUE</code> where when set to <code>FALSE</code> hexagons are returned.</p>
<iframe src="https://mastodon.social/@eliocamp/111387155503851033/embed" width="100%" height="300px" allowfullscreen="allowfullscreen" sandbox="allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms">
</iframe>
<p>In this case, it‚Äôs very clear that an enum would be better! For example we can improve the signature like so:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">st_make_grid</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grid_shape</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hexagon"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ensure only one of the provided grid shapes are used</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/match.arg.html">match.arg</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grid_shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... rest of function </span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section></section><section id="enums-in-rust" class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="enums-in-rust">Enums in Rust</h2>
<p>When I first started using rust enums made no sense to me. In Rust, enums are a first class citizen that are treated as their own <em>thing</em>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I‚Äôm not really sure what to call <em>things</em> in Rust. Are they all objects?</p>
</div></div><p>We make them by defining the name of the enum and the <strong><em>variants</em></strong> they may take on.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">enum</span> GridShape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">  Square<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-3">  Hexagon</span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Now you can use this enum <code>GridShape</code> to specify one of two types: <code>Square</code> or <code>Hexagon</code>. Syntactically, this is written <code>GridShape::Square</code> and <code>GridShape::Hexagon</code>.</p>
<p>Enums are very nice because we can match on the variants and do different things based on them. For example we can have a function like so:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> which_shape(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> GridShape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">GridShape::</span>Square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We have a square!"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">GridShape::</span>Hexagon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hexagons are the bestagons"</span>)</span>
<span id="cb5-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>It takes an argument <code>x</code> which is a <code>GridShape</code> enum. We <a href="https://doc.rust-lang.org/book/ch06-02-match.html">match</a> on the possible variants and then <em>do something</em>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Inside of the match statement each of the possible variants of the enum have to be written out. These are called <strong>match arms</strong>. The left side lists the variant where as the right portion (after <code>=&gt;</code>) indicates what will be executed if the left side is matched (essentially if the condition is true).</p>
</div></div><p>With this function we can pass in specific variants and get different behavior.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs">
<li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">GridShape::Hexagon</a></li>
<li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">GridShape::Square</a></li>
</ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which_shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridShape</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Hexagon</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Hexagons are the bestagons</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which_shape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridShape</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Square</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; We have a square!</span></span></code></pre></div>
</div>
</div>
</div>
</section><section id="making-an-s7-enum-object-in-r" class="level2 page-columns page-full"><h2 class="anchored" data-anchor-id="making-an-s7-enum-object-in-r">Making an S7 enum object in R</h2>
<p>I think R would benefit from having a <em>‚Äúreal‚Äù</em> enum type object. Having a character vector of valid variants and checking against them using <code><a href="https://rdrr.io/r/base/match.arg.html">match.arg()</a></code> or <code><a href="https://rlang.r-lib.org/reference/arg_match.html">rlang::arg_match()</a></code> is great but I think we can go further.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Since learning Rust, I think having more strictness can make our code much better and more robust. I think adding enums would be a good step towards that</p>
</div></div><p>I‚Äôve prototyped an <code>Enum</code> type in R using the new <code>S7</code> object system that might point us towards what an enum object in the future might look like for R users.</p>
<section id="design-of-an-enum" class="level3"><h3 class="anchored" data-anchor-id="design-of-an-enum">Design of an Enum</h3>
<p>For an enum we need to know what the valid <strong>variants</strong> are and what the current <strong>value</strong> of the enum is. These would be the two properties.</p>
<p>An enum S7 object must also make sure that a value of an Enum is one of the valid variants. Using the <code>GridShape</code> enum the valid variants would be <code>"Square"</code> and <code>"Hexagon"</code>. A GridShape enum could not take, for example, <code>"Circle"</code> since it is not a listed variant.</p>
</section><section id="using-an-abstract-class" class="level3 page-columns page-full"><h3 class="anchored" data-anchor-id="using-an-abstract-class">Using an abstract class</h3>
<p>To start, we will create an abstract S7 class called <code>Enum</code>.</p>
<blockquote class="blockquote">
<p>‚Äú_an abstract class is a generic class (or type of object) used as a basis for creating specific objects that conform to its protocol, or the set of operations it supports‚Äù ‚Äî <a href="https://www.techopedia.com/definition/17408/abstract-class">Source</a></p>
</blockquote>
<p>The <code>Enum</code> class will be used to create other <code>Enum</code> objects.</p>
<div class="cell">
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://github.com/rconsortium/S7/">S7</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new Enum abstract class</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Enum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rconsortium.github.io/S7/reference/new_class.html">new_class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enum"</span>,</span>
<span>  properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    Value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class_character</span>,</span>
<span>    Variants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class_character</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  validator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span>    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/length.html">length</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1L</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enum value's are length 1"</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Value</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/match.html">%in%</a></span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Variants</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enum value must be one of possible variants"</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>, </span>
<span>  abstract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>In this code chunk we specify that there are 2 properties: <code>Value</code> and <code>Variant</code> each must be a character type. <code>Value</code> will be the value of the enum. It would be the right hand side of <code>GridShape::Square</code> in Rust‚Äôs enum, for example. <code>Variants</code> is a character vector of all of the possible values it may be able to take on. The validator ensures that <code>Value</code> must only have 1 value. It also ensures that <code>Value</code> is one of the enumerated <code>Variants</code>. This <code>Enum</code> class will be used to generate other enums and cannot be instantiated by itself.</p>
<p>We can create a new enum factory function with the arguments:</p>
<ul>
<li>
<code>enum_class</code> the class of the enum we are creating</li>
<li>
<code>variants</code> a character vector of the valid variant values</li>
</ul>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new enum constructor </span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">new_enum_class</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enum_class</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">variants</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rconsortium.github.io/S7/reference/new_class.html">new_class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">enum_class</span>,</span>
<span>    parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Enum</span>,</span>
<span>    properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>      Value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class_character</span>,</span>
<span>      Variants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rconsortium.github.io/S7/reference/new_property.html">new_property</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class_character</span>, default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">variants</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>    constructor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rconsortium.github.io/S7/reference/new_class.html">new_object</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rconsortium.github.io/S7/reference/S7_object.html">S7_object</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, Value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Value</span>, Variants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">variants</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Note that the <code>constructor</code> here only takes a <code>Value</code> argument. We do this so that users cannot circumvent the pre-defined <strong>variants</strong>.</p>
</div></div><p>With this we can now create a <code>GridShape</code> enum in R!</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GridShape</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_enum_class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GridShape"</span>,</span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hexagon"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">GridShape</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;GridShape&gt; class
@ parent     : &lt;Enum&gt;
@ constructor: function(Value) {...}
@ validator  : &lt;NULL&gt;
@ properties :
 $ Value   : &lt;character&gt;
 $ Variants: &lt;character&gt;</code></pre>
</div>
</div>
<p>This new object will construct new <code>GridShape</code> enums for us.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridShape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;GridShape&gt;
 @ Value   : chr "Square"
 @ Variants: chr [1:2] "Square" "Hexagon"</code></pre>
</div>
</div>
<p>When we try to create a GridShape that is not one of the valid variants we will get an error.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridShape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Triangle"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;GridShape&gt; object is invalid:
- enum value must be one of possible variants</code></pre>
</div>
</div>
</section><section id="making-a-print-method" class="level3"><h3 class="anchored" data-anchor-id="making-a-print-method">Making a print method</h3>
<p>For fun, I would like <code>Enum</code> objects to print like how I would use them in Rust. To do this we can create a custom print method</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print method for enums</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since this is an abstract class we get the first class (super)</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">print.Enum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cat.html">cat</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/class.html">class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"::"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Value</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/invisible.html">invisible</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Since <code>Enum</code>s will only ever be a sub-class we can confidently grab the first element of the <code>class(enum_obj)</code> which is the super-class of the enum. We paste that together with the value of the enum.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">square</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GridShape</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">square</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>GridShape::Square</code></pre>
</div>
</div>
</section></section><section id="drawing-even-more-from-rust" class="level2"><h2 class="anchored" data-anchor-id="drawing-even-more-from-rust">Drawing even more from Rust</h2>
<p>Rust enums are even more powerful than what I briefly introduced. Each variant of an enum can actually be <em>typed</em>!!! Take a look at the example from <a href="https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html">The Book‚Ñ¢</a>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">enum</span> Message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-2">    Quit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-3">    Move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb18-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Write</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-5">    ChangeColor(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">i32</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In this enum there are 4 variants. The first <code>Quit</code> doesn‚Äôt have any associated data with it. But the other three do! The second one <code>Move</code> has two fields <code>x</code> and <code>y</code> which contain integer values. <code>Write</code> is a tuple with a string in it and <code>ChangeColor</code> has 3 integer values in its tuple. These can be extracted.</p>
<p>A silly example function that illustrates how each value can be used can be</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">fn</span> which_msg(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Message) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-3">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Message::</span>Quit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm a quitter"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-4">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Message::</span>Move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span>  <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move over {x} and up {y}"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-5">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Message::</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Write</span>(msg) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your message is: {msg}"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-6">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Message::</span>ChangeColor(r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span>  <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">println!</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your RGB ({r}, {g}, {b})"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>When a variant with data is passed in the values can be used. For example</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which_msg</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Message</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ChangeColor</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">155</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>;</span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Your RGB (0, 155, 200)</span></span></code></pre></div>
<section id="extending-it-to-r" class="level3"><h3 class="anchored" data-anchor-id="extending-it-to-r">Extending it to R</h3>
<p>What would this look like if we extended it to an R based enum object? I suspect the <code>Variants</code> would be a list of prototypes such as those from <a href="https://vctrs.r-lib.org/"><code>{vctrs}</code></a>. The <code>Value</code> would have to be validated against all of the provided prototypes to ensure that it is one of the provided types.</p>
<p>I‚Äôm not sure how I would code this up, but I think that would be a great thing to have.</p>


</section></section> ]]></description>
  <category>r</category>
  <category>package-dev</category>
  <category>rust</category>
  <guid>https://josiahparry.com/posts/2023-11-10-enums-in-r/</guid>
  <pubDate>Fri, 10 Nov 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Export Python functions in R packages</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-10-28-python-fns/</link>
  <description><![CDATA[ 




<p>I was asked a really interesting question by <a href="https://github.com/benyamindsmith"><span class="citation" data-cites="benyamindsmith">@benyamindsmith</span></a> yesterday. The question was essentially:</p>
<blockquote class="blockquote">
<p><em>How can one export a python üêç function in an R package üì¶?</em></p>
</blockquote>
<p>I proposed my solution as a very minimal R package called <a href="https://github.com/JosiahParry/pyfns"><code>{pyfns}</code></a>.</p>
<p>It is an R package with one function: <code>hello_world()</code>.</p>
<section id="how-it-works" class="level2">
<h2 class="anchored" data-anchor-id="how-it-works">How it works</h2>
<p>The process is <em>fairly</em> simple.</p>
<ul>
<li>We create an environment inside of our package</li>
<li>On package start-up we source python scripts using <code>reticulate::source_python()</code> into the new environment</li>
<li>We create R wrapper functions that call the reticulated function.</li>
</ul>
<p>Example usage:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">pyfns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hello_world</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Helloooo world"</code></pre>
</div>
</div>
</section>
<section id="storing-python-scripts" class="level2">
<h2 class="anchored" data-anchor-id="storing-python-scripts">Storing Python Scripts</h2>
<p>Store python scripts inside of <code>inst/</code>. These files can be read using <code>system.file()</code>. In this example <code>inst/helloworld.py</code> contains</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hello_world():</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helloooo world"</span></span></code></pre></div>
</section>
<section id="creating-an-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-environment">Creating an environment</h2>
<p>Before we can source python scripts, we must create an environment to soure them into. This is done in <code>R/env.R</code> like so</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">pyfn_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span></code></pre></div>
</section>
<section id="sourcing-scripts" class="level2">
<h2 class="anchored" data-anchor-id="sourcing-scripts">Sourcing scripts</h2>
<p>Scripts are sourced in <code>R/zzz.R</code> in which there is an <code>.onLoad()</code> function call. This gets called only once when the package is loaded.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">.onLoad <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(libname, pkgname){</span>
<span id="cb5-2">  reticulate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_python</span>(</span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"helloworld.py"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyfns"</span>),</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> pyfn_env</span>
<span id="cb5-5">  )</span>
<span id="cb5-6">}</span></code></pre></div>
<p>In this chunk we use <code>reticulate::source_python()</code> to bring the python function into scope. The function needs a path to the python script that we want to source. This is where <code>system.file()</code> comes into play. It can access files stored in <code>inst</code>. <em>Note that it does not include <code>inst</code></em>. And most importantly we set <code>envir = pyfn_env</code> which is the environment we created in <code>R/env.R</code></p>
</section>
<section id="wrapper-functions" class="level2">
<h2 class="anchored" data-anchor-id="wrapper-functions">Wrapper functions</h2>
<p>Since the functions are being sourced into <code>pyfn_env</code> they can be called from the environment directly. In <code>R/env.R</code>, the R function <code>hello_world()</code> is just calling the <code>hello_world()</code> python function from the <code>pyfn_env</code>. If there were arguments we can pass them in using <code>...</code> in the outer function or recreating the same function arguments.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'@export</span></span>
<span id="cb6-2">hello_world <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb6-3">  pyfn_env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hello_world</span>()</span>
<span id="cb6-4">}</span></code></pre></div>


</section>

 ]]></description>
  <category>r</category>
  <category>python</category>
  <category>package-dev</category>
  <guid>https://josiahparry.com/posts/2023-10-28-python-fns/</guid>
  <pubDate>Sat, 28 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Where am I in the sky?</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-10-28/</link>
  <description><![CDATA[ 




<p>When I was flying back from the Spatial Data Science Across Langauge event from Frankfurt to Atlanta the plane I was bored beyond measure. The plane had no wifi to connect to. I had already watched a movie and couldn‚Äôt be bothered by a podcast. I wanted to know where I was.</p>
<p>When looking at the onboard ‚ÄúAbout this flight‚Äù information, they didn‚Äôt show a map even. The gave us our coordinates in degrees and minutes. Helpful right?</p>
<p>Well, in an attempt to figure out where the hell I was I wrote some code. Here it is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(units)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>udunits database from /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/units/share/udunits/udunits2.xml</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Given degrees and minutes calculate the coordinate</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' in degrees</span></span>
<span id="cb5-3">as_degree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(degrees, minutes) {</span>
<span id="cb5-4">  d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(degrees, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arc_degrees"</span>)</span>
<span id="cb5-5">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(minutes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arc_minutes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_units</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arc_degrees"</span>)</span>
<span id="cb5-7">  d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the country shapes</span></span>
<span id="cb5-11">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rnaturalearthdata<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>countries50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>() </span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter to North America</span></span>
<span id="cb5-14">usa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-15">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(continent <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North America"</span>, </span>
<span id="cb5-16">                subregion <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Northern America"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_geometry</span>() </span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a bounding box to crop myself to </span></span>
<span id="cb5-20">crp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_bbox</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>))</span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot N. America</span></span>
<span id="cb5-23">usa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_cast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POLYGON"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_filter</span>(</span>
<span id="cb5-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sfc</span>(crp) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_crs</span>(usa))</span>
<span id="cb5-29">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span>
<span id="cb5-31"></span>
<span id="cb5-32"></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add planes location.</span></span>
<span id="cb5-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb5-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_degree</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_degree</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>))),</span>
<span id="cb5-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb5-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb5-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb5-39">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://josiahparry.com/posts/2023-10-28/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>



 ]]></description>
  <category>r</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2023-10-28/</guid>
  <pubDate>Sat, 28 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Spatial Data Science Across Languages</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-09-20-sdsl/</link>
  <description><![CDATA[ 




<p>I feel very fortunate to have been invited to the first Spatial Data Science Across Languages (SDSL) workshop at the University of M√ºnster. I am even more fortunate that I have an employer who sees the value in an event such as this and be my patron for it.</p>
<p>The event brought together package maintainers from Julia, Python, and R languages to just <em>discuss</em>. The event was loosely framed around a few broad discussion topics that were varied and drifted.</p>
<p>In general, the theme of the workshop was ‚Äústandards.‚Äù We need standards be able to ensure cohesion not only <em>within</em> languages, but across them. Users should be able to move between languages and be able to expect similar behavior, have similar terminology, and expect the same analysis results.</p>
<section id="arrow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrow">Arrow</h2>
<p>We started everything off by discussing Arrow which set the theme of ‚Äústandards.‚Äù Arrow gets conflated at many thing all at once‚ÄîI do that. At the core Arrow is a memory format specification. It describes how data should be held in memory.</p>
<p>R holds objects in memory one way, Python another, and Julia another as well. Arrow describes just one way that specific types of object can be held in memory. GeoArrow is an extension of Arrow that specifies the memory layout for geometry arrays.</p>
<section id="geoarrow" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="geoarrow">GeoArrow</h3>
<p>Specifications like well-known text (WKT) and well-known binary (WKB) are encodings of a <em>single</em> geometry. GeoArrow recognizes that we almost never work with scalar objects alone. GeoArrow is a memory layout for an array of geometries.</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image.png" class="img-fluid"></p>
<p>If each language can hold Arrow arrays in memory, they can be passed from one tool to another with 0 cost. Python can create an arrow array and R can pick it up if it knows where it exists.</p>
<p>The current approach looks something like this. Each tool serializes its data in one way. In order for another tool to use it, the data needs to be copied (memory inefficient) and converted (computationally expensive) into the appropriate format.</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-2.png" class="img-fluid"></p>
<p>The Arrow specification would allow data handoff between tools to be much more seamless and look like so:</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-1.png" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Maybe we ought to start framing adoption of Arrow as an effort to be more ‚Äúgreen.‚Äù If we spend less time computing we use less energy which is overall a net positive for the world.</p>
</div></div><p>This is a massive productivity improvement. There‚Äôs no computation cost in converting between one format to another saving time, energy, and money.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>There‚Äôs a good chance that in order to adopt Arrow in <code>{sf}</code> there will be breaking changes. I am an advocate for breaking changes when they are for a good reason. Being on the leading edge is how to make a language succeed.</p>
<p>I also think if we can move towards a ‚Äútrait-driven‚Äù approach to spatial data frames, we can support both GeoArrow geometries as well as current <code>sfc</code> objects.</p>
<p><a href="https://github.com/JosiahParry/sdf">Read my spatial data frame manifesto.</a></p>
</div></div><p>The key thing though, is that in order for Arrow to be useful, <strong>it has to be adopted widely</strong>. If GeoPandas uses Arrow and <code>{sf}</code> does not, we have to go through the copy and convert process anyways.</p>
</section>
<section id="why-geoarrow-excites-me" class="level3">
<h3 class="anchored" data-anchor-id="why-geoarrow-excites-me">Why GeoArrow excites me</h3>
<p>The promise of Arrow and GeoArrow is that memory can be handed off between tools without any additional cost. This (in theory) lowers the bar for what is needed to hand off between tools and languages. Hopefully <a href="https://wesmckinney.com/blog/the-problem-with-the-data-science-language-wars/">ending the language wars</a></p>
<p><a href="https://github.com/kylebarron">Kyle Barron</a> demonstrated really cool example use-case where he created GeoArrow arrays using <a href="https://github.com/geopolars/geopolars">GeoPolars</a>. That array was then written to a buffer and picked up by javascript. Since there was no serialization or deserialization it was unbelievably fast!</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/image-3.png" class="img-fluid"></p>
<p>Additionally, we are seeing <a href="https://webassembly.org/">WebAssembly</a> proliferate in the data science community. <a href="https://webr.r-wasm.org/">WebR</a> provides R users with the ability to execute R in the browser. This is also possible in Python, Rust, Go, and I‚Äôm sure many others. Each language can be compiled to be used in the browser and hand off components between them.</p>
<p>Client side computation will reduce the need for server side operations. If we can reduce the amount of hours that servers are constantly running by offloading lighter operations into the browser, we may be able to save money, energy, be more green, and create tools that do not necessarily require an active internet connection.</p>
</section>
</section>
<section id="spatial-support" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="spatial-support">Spatial Support</h2>
<p>We also discussed the more esoteric topic of <strong>spatial support</strong>. This was completely new to me. Support defines the relationship between an attribute to the geometry. There are two kinds:</p>
<ul>
<li><strong>point support</strong> - a constant values associated with every location in a geometry
<ul>
<li><em>example</em>: temperature measurement at a weather station</li>
</ul></li>
<li><strong>block support</strong> - a value derived from aggregating measures over space
<ul>
<li><em>example</em>: population count in a census tract</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Read <a href="https://r-spatial.org/book/01-hello.html#sec-support">chapter 1.6 of Spatial Data Science</a> (SDS) for more on this topic.</p>
</div>
</div>
<p>When geometries are manipulated and the associated attributes come along for the ride, support assumptions are often violated resulting in inaccurate calculations or maps.</p>
<section id="attribute-geometry-relationships" class="level3">
<h3 class="anchored" data-anchor-id="attribute-geometry-relationships">Attribute-Geometry Relationships</h3>
<p>SDS formalizes the relationship between attributes and geometry a bit further in something they call the <strong>Attribute-Geometry Relationship (AGR)</strong>. Attributes of spatial features can have one of 3 types of AGR:</p>
<ul>
<li>constant value (i.e.&nbsp;point support)</li>
<li>aggregate value (i.e.&nbsp;block support)</li>
<li>identity (i.e.&nbsp;attribute unique to a geometry)</li>
</ul>
<p>Knowing the relationships between geometries can be useful in tracking the assumptions of analyses. For example, taking the mean of an <em>aggregate</em> attribute such as median age, creates as assumptions of homogeneity in the aggregated areas and can contribute to the <a href="https://en.wikipedia.org/wiki/Modifiable_areal_unit_problem">modifiable areal unit problem (MAUP)</a>.</p>
</section>
<section id="intensive-vs-extensive" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="intensive-vs-extensive">Intensive vs Extensive</h3>
<p>Spatial intensive vs extensive variables were also discussed in the context of spatial interpolation. I‚Äôm still quite unclear on how to conceptualize intensive and extensive variables. <a href="https://github.com/MobiTobi">Tobias G</a> pointed out that these terms come from physics and provided a useful non-geometry motivating example.</p>
<blockquote class="blockquote">
<p>‚ÄúThe price of an ingot of gold is an extensive property and its temperature would be intensive.‚Äù</p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p>The common example is that population is extensive and population density is intensive. This requires the assumption that population is <em>constant</em> across space. So the examples are more confusing than helpful. I have yet to come up with an example of a spatially intensive variable that makes sense.</p>
<p>If you can think of one, please comment on below!</p>
</div></div><p><strong>Extensive</strong> variables are one that are associated with the physical geometry itself. <strong>Intensive</strong> ones <em>do not</em> change when a geometry is modified.</p>
<p>If an ingot of gold is split into half the price changes, each piece is now worth less than the whole. But, assuming the room temperature didn‚Äôt change, the temperature of each piece remained the same.</p>
</section>
<section id="domains" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="domains">Domains</h3>
<p>These properties of attributes are quite important but are forgotten about. One of the ideas raised in discussions was adding attribute-geometry relationship and a flag like <code>is_intensive</code> to a field domain.</p>
<p>A <a href="https://desktop.arcgis.com/en/arcmap/latest/manage-data/geodatabases/an-overview-of-attribute-domains.htm">Domain</a> is a concept that <em>I think</em> originated at Esri. It allows you to specify the field type, range of valid values, as well as policies that determine how fields behave when they are split or merged. <a href="https://github.com/OSGeo/gdal/releases/tag/v3.3.0">Field domains were added to GDAL in version 3.3</a>.</p>
<p>Is there utility in adding <code>AGR</code> and (ex/in)tensive flags to a field domain?</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Arrow allows for embedded metadata at an array and table level. Perhaps there should be a GeoArrow table (data frame) format spec too? I‚Äôd like that. It would fit with my generic spatial data frame manifesto as well.</p>
</div></div></section>
</section>
<section id="geodesic-first" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="geodesic-first">Geodesic first</h2>
<p>A good amount of attention was paid to geodesic coordinate operations. The conversation was kicked off by this ‚Äúmotivating example.‚Äù</p>
<p><img src="https://josiahparry.com/posts/2023-09-20-sdsl/geopandas-geodesic.png" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Really, I think this was just an excuse for Edzer to poke fun at the GeoPandas devs! üòµ‚Äçüí´ü§£</p>
</div></div><p>The example shows an area calculation on a dataset that uses a geographic coordinate system (GCS). Area, though, is typically calculated under the assumption that coordinates are on a plane (rectangle). With GCS, the data is on a circle. So if we calculate the area of angles the result is <em>definitely wrong</em>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I think about it like calculating the area but cutting through the Earth like so: <img src="https://josiahparry.com/posts/2023-09-20-sdsl/circle.png" class="img-fluid"></p>
</div></div><p>The open source ecosystem is behind on support of geodetic calculations. Data more often than not is captured using GCS and users often fail to project their data. It would be nice if tools did this.</p>
<p>R supports spherical geometries by using <a href="https://r-spatial.github.io/s2/">Google‚Äôs S2 library</a>. Python is presently building out support for S2. Some operations like buffering still aren‚Äôt made available by S2.</p>
<section id="the-full-polygon" class="level3">
<h3 class="anchored" data-anchor-id="the-full-polygon">The ‚Äúfull polygon‚Äù</h3>
<p>One interesting point that was brought up is that in a GCS there is a concept of a <strong>full polygon</strong>. This is the polygon that covers the entire ellipsoid. There is no way to capture this using typical coordinates.</p>
</section>
</section>
<section id="spatial-weights-matrix-serialization" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="spatial-weights-matrix-serialization">Spatial Weights Matrix Serialization</h2>
<p>Probably the second most interesting topic to me was around how to store spatial weights matrixes. We didn‚Äôt really discuss the ‚Äúhow‚Äù of holding it memory. Though I think they can be held in memory as a ragged Arrow array of indices or IDs. What was quite interesting was the concept of <em>serializing</em> the spatial weights matrix.</p>
<p><a href="https://martinfleischmann.net/">Martin</a> mentioned that in Pysal they had moved to serializing spatial weights as a parquet file which greatly improved their speed. In essence, spatial weights are stored in a 3 column table.</p>

<div class="no-row-height column-margin column-container"><div class="">
<table class="table">
<caption>Spatial Weights Matrix</caption>
<thead>
<tr class="header">
<th>i</th>
<th>j</th>
<th>wij</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3</td>
<td>0.5</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td>1</td>
<td>9</td>
<td>0.3</td>
</tr>
<tr class="even">
<td>2</td>
<td>7</td>
<td>0.2</td>
</tr>
</tbody>
</table>
</div></div><p>It was noted that additional metadata can be associated at the table level or column level. This can be very handy to keep track of things like the method for identifying neighbors, the weighting mechanism used, storing flags to know if the focal feature is included and maybe even remove weights if there is a constant value.</p>
<p>Additionally, since this is parquet, it can be handled and stored by a number of databases.</p>
<p>One benefit of using arrow here, is that we can conceivably have a future where spatial weights matrices are interchangeable between spdep, pysal, geoda, and ArcGIS.</p>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>I‚Äôm about to hop on a flight back to the US now‚Äî10 hours without internet is going to be a test of monk-like fortitude. I have left my strongest feels for another time. Chatting with devs from other languages makes is clear how great CRAN is as a package storage and testing mechanism but yet how utterly abysmal it is as a developer. I will write another post soon on the topics of retirement and how I think we can make CRAN a better place for developers.</p>
</section>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Additional links</h2>
<p>I‚Äôll add more here as I can (hopefully).</p>
<ul>
<li><a href="https://martinfleischmann.net/a-note-on-spatial-data-science-across-languages-vol.1/">Martin‚Äôs SDSL blog post</a></li>
</ul>


</section>

 ]]></description>
  <category>r</category>
  <category>r-spatial</category>
  <category>spatial</category>
  <guid>https://josiahparry.com/posts/2023-09-20-sdsl/</guid>
  <pubDate>Fri, 22 Sep 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Valve: putting R in production</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-08-22-valve-for-production/2023-08-22-valve-for-production.html</link>
  <description><![CDATA[ <p>This blog post is based on my most recent YouTube video. Please give it a watch!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/11FM-dxxi3M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<div class="cell">

</div>
<p>I‚Äôve been grinding on a new tool for a few months now. And I‚Äôm hyped to formally introduce you to it. It‚Äôs called <a href="https://valve.josiahparry.com">Valve</a> And Valve is going to make R in production kick a$$.üî•</p>
<p>We‚Äôve all seen those click bait articles saying ‚ÄúDon‚Äôt Put R in production‚Äù or telling you that R can‚Äôt make machine learning models for production. Those ‚Äúhot takes‚Äù are uninformed and can be applied to other languages such as Python. That‚Äôs a bunch of malarkey.</p>
<p><a href="https://towardsdatascience.com/dont-use-r-in-production-e2f4c9dd4a7b"><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-1.png" class="img-fluid quarto-figure-center" style="width:50.0%"></a></p>
<p>Let‚Äôs get right down to it. Let‚Äôs talk ‚Äúproduction.‚Äù And let me be clear: R belongs in production. But we as the R community need to learn how to do that and be better advocates.</p>
<p>When I say ‚Äúproduction‚Äù I‚Äôm talking about making your code work with any other system. And that‚Äôs where RESTful APIs come in. If I‚Äôve lost you at ‚ÄúRESTful‚Äù, <a href="https://www.youtube.com/watch?v=w4yHEQWct20&amp;list=UULFX78SUhrloA6Cn3aW_e8C_A&amp;index=22">watch my previous video here</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="https://www.youtube.com/watch?v=w4yHEQWct20&amp;list=UULFX78SUhrloA6Cn3aW_e8C_A&amp;index=22"><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-15.png" class="img-fluid quarto-figure-center" style="width:75.0%"></a></p>
</div></div><p>REST relies on HTTP, which is the foundation of the internet and is a common tongue. It‚Äôs like if Esperanto actually worked. REST APIs provide a language-agnostic way to expose functionality over the web.</p>
<p><a href="https://www.rplumber.io/">Plumber</a> is an R package that converts your R functions into a RESTful API meaning any tool that can communicate in HTTP can call your R functions. It converts R code like this into an http endpoint.</p>
<p>At it‚Äôs core Valve is a web server that runs multiple {plumber} APIs in parallel. Valve spins up and down plumber APIs as needed.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-21.png" class="img-fluid quarto-figure-center" style="width:75.0%"></p>
<p>It‚Äôs designed to work with any existing plumber API. And because of that it supports {vetiver} out of the box.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-22.png" class="img-fluid" style="width:50.0%"></p>
</div></div><p>Vetiver is a framework built by Julia Silge and Isabel Zimmerman from Posit that simplifies putting machine learning models built with tidymodels into a production setting. And since, the goal is R in production, Valve can be easily integrated into Docker containers and deployed with DigitalOcean, AWS, Azure, or whatever other orchestration tools you have available.</p>
<p>Valve is akin to Gunicorn for Flask apps and FastAPI.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[[1,1], [1]]">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/gunicor.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/flask.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/fastapi.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>To understand why Valve is so powerful, we need to first understand how plumber works and its limitations. Plumber works by writing a function definition and providing annotations using a special comment character <code>#*</code>. Let‚Äôs take a look at a very simple example.</p>
<p>The three main components of a plumber API are:</p>
<ul>
<li>the function definition</li>
<li>the request type <code>@post</code>
</li>
<li>endpoint <code>/add-2</code>
</li>
</ul>
<p>In a nutshell plumber works by spawning a single web server using the {httpuv} R package. The webserver captures incoming http requests, captures the provided parameters, body, and requested endpoint. Based on the endpoint, it passes the parameters to the function. The result is then ‚Äúserialized‚Äù into the correct output type. By default, this is <code>json</code>.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/plumber-nutshell.png" class="img-fluid"></p>
<p>For example, we might be calling the <code>/add-2</code> endpoint. The process looks a bit like this. We have a GET request. The endpoint is colored red. Then the parameters are colored blue. The request is captured by the web-server. The endpoints are checked. Then the parameters are passed to the function and the user gets the result.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/request.png" class="img-fluid"></p>
<p>You can see how this is powerful! But there is one major thing holding this back. This is all running in a single R process. R, like Python, is single threaded. That means each request that comes in has to be added to a queue. The next request cannot be processed until the previous one has been.</p>
<p>Valve helps by running multiple plumber APIs concurrently. Valve is built specifically for plumber, in Rust, and by leveraging the power Tokio framework. Instead of having a single plumber API and a single R process handling all requests, there is another web server handling all incoming requests. This web server is build using Tokio.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/plumber.png" class="img-fluid" style="width:33.0%"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/rustacean-flat-happy.png" class="img-fluid" style="width:33.0%"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/tokio.png" class="img-fluid" style="width:33.0%"></p>
</div>
</div>
</div>
<p>The app has a number of pre-specified worker threads. Each worker is capable of taking an incoming request, processing it, and returning a response. These worker threads will delegate the request to another plumber API. These plumber APIs are sitting in a connection pool waiting to be accessed. The APIs will spawn and de-spawn according to the amount of incoming traffic.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/valve.png" class="img-fluid"></p>
<p>What this means is that instead of being able to handle 1 request at a time, we can handle as many requests as there are workers concurrently. This allows us to take advantage of more than a single R process at a time and, as a result, we can utilize more of the compute resources available to us.</p>
<p>So how do you install Valve? There are two ways in which you can install Valve. The first is to use the Rust package manager Cargo. This is my personal recommendation. If you don‚Äôt have Rust and cargo installed, don‚Äôt worry it is the second easiest language I‚Äôve ever installed.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-12.png" class="img-fluid"></p>
<p>Follow this one liner and it‚Äôll handle the installation for you.</p>
<p>To install Valve with cargo run</p>
<pre class="shell"><code>cargo install valve-rs --no-default-features</code></pre>
<p>Doing this will install the Valve binary and make it available to you as a command line tool. Alternatively, if you want to install valve as an R package you can do so via the R-universe. The R-universe version has pre-built binaries for Windows, Mac, and Ubuntu which means you do not need to have rust installed. But again, its easy, so give it a shot!</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/install.packages.html">install.packages</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valve"</span>, </span>
<span>    repos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://josiahparry.r-universe.dev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cloud.r-project.org"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>To follow along with the rest of these demos you can check out code in the <a href="https://github.com/JosiahParry/youtube-tutorials/tree/main/intro-valve">github repository</a>.</p>
<p>Here I want to demo just how easy it is to use Valve and what the experience is like. For this simple example we will run a plumber API with one endpoint <code>/zzz</code> which will sleep for a specified amount of time. We‚Äôll create a Valve app with 10 workers and plumber APIs.</p>
<pre class="shell"><code>valve -n 10 -w 10</code></pre>
<p>You‚Äôll notice that only one API is spawned at the start. This is because connections are spawned based on incoming demand. As we send more requests, the plumber APIs will spawn. If, after a specified amount of time, they go stale, they will de-spawn. However, you do have the ability to control the minimum number of plumber APIs.</p>
<pre class="shell"><code>Valve starting at: 127.0.0.1:3000
Spawning plumber API at 127.0.0.1:11094</code></pre>
<p>We‚Äôre going to create a simple function <code>sleep()</code> which will call the zzz endpoint at a specified port for a specified amount of time. We‚Äôll use <code>furrr</code> to create 10 sessions and call the function 10 times on valve app.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sleep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">port</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">secs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">httr2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://httr2.r-lib.org/reference/request.html">request</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"127.0.0.1:"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">port</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sleep?zzz="</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">secs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">httr2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://httr2.r-lib.org/reference/req_perform.html">req_perform</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">httr2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://httr2.r-lib.org/reference/resp_body_raw.html">resp_body_string</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Now with the function defined we can use furrr to run the function in parallel</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://github.com/DavisVaughan/furrr">furrr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://future.futureverse.org/reference/plan.html">plan</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multisession</span>, workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
<p>We will call the function 10 times using <code><a href="https://furrr.futureverse.org/reference/future_map.html">future_map()</a></code> . The first time this runs we can see that more plumber APIs are being spawned. This takes somewhere between 3 and 4 seconds the first time we run it.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">furrr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multi_total</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multi_total</span> </span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Time difference of 3.653488 secs</span></span></code></pre></div>
</div>
<p>If you watch your terminal, you will see additional plumber connections being spawned.</p>
<pre class="shell"><code>Valve starting at: 127.0.0.1:3000
Spawning plumber API at 127.0.0.1:11094
Spawning plumber API at 127.0.0.1:35714
Spawning plumber API at 127.0.0.1:15674
Spawning plumber API at 127.0.0.1:30746
Spawning plumber API at 127.0.0.1:26860
Spawning plumber API at 127.0.0.1:54939
Spawning plumber API at 127.0.0.1:5592
Spawning plumber API at 127.0.0.1:46549
Spawning plumber API at 127.0.0.1:53346
Spawning plumber API at 127.0.0.1:44956</code></pre>
<p>If we run this again, we get something much closer to two seconds total for sending all 10 requests.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">furrr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multi_total</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span></span>
<span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">multi_total</span> </span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Time difference of 2.013385 secs</span></span></code></pre></div>
</div>
<p>Now, we can do the same thing with all 10 workers calling just one of the spawned plumber APIs.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">furrr</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://furrr.futureverse.org/reference/future_map.html">future_map</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24817</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">total</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Sys.time.html">Sys.time</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Time difference of 20.04956 secs</span></span></code></pre></div>
</div>
<p>That‚Äôs a huge different. That is a lot more performance that we are squeezing out of this plumber API by creating multiple to run concurrently.</p>
<p>In an R session load {valve}.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://github.com/JosiahParry/valve">valve</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Next, we will use the function <code><a href="https://rsgeo.josiahparry.com/reference/valve_run.html">valve_run()</a></code> to run our plumber API. This function has a lot of handy defaults to moderately scale your plumber API. By default it looks for the file <code>plumber.R</code> in your working directory.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rsgeo.josiahparry.com/reference/valve_run.html">valve_run</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plumber.R"</span>, n_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Valve app hosted at &lt;http://127.0.0.1:3000&gt;</span></span>
<span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Spawning plumber API at 127.0.0.1:49015</span></span></code></pre></div>
</div>
<p>The CLI works just like the R function with two differences. We call it from the command line and the syntax is a smidgen different.</p>
<p>From the command line we can run <code>valve ‚Äìhelp</code> to see the arguments that we can provide. The CLI has the same defaults as the R package.</p>
<pre class="shell"><code>valve --help
Usage: valve [-h &lt;host&gt;] [-p &lt;port&gt;] [-n &lt;n-max&gt;] [-w &lt;workers&gt;] [-f &lt;file&gt;] [--check-unused &lt;check-unused&gt;] [--max-age &lt;max-age&gt;] [--n-min &lt;n-min&gt;]

Distribute your plumber API in parallel.

Options:
  -h, --host        host to serve APIs on
  -p, --port        the port to serve the main application on
  -n, --n-max       the maximum number of plumber APIs to spawn
  -w, --workers     number of Tokio workers to spawn to handle requests
  -f, --file        path to the plumber API (default `plumber.R`)
  --check-unused    default 10. Interval in seconds when to check for unused
                    connections
  --max-age         default 5 mins. How long an API can go unused before being
                    killed in seconds.
  --n-min           the maximum number of plumber APIs to spawn
  --help            display usage information</code></pre>
<p>Now I want to illustrate scaling a machine learning model with {vetiver} and valve. They do so by wrapping the model into a plumber API. I‚Äôve created a sample plumber API based on <a href="https://juliasilge.com/blog/childcare-costs/">Julia‚Äôs recent Tidy Tuesday screencast in which she creates an XGBoost model</a>.</p>
<p><img src="https://josiahparry.com/posts/2023-08-22-valve-for-production/images/paste-14.png" class="img-fluid"></p>
<p>I‚Äôve taken this example and used vetiver to create a plumber API to serve predictions from this model. One could deploy this API as is with Docker or something like Posit Connect. If going down the Docker approach, we can make this a bit more performant by using Valve.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The scripts to generate the vetiver model and API are in the <a href="https://github.com/JosiahParry/youtube-tutorials/tree/main/intro-valve">Github repo</a>.</p>
</div>
</div>
<p>To make this into a Valve app all we need to do is pass provide the plumber API file to valve and we‚Äôre on our way! I‚Äôve written some simple bench marks using drill to compare the performance of the two approaches. With valve we will use 5 concurrent processes and test it.</p>
<pre class="shell"><code>valve -f vetiver-api.R -n 5 -w 5</code></pre>



 ]]></description>
  <category>rust</category>
  <category>r</category>
  <category>production</category>
  <guid>https://josiahparry.com/posts/2023-08-22-valve-for-production/2023-08-22-valve-for-production.html</guid>
  <pubDate>Tue, 22 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R is still fast: a salty reaction to a salty blog post</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://josiahparry.com/posts/2023-07-06-r-is-still-fast.html</link>
  <description><![CDATA[ <p>There‚Äôs this new <a href="https://matthewrkaye.com/posts/2023-06-29-lessons-learned-from-running-r-in-production/lessons-learned-from-running-r-in-production.html">blog post</a> making the rounds making some claims about why they won‚Äôt put R into production. Most notably they‚Äôre wheeling the whole ‚ÄúR is slow thing‚Äù again. And there are few things that grind my gears more than that type of sentiment. It‚Äôs almost always ill informed. I find that to be the case here too.</p>
<p>I wouldn‚Äôt have known about this had it 1) not mentioned my own Rust project <a href="https://github.com/JosiahParry/valve/">Valve</a> and 2) a kind stranger inform me about it on mastodon.</p>
<iframe src="https://fosstodon.org/@jimgar/110663477958759961/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen">
</iframe>
<p>I‚Äôve collected my reactions below as notes and sundry bench marks and bullet points.</p>
<section id="tldr" class="level2"><h2 class="anchored" data-anchor-id="tldr">TL;DR</h2>
<ul>
<li>There is a concurrent web server for R and I made it <a href="https://github.com/JosiahParry/valve/">Valve</a>
</li>
<li>Python is really fast at serializing json and R is slower</li>
<li>Python is really slow at parsing json and R is so so soooo much faster</li>
<li>To handle types appropriately, sometimes you have to program</li>
<li>There are mock REST API testing libraries <a href="https://enpiar.com/r/httptest/articles/httptest.html"><code>{httptest}</code></a> and <a href="https://docs.ropensci.org/webmockr/"><code>{webmockr}</code></a>
</li>
<li>Demand your service providers to make the tools you want</li>
<li>Ask and you shall receive</li>
<li>R can go into production</li>
<li><strong>PLEASE JUST TRY VALVE YOU‚ÄôLL LOVE IT</strong></li>
</ul></section><section id="production-services" class="level2"><h2 class="anchored" data-anchor-id="production-services">Production Services</h2>
<p>There are so many people using R in production in so many ways across the world. I wish Posit did a better job getting these stories out. As a former RStudio employee, I personally met people putting R in production in most amazing ways. From the US Department of State, Defense, Biotech companies, marketing agencies, national lotteries, and so much more. The one that sticks out the most is that <a href="https://www.linkedin.com/in/pmokhtarian/">Payam M.</a>, when at <a href="https://www.tabcorp.com.au/">Tabcorp</a> massively scaled their system using Plumber APIs and Posit Connect to such a ridiculous scale I couldn‚Äôt even believe.</p>
<section id="gunicorn-web-servers-and-concurrency" class="level3"><h3 class="anchored" data-anchor-id="gunicorn-web-servers-and-concurrency">Gunicorn, Web Servers, and Concurrency</h3>
<blockquote class="blockquote">
<p>‚ÄúR has no widely-used web server to help it run concurrently.‚Äù</p>
</blockquote>
<p>The premise of this whole blog post stems from the fact that there is no easily concurrent web server for R. Which is true and is the reason I built Valve. It doesn‚Äôt meet the criteria of widely used because no one has used it. In part, because of posts like this that discourage people from using R in production.</p>
</section><section id="types-and-conversion" class="level3"><h3 class="anchored" data-anchor-id="types-and-conversion">Types and Conversion</h3>
<p>There‚Äôs this weird bit about how <code>1</code> and <code>c(1, 2)</code> are treated as the same class and unboxing of json. They provide the following python code as a desirable pattern for processing data.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4">json.dump(x, sys.stdout)</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1</span></span>
<span id="cb1-6">json.dump(y, sys.stdout)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1, 2]</span></span></code></pre></div>
<p>They want scalars to be unboxed and lists to remain lists. This is the same behavior as <code>jsonlite</code>, though.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonlite</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, auto_unbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 </code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonlite</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, auto_unbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1,2] </code></pre>
</div>
</div>
<p>There‚Äôs a difference here: one that the author fails to recognize is that a length 1 vector is handled appropriately. What the author is saying is that they don‚Äôt like that R doesn‚Äôt behave the same way as Python. You, as a developer should be able to guarantee that a value is length 1. It‚Äôs easy. <code>length(x) == 1</code>, or if you want <code>is_scalar &lt;- function(x) length(x) == 1</code>. This is the type system in R and json libraries handle the ‚Äúedge case‚Äù appropriately. There is nothing wrong here. The reprex is the same as the python library.</p>
<blockquote class="blockquote">
<p>‚ÄúR (and Plumber) also do not enforce types of parameters to your API, as opposed to FastAPI, for instance, which does via the use of pydantic.‚Äù</p>
</blockquote>
<p>Python does not type check nor does FastAPI. You opt in to type checking with FastAPI. You can do the same with Plumber. A quick perusal of the docs will show you this. Find the <a href="https://www.rplumber.io/articles/annotations.html"><code>@param</code></a> section. There is some concessions here, though. The truthful part here is the type annotations do type conversion for only dynamic routes. Which, I don‚Äôt know if FastAPI does. Type handling for static parameters is an <a href="https://github.com/rstudio/plumber/issues/755">outstanding issue of mine for plumber since 2021</a>.</p>
<p>I‚Äôve followed up on the issue above and within minutes the maintainer responded. There is an existing <a href="https://github.com/rstudio/plumber/pull/905">PR to handle this issue</a>.</p>
<p>This just goes to show if that you want something done in the open source world, just ask for it. More than likely its already there or just waiting for the slight nudge from someone else.</p>
<p>While I know it‚Äôs not ‚Äúseemless‚Äù adding an <code><a href="https://rdrr.io/r/base/integer.html">as.integer()</a></code> and a <code>stopifnot(is.integer(n))</code> isn‚Äôt the wildest thing for a developer to do.</p>
<p>There is a comparison between type checking in R and Python with the python example using type hints which are, again, opt-in. An unfair comparison when you say ‚Äúif you don‚Äôt use the opt-in features of plumber but use the opt-in features of FastAPI, FastAPI is better.‚Äù</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb6-2"></span>
<span id="cb6-3">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/types"</span>)</span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> types(n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb6-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</section><section id="clients-and-testing" class="level3"><h3 class="anchored" data-anchor-id="clients-and-testing">Clients and Testing</h3>
<p>I haven‚Äôt done much testing of API endpoints but I do know that there are two de facto packages for this:</p>
<ul>
<li>
<a href="https://enpiar.com/r/httptest/articles/httptest.html"><code>{httptest}</code></a> and</li>
<li>
<a href="https://docs.ropensci.org/webmockr/"><code>{webmockr}</code></a>.</li>
</ul>
<p>These are pretty easy to find. Not so sure why they weren‚Äôt mentioned or even tested.</p>
</section><section id="performance" class="level3"><h3 class="anchored" data-anchor-id="performance">Performance</h3>
<p>JSON serialization is a quite interesting thing to base performance off of. I‚Äôve never seen how fast pandas serialization is. Quite impressive! But, keep with me, because you‚Äôll see, this is fibbing with benchmarks.</p>
<p>I do have thoughts on the use of jsonlite and it‚Äôs ubiquity. jsonlite is slow. I don‚Äôt like it. My belief is that everyone should use <a href="https://github.com/SymbolixAU/jsonify"><code>{jsonify}</code></a> when creating json. It‚Äôs damn good.</p>
<p>So, when I run these bench marks on my machine for parsing I get:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/microbenchmark/man/microbenchmark.html">microbenchmark</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  jsonify <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonify</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonify/man/to_json.html">to_json</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  jsonlite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonlite</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">toJSON</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ms"</span>, </span>
<span>  times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in microbenchmark::microbenchmark(jsonify = jsonify::to_json(iris), :
less accurate nanosecond times to avoid potential integer overflows</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'jsonify':
  method     from    
  print.json jsonlite</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
     expr      min       lq      mean    median       uq      max neval cld
  jsonify 0.258218 0.265024 0.3224672 0.2698005 0.280850 35.20330  1000  a 
 jsonlite 0.346245 0.360759 0.4169715 0.3719110 0.399012 20.00181  1000   b</code></pre>
</div>
</div>
<p>A very noticable difference in using jsonify over jsonlite. The same benchmark using pandas is holy sh!t fast!</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timeit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timeit</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-3"></span>
<span id="cb11-4">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fastapi-example/iris.csv"</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb11-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean runtime:"</span>, </span>
<span id="cb11-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> timeit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iris.to_json(orient = "records")'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>(), number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb11-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"milliseconds"</span></span>
<span id="cb11-12">)</span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Mean runtime: 0.0721 milliseconds</span></span></code></pre></div>
<p>Now, this is only half the story. This is <em>serialization</em>. What about the other part? Where you ingest it.</p>
<p>Here, I will also say, again, that you shouldn‚Äôt use jsonlite because it is slow. Instead, you should use <a href="https://github.com/eddelbuettel/rcppsimdjson"><code>{RcppSimdJson}</code></a>. Because its</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6E7ZGCfruaw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Let‚Äôs run another benchmark</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jsn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonify</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonify/man/to_json.html">to_json</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">iris</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span></span>
<span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/microbenchmark/man/microbenchmark.html">microbenchmark</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span>  simd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RcppSimdJson</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/RcppSimdJson/man/fparse.html">fparse</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jsn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  jsonlite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jsonlite</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/pkg/jsonlite/man/fromJSON.html">fromJSON</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">jsn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,</span>
<span>  unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ms"</span>,</span>
<span>  times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
     expr      min        lq       mean   median        uq      max neval cld
     simd 0.052275 0.0551040 0.06672631 0.057933 0.0634885 4.316275  1000  a 
 jsonlite 0.433165 0.4531525 0.48931155 0.467359 0.4919795 4.352232  1000   b</code></pre>
</div>
</div>
<p>RcppSimdJson is ~8 times faster than jsonlite.</p>
<p>Let‚Äôs do a similar benchmark in python.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">jsn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.to_json(orient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"records"</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb14-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean runtime:"</span>, </span>
<span id="cb14-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> timeit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pd.read_json(jsn)'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>(), number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb14-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"milliseconds"</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Mean runtime: 1.2629 milliseconds</span></span></code></pre></div>
<p>Python is 3x slower than jsonlite in this case and 25x slower than RcppSimdJson. Which is very slow. While serializing is an important thing to be fast in, so is parsing the incoming json you are receiving. How nice it is to show only half the story! Use RcppSimdJson and embarrass pandas‚Äô json parsing.</p>
</section><section id="integration-with-tooling" class="level3"><h3 class="anchored" data-anchor-id="integration-with-tooling">Integration with Tooling</h3>
<p>I have literally no idea about any of these except Launchdarkly because one of my close homies worked there for years. These are all paid services so I‚Äôm not sure how they work :)</p>
<p>I would say to checkout Posit Connect for deploying R and python into production. But if your only use case is to deploy a single model, then yeah, I‚Äôd say that‚Äôs overkill.</p>
<p>I wish more companies would create tooling for R and their services. The way to do this, is to lean into using R in production and demanding (not asking) providers to make wrappers for them. When you pay for a service, you have leverage. Use it. I think too many people fall over when what they need isn‚Äôt there immediately. Be sure to be the squeeky wheel that makes change.</p>
<p>I also think that if you‚Äôre in the position where you can make a wrapper for something, you should. I did this when using Databricks in my last role and provided them with a lot of feedback. Have they taken it? I‚Äôm not sure. I‚Äôm not there to harass them anymore.</p>
</section></section><section id="workarounds" class="level2"><h2 class="anchored" data-anchor-id="workarounds">Workarounds</h2>
<p>These are good workarounds. I would suggest looking at <a href="https://ndexr.io/">ndexr.io</a> as a way to scale these R based services as well. They utilize the NGINX approach described here.</p>
</section><section id="addenda" class="level2"><h2 class="anchored" data-anchor-id="addenda">Addenda</h2>
<p>Clearly, this is where I care a lot. I am the author of <a href="https://github.com/JosiahParry/valve/">Valve</a>. Valve is exactly what the author was clamoring for in the beginning of the blog post. It is a web server that runs Plumber APIs in parallel written in Rust using Tokio, Axum, and Deadpool. Valve auto-scales on its own up to a maximum number of worker threads. So it‚Äôs not always taking up space and running more compute than it needs.</p>
<p>Valve overview:</p>
<ul>
<li>Concurrent webserver to auto-scale plumber APIs</li>
<li>written in Rust using Tokio, Axum, and Deadpool</li>
<li>spawns and kills plumber APIs based on demand</li>
<li>integration with {vetiver} of of the box</li>
</ul>
<p>First things first, I want to address ‚Äúit‚Äôs not on CRAN.‚Äù You‚Äôre right. That‚Äôs because it is a Rust crate. Crates don‚Äôt go on CRAN. I‚Äôve made an R package around it to lower the bar to entry. But it is a CLI tool at the core.</p>
<p>Obviously, it is new. It is untested. I wish I could tell everyone to use it, but I can‚Äôt. I think anyone who used it would be floored by its performance and ease of use. It is SO simple.</p>
<p>I‚Äôll push it to crates.io and CRAN in the coming weeks. Nothing like h8rs to inspire.</p>


</section> ]]></description>
  <category>rust</category>
  <category>r</category>
  <category>production</category>
  <guid>https://josiahparry.com/posts/2023-07-06-r-is-still-fast.html</guid>
  <pubDate>Thu, 06 Jul 2023 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
